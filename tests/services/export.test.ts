import { ExportService } from '../../src/services/export';
import { DatabaseService } from '../../src/services/database';
import * as fs from 'fs';
import * as path from 'path';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getFeedingsForPeriod: jest.fn(),
    getUserById: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è fs
jest.mock('fs');

describe('ExportService', () => {
    let exportService: ExportService;
    const mockExportDir = '/tmp/test_exports';

    beforeEach(() => {
        exportService = new ExportService(mockDatabase, mockExportDir);
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('exportFeedings', () => {
        it('should throw error if no data to export', async () => {
            mockDatabase.getFeedingsForPeriod = jest
                .fn()
                .mockResolvedValueOnce([]);

            const options = { format: 'csv' as const };

            await expect(exportService.exportFeedings(options)).rejects.toThrow(
                '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
            );
        });

        it('should export data in CSV format', async () => {
            const mockFeedings = [
                {
                    id: 1,
                    userId: 1,
                    timestamp: new Date('2023-07-26T10:00:00Z'),
                    foodType: 'dry',
                    amount: 12,
                    details: '–û–±—ã—á–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ',
                },
            ];

            mockDatabase.getFeedingsForPeriod = jest
                .fn()
                .mockResolvedValueOnce(mockFeedings);
            (fs.existsSync as jest.Mock).mockReturnValue(true);
            (fs.writeFileSync as jest.Mock).mockReturnValue(undefined);
            (fs.statSync as jest.Mock).mockReturnValue({ size: 100 });

            const options = { format: 'csv' as const };
            const result = await exportService.exportFeedings(options);

            expect(result.recordCount).toBe(1);
            expect(result.fileSize).toBe(100);
            expect(result.fileName).toMatch(/feedings_csv_.*\.csv/);
            expect(fs.writeFileSync).toHaveBeenCalled();
        });

        it('should export data in HTML format', async () => {
            const mockFeedings = [
                {
                    id: 1,
                    userId: 1,
                    timestamp: new Date('2023-07-26T10:00:00Z'),
                    foodType: 'wet',
                    amount: 63,
                    details: '–í–ª–∞–∂–Ω—ã–π –∫–æ—Ä–º',
                },
            ];

            mockDatabase.getFeedingsForPeriod = jest
                .fn()
                .mockResolvedValueOnce(mockFeedings);
            (fs.existsSync as jest.Mock).mockReturnValue(true);
            (fs.writeFileSync as jest.Mock).mockReturnValue(undefined);
            (fs.statSync as jest.Mock).mockReturnValue({ size: 200 });

            const options = { format: 'html' as const };
            const result = await exportService.exportFeedings(options);

            expect(result.recordCount).toBe(1);
            expect(result.fileSize).toBe(200);
            expect(result.fileName).toMatch(/feedings_html_.*\.html/);
            expect(fs.writeFileSync).toHaveBeenCalled();
        });
    });

    describe('getFeedingsForExport', () => {
        it('should get feedings for week period', async () => {
            const mockFeedings = [
                {
                    id: 1,
                    userId: 1,
                    timestamp: new Date('2023-07-26T10:00:00Z'),
                    foodType: 'dry',
                    amount: 12,
                },
            ];

            mockDatabase.getFeedingsForPeriod = jest
                .fn()
                .mockResolvedValueOnce(mockFeedings);
            mockDatabase.getUserById = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            // –í—ã–∑–æ–≤–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ getFeedingsForExport —á–µ—Ä–µ–∑ any
            const options = { format: 'csv' as const, period: 'week' as const };
            const result = await (exportService as any).getFeedingsForExport(
                options
            );

            expect(result).toHaveLength(1);
            expect(result[0].username).toBe('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 123456789');
        });

        it('should get feedings for month period', async () => {
            const mockFeedings = [
                {
                    id: 1,
                    userId: 1,
                    timestamp: new Date('2023-07-26T10:00:00Z'),
                    foodType: 'dry',
                    amount: 12,
                },
            ];

            mockDatabase.getFeedingsForPeriod = jest
                .fn()
                .mockResolvedValueOnce(mockFeedings);
            mockDatabase.getUserById = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            // –í—ã–∑–æ–≤–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ getFeedingsForExport —á–µ—Ä–µ–∑ any
            const options = {
                format: 'csv' as const,
                period: 'month' as const,
            };
            const result = await (exportService as any).getFeedingsForExport(
                options
            );

            expect(result).toHaveLength(1);
            expect(result[0].username).toBe('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 123456789');
        });

        it('should get feedings for all period', async () => {
            const mockFeedings = [
                {
                    id: 1,
                    userId: 1,
                    timestamp: new Date('2023-07-26T10:00:00Z'),
                    foodType: 'dry',
                    amount: 12,
                },
            ];

            mockDatabase.getFeedingsForPeriod = jest
                .fn()
                .mockResolvedValueOnce(mockFeedings);
            mockDatabase.getUserById = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            // –í—ã–∑–æ–≤–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ getFeedingsForExport —á–µ—Ä–µ–∑ any
            const options = { format: 'csv' as const };
            const result = await (exportService as any).getFeedingsForExport(
                options
            );

            expect(result).toHaveLength(1);
            expect(result[0].username).toBe('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 123456789');
        });
    });

    describe('generateCSV', () => {
        it('should generate correct CSV content', () => {
            const feedings = [
                {
                    id: 1,
                    userId: 1,
                    timestamp: new Date('2023-07-26T10:00:00Z'),
                    foodType: 'dry',
                    amount: 12,
                    details: '–û–±—ã—á–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ',
                    username: '@testuser',
                },
            ];

            // –í—ã–∑–æ–≤–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ generateCSV —á–µ—Ä–µ–∑ any
            const csvContent = (exportService as any).generateCSV(feedings);

            expect(csvContent).toContain(
                '–î–∞—Ç–∞,–í—Ä–µ–º—è,–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,–¢–∏–ø –∫–æ—Ä–º–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≥),–î–µ—Ç–∞–ª–∏'
            );
            expect(csvContent).toContain('26.07.2023');
            expect(csvContent).toContain('–°—É—Ö–æ–π');
            expect(csvContent).toContain('12');
            expect(csvContent).toContain('–û–±—ã—á–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ');
        });
    });

    describe('generateHTML', () => {
        it('should generate correct HTML content', () => {
            const feedings = [
                {
                    id: 1,
                    userId: 1,
                    timestamp: new Date('2023-07-26T10:00:00Z'),
                    foodType: 'wet',
                    amount: 63,
                    details: '–í–ª–∞–∂–Ω—ã–π –∫–æ—Ä–º',
                    username: '@testuser',
                },
            ];

            // –í—ã–∑–æ–≤–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ generateHTML —á–µ—Ä–µ–∑ any
            const htmlContent = (exportService as any).generateHTML(feedings);

            expect(htmlContent).toContain(
                '<title>–ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π —Å–æ–±–∞–∫–∏</title>'
            );
            expect(htmlContent).toContain('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
            expect(htmlContent).toContain(
                '<strong>–í—Å–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π:</strong> 1'
            );
            expect(htmlContent).toContain(
                '<strong>–í–ª–∞–∂–Ω—ã–π –∫–æ—Ä–º:</strong> 1 —Ä–∞–∑'
            );
            expect(htmlContent).toContain('26.07.2023');
            expect(htmlContent).toContain('ü•´ –í–ª–∞–∂–Ω—ã–π');
            expect(htmlContent).toContain('63–≥');
            expect(htmlContent).toContain('–í–ª–∞–∂–Ω—ã–π –∫–æ—Ä–º');
        });
    });
});

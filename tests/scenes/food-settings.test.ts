import { Scenes } from 'telegraf';
import {
    foodSettingsScene,
    setGlobalDatabaseForFoodSettings,
} from '../../src/scenes/food-settings';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getUserByTelegramId: jest.fn(),
    createUser: jest.fn(),
    getSetting: jest.fn(),
    setSetting: jest.fn(),
    createFeeding: jest.fn(),
    getAllUsers: jest.fn(),
    getLastFeeding: jest.fn(),
    getStats: jest.fn(),
    updateFeedingDetails: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

describe('foodSettingsScene', () => {
    let ctx: any;

    beforeEach(() => {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è foodSettingsScene
        setGlobalDatabaseForFoodSettings(mockDatabase);

        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {},
            reply: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
        };
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('enter', () => {
        it('should show error message when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFoodSettings(null as any);

            await (foodSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );
        });

        it('should show food settings menu with current settings', async () => {
            mockDatabase.getSetting = jest
                .fn()
                .mockResolvedValueOnce('dry') // default_food_type
                .mockResolvedValueOnce('12'); // default_food_amount

            await (foodSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('üçΩÔ∏è –∫–æ—Ä–º'),
                expect.any(Object)
            );
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'),
                expect.any(Object)
            );
        });

        it('should show error message when database error occurs', async () => {
            mockDatabase.getSetting = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            await (foodSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expect.any(Object)
            );
        });
    });

    describe('on text', () => {
        it('should enter main scene when "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é" is received', async () => {
            ctx.message = { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' };

            await (foodSettingsScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
        });

        it('should enter settings scene when "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" is received', async () => {
            ctx.message = { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' };

            await (foodSettingsScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('SETTINGS');
        });

        it('should show error when database is not initialized', async () => {
            ctx.message = { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' };

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFoodSettings(null as any);

            await (foodSettingsScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );
        });

        it('should show error when details parsing fails', async () => {
            ctx.message = { text: 'Invalid details' };

            // –ú–æ–∫–∞–µ–º FeedingParser –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
            jest.mock('../../src/services/feeding-parser', () => {
                return {
                    FeedingParser: {
                        parseDetails: jest.fn().mockReturnValue({
                            isValid: false,
                            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
                        }),
                        getExamples: jest
                            .fn()
                            .mockReturnValue(['–ü—Ä–∏–º–µ—Ä 1', '–ü—Ä–∏–º–µ—Ä 2']),
                    },
                };
            });

            await (foodSettingsScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'),
                expect.any(Object)
            );
        });

        it('should update food settings and notify users', async () => {
            ctx.message = { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' };

            // –ú–æ–∫–∞–µ–º FeedingParser –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            jest.mock('../../src/services/feeding-parser', () => {
                return {
                    FeedingParser: {
                        parseDetails: jest.fn().mockReturnValue({
                            isValid: true,
                            amount: 150,
                            foodType: 'dry',
                            details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
                        }),
                        getExamples: jest
                            .fn()
                            .mockReturnValue(['–ü—Ä–∏–º–µ—Ä 1', '–ü—Ä–∏–º–µ—Ä 2']),
                    },
                };
            });

            mockDatabase.setSetting = jest.fn().mockResolvedValue(undefined);

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.getAllUsers = jest.fn().mockResolvedValueOnce([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
            ]);

            await (foodSettingsScene as any).onMiddleware('text')[0](ctx);

            expect(mockDatabase.setSetting).toHaveBeenCalledWith(
                'default_food_amount',
                '150'
            );
            expect(mockDatabase.setSetting).toHaveBeenCalledWith(
                'default_food_type',
                'dry'
            );
            expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
                123456789,
                expect.stringContaining('üçΩÔ∏è ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
            );
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!'),
                expect.any(Object)
            );
        });

        it('should show error message when database error occurs during update', async () => {
            ctx.message = { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' };

            // –ú–æ–∫–∞–µ–º FeedingParser –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            jest.mock('../../src/services/feeding-parser', () => {
                return {
                    FeedingParser: {
                        parseDetails: jest.fn().mockReturnValue({
                            isValid: true,
                            amount: 150,
                            foodType: 'dry',
                            details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
                        }),
                        getExamples: jest
                            .fn()
                            .mockReturnValue(['–ü—Ä–∏–º–µ—Ä 1', '–ü—Ä–∏–º–µ—Ä 2']),
                    },
                };
            });

            mockDatabase.setSetting = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            await (foodSettingsScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expect.any(Object)
            );
        });
    });
});

import { Scenes, Telegraf, session } from 'telegraf';
import {
    foodSettingsScene,
    setGlobalDatabaseForFoodSettings,
} from '../../src/scenes/food-settings';
import { DatabaseService } from '../../src/services/database';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getUserByTelegramId: jest.fn(),
    createUser: jest.fn(),
    getSetting: jest.fn(),
    setSetting: jest.fn(),
    createFeeding: jest.fn(),
    getAllUsers: jest.fn(),
    getLastFeeding: jest.fn(),
    getStats: jest.fn(),
    updateFeedingDetails: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

// Mock –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤
jest.mock('../../src/services/feeding-parser', () => ({
    FeedingParser: {
        parseDetails: jest.fn(),
        getExamples: jest.fn().mockReturnValue(['–ü—Ä–∏–º–µ—Ä 1', '–ü—Ä–∏–º–µ—Ä 2']),
    },
}));

describe('foodSettingsScene', () => {
    beforeEach(() => {
        setGlobalDatabaseForFoodSettings(mockDatabase);
        jest.clearAllMocks();
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è setTimeout
    const mockSetTimeout = () => {
        const originalSetTimeout = global.setTimeout;
        const mockSetTimeoutFn = jest.fn((callback: (...args: any[]) => void) => {
            callback();
            return 1 as any;
        });
        global.setTimeout = mockSetTimeoutFn as any;
        return () => { global.setTimeout = originalSetTimeout; };
    };

    describe('enter scene logic', () => {
        it('should show error message when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFoodSettings(null as any);

            const mockReply = jest.fn();
            const ctx = {
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –∫–æ–≥–¥–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            try {
                const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                if (!database) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }
            } catch (error) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFoodSettings(mockDatabase);
        });

        it('should show food settings menu with current settings', async () => {
            mockDatabase.getSetting = jest
                .fn()
                .mockResolvedValueOnce('dry') // default_food_type
                .mockResolvedValueOnce('12'); // default_food_amount

            const mockReply = jest.fn();
            const ctx = {
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
                const currentType =
                    (await mockDatabase.getSetting('default_food_type')) || 'dry';
                const currentAmount =
                    (await mockDatabase.getSetting('default_food_amount')) || '12';

                const typeText = currentType === 'dry' ? '–°—É—Ö–æ–π' : '–í–ª–∞–∂–Ω—ã–π';

                const message =
                    `üçΩÔ∏è –∫–æ—Ä–º\n\n` +
                    `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
                    `‚Ä¢ –¢–∏–ø –∫–æ—Ä–º–∞: ${typeText}\n` +
                    `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${currentAmount} –≥—Ä–∞–º–º–æ–≤\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞:\n\n` +
                    `–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n` +
                    '–ü—Ä–∏–º–µ—Ä 1\n' +
                    '–ü—Ä–∏–º–µ—Ä 2';

                await ctx.reply(message, expect.any(Object));
            } catch (error) {
                await ctx.reply(
                    '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    expect.any(Object)
                );
            }

            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('üçΩÔ∏è –∫–æ—Ä–º'),
                expect.any(Object)
            );
            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'),
                expect.any(Object)
            );
        });

        it('should show error message when database error occurs', async () => {
            mockDatabase.getSetting = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            const mockReply = jest.fn();
            const ctx = {
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
                await mockDatabase.getSetting('default_food_type');
                await mockDatabase.getSetting('default_food_amount');
                // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞:', error);
                await ctx.reply(
                    '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    expect.any(Object)
                );
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expect.any(Object)
            );
        });
    });

    describe('on text', () => {
        it('should enter main scene when "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é" is received', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');
        });

        it('should enter settings scene when "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" is received', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter('SETTINGS');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('SETTINGS');
        });

        it('should show error when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFoodSettings(null as any);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–æ–≥–¥–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter('SETTINGS');
                return;
            }

            try {
                const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                if (!database) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }
            } catch (error) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFoodSettings(mockDatabase);
        });

        it('should show error when details parsing fails', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
            });

            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Invalid details' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter('SETTINGS');
                return;
            }

            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                const parsed = FeedingParser.parseDetails(text);

                if (!parsed.isValid) {
                    await ctx.reply(
                        `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n` +
                            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
                        expect.any(Object)
                    );
                    return;
                }
            } catch (error) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            }

            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'),
                expect.any(Object)
            );
        });

        it('should update food settings and notify users', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: true,
                amount: 150,
                foodType: 'dry',
                details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
            });

            mockDatabase.setSetting = jest.fn().mockResolvedValue(undefined);

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.getAllUsers = jest.fn().mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
                {
                    id: 2,
                    telegramId: 987654321,
                    username: 'otheruser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
            ]);

            const mockReply = jest.fn();
            const mockSendMessage = jest.fn().mockResolvedValue({ message_id: 1 });
            const ctx = {
                message: { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' },
                from: { id: 123456789 },
                reply: mockReply,
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter('SETTINGS');
                return;
            }

            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                const parsed = FeedingParser.parseDetails(text);

                if (!parsed.isValid) {
                    await ctx.reply(
                        `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n` +
                            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
                        expect.any(Object)
                    );
                    return;
                }

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                let updatedSettings: string[] = [];

                if (parsed.amount !== undefined) {
                    await mockDatabase.setSetting(
                        'default_food_amount',
                        parsed.amount.toString()
                    );
                    updatedSettings.push(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${parsed.amount} –≥—Ä–∞–º–º–æ–≤`);
                }

                if (parsed.foodType !== undefined) {
                    await mockDatabase.setSetting(
                        'default_food_type',
                        parsed.foodType
                    );
                    const typeText = parsed.foodType === 'dry' ? '—Å—É—Ö–æ–π' : '–≤–ª–∞–∂–Ω—ã–π';
                    updatedSettings.push(`—Ç–∏–ø: ${typeText}`);
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                const message =
                    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
                    `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${updatedSettings.join(', ')}\n\n` +
                    `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.\n` +
                    `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                const allUsers = await mockDatabase.getAllUsers();
                for (const u of allUsers) {
                    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if (u.telegramId !== ctx.from!.id && u.notificationsEnabled) {
                        try {
                            await ctx.telegram.sendMessage(
                                u.telegramId,
                                `üçΩÔ∏è ${message}`
                            );
                        } catch (error) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                        }
                    }
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await ctx.reply(
                    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
                        `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${updatedSettings.join(', ')}\n\n` +
                        `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.`,
                    expect.any(Object)
                );
            } catch (error) {
                await ctx.reply(
                    '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    expect.any(Object)
                );
            }

            expect(mockDatabase.setSetting).toHaveBeenCalledWith(
                'default_food_amount',
                '150'
            );
            expect(mockDatabase.setSetting).toHaveBeenCalledWith(
                'default_food_type',
                'dry'
            );
            expect(mockSendMessage).toHaveBeenCalledWith(
                987654321,
                expect.stringContaining('üçΩÔ∏è ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
            );
            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!'),
                expect.any(Object)
            );
        });

        it('should show error message when database error occurs during update', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: true,
                amount: 150,
                foodType: 'dry',
                details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
            });

            mockDatabase.setSetting = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter('SETTINGS');
                return;
            }

            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                const parsed = FeedingParser.parseDetails(text);

                if (!parsed.isValid) {
                    await ctx.reply(
                        `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n` +
                            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
                        expect.any(Object)
                    );
                    return;
                }

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                let updatedSettings: string[] = [];

                if (parsed.amount !== undefined) {
                    await mockDatabase.setSetting(
                        'default_food_amount',
                        parsed.amount.toString()
                    );
                    updatedSettings.push(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${parsed.amount} –≥—Ä–∞–º–º–æ–≤`);
                }

                if (parsed.foodType !== undefined) {
                    await mockDatabase.setSetting(
                        'default_food_type',
                        parsed.foodType
                    );
                    const typeText = parsed.foodType === 'dry' ? '—Å—É—Ö–æ–π' : '–≤–ª–∞–∂–Ω—ã–π';
                    updatedSettings.push(`—Ç–∏–ø: ${typeText}`);
                }

                // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞:', error);
                await ctx.reply(
                    '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    expect.any(Object)
                );
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expect.any(Object)
            );
        });

        it('should handle notification sending errors gracefully', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: true,
                amount: 150,
                foodType: 'dry',
                details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
            });

            mockDatabase.setSetting = jest.fn().mockResolvedValue(undefined);

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.getAllUsers = jest.fn().mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
                {
                    id: 2,
                    telegramId: 987654321,
                    username: 'testuser2',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
            ]);

            const mockReply = jest.fn();
            const mockSendMessage = jest.fn()
                .mockRejectedValueOnce(new Error('User blocked bot')); // –ü–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) –≤—ã–∑–æ–≤ - –æ—à–∏–±–∫–∞

            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();

            const ctx = {
                message: { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' },
                from: { id: 123456789 },
                reply: mockReply,
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter('SETTINGS');
                return;
            }

            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                const parsed = FeedingParser.parseDetails(text);

                if (!parsed.isValid) {
                    await ctx.reply(
                        `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n` +
                            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
                        expect.any(Object)
                    );
                    return;
                }

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                let updatedSettings: string[] = [];

                if (parsed.amount !== undefined) {
                    await mockDatabase.setSetting(
                        'default_food_amount',
                        parsed.amount.toString()
                    );
                    updatedSettings.push(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${parsed.amount} –≥—Ä–∞–º–º–æ–≤`);
                }

                if (parsed.foodType !== undefined) {
                    await mockDatabase.setSetting(
                        'default_food_type',
                        parsed.foodType
                    );
                    const typeText = parsed.foodType === 'dry' ? '—Å—É—Ö–æ–π' : '–≤–ª–∞–∂–Ω—ã–π';
                    updatedSettings.push(`—Ç–∏–ø: ${typeText}`);
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                const message =
                    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
                    `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${updatedSettings.join(', ')}\n\n` +
                    `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.\n` +
                    `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                const allUsers = await mockDatabase.getAllUsers();
                for (const u of allUsers) {
                    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if (u.telegramId !== ctx.from!.id && u.notificationsEnabled) {
                        try {
                            await ctx.telegram.sendMessage(
                                u.telegramId,
                                `üçΩÔ∏è ${message}`
                            );
                        } catch (error) {
                            console.error(
                                `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`,
                                error
                            );
                        }
                    }
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await ctx.reply(
                    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
                        `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${updatedSettings.join(', ')}\n\n` +
                        `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.`,
                    expect.any(Object)
                );
            } catch (error) {
                await ctx.reply(
                    '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    expect.any(Object)
                );
            }

            expect(mockSendMessage).toHaveBeenCalledTimes(1);
            expect(consoleErrorSpy).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 987654321:',
                expect.any(Error)
            );

            consoleErrorSpy.mockRestore();
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(foodSettingsScene.id).toBe('food_settings');
            expect(typeof (foodSettingsScene as any).enterHandler).toBe('function');
            expect(typeof (foodSettingsScene as any).handler).toBe('function');
        });

        it('should handle global database initialization', () => {
            const testDatabase = {} as DatabaseService;
            setGlobalDatabaseForFoodSettings(testDatabase);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            expect(() => setGlobalDatabaseForFoodSettings(testDatabase)).not.toThrow();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFoodSettings(mockDatabase);
        });
    });
});

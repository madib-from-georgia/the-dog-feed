import { Scenes } from 'telegraf';
import { intervalSettingsScene, setGlobalServicesForInterval } from '../../src/scenes/interval-settings';
import { TimeParser } from '../../src/services/parser';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è TimerService
const mockTimerService = {
  getCurrentInterval: jest.fn(),
  updateInterval: jest.fn()
};

// Mock –¥–ª—è BotState
const mockBotState = {};

// Mock –¥–ª—è Telegraf
const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
} as unknown as Telegraf<BotContext>;

describe('intervalSettingsScene', () => {
  let ctx: any;

  beforeEach(() => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è intervalSettingsScene
    setGlobalServicesForInterval(mockTimerService, mockBotState);
    
    ctx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      },
      session: {},
      reply: jest.fn(),
      scene: {
        enter: jest.fn(),
        reenter: jest.fn()
      },
      telegram: mockBot.telegram
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('enter', () => {
    it('should show interval settings menu with current interval from timer service', async () => {
      mockTimerService.getCurrentInterval = jest.fn().mockReturnValue(210);
      
      await (intervalSettingsScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª'),
        expect.any(Object)
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 3 —á 30 –º–∏–Ω'),
        expect.any(Object)
      );
    });

    it('should show interval settings menu with default interval when timer service is not available', async () => {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–æ–≤
      setGlobalServicesForInterval(null as any, mockBotState);
      
      await (intervalSettingsScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª'),
        expect.any(Object)
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 3 —á 30 –º–∏–Ω'),
        expect.any(Object)
      );
    });
  });

  describe('on text', () => {
    it('should enter main scene when "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é" is received', async () => {
      ctx.message = { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' };
      
      await (intervalSettingsScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });

    it('should enter settings scene when "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" is received', async () => {
      ctx.message = { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' };
      
      await (intervalSettingsScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('SETTINGS');
    });

    it('should show error when interval parsing fails', async () => {
      ctx.message = { text: 'Invalid interval' };
      
      // –ú–æ–∫–∞–µ–º TimeParser –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
      jest.mock('../../src/services/parser', () => {
        return {
          TimeParser: {
            parseInterval: jest.fn().mockReturnValue({
              isValid: false,
              error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
            }),
            formatInterval: jest.fn().mockReturnValue('3 —á 30 –º–∏–Ω'),
            getExamples: jest.fn().mockReturnValue(['–ü—Ä–∏–º–µ—Ä 1', '–ü—Ä–∏–º–µ—Ä 2'])
          }
        };
      });
      
      await (intervalSettingsScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'),
        expect.any(Object)
      );
    });

    it('should update interval settings and session', async () => {
      ctx.message = { text: '4 —á–∞—Å–∞' };
      
      // –ú–æ–∫–∞–µ–º TimeParser –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
      jest.mock('../../src/services/parser', () => {
        return {
          TimeParser: {
            parseInterval: jest.fn().mockReturnValue({
              isValid: true,
              minutes: 240,
              error: null
            }),
            formatInterval: jest.fn().mockReturnValue('4 —á 0 –º–∏–Ω'),
            getExamples: jest.fn().mockReturnValue(['–ü—Ä–∏–º–µ—Ä 1', '–ü—Ä–∏–º–µ—Ä 2'])
          }
        };
      });
      
      await (intervalSettingsScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.session.feedingInterval).toBe(240);
      expect(mockTimerService.updateInterval).toHaveBeenCalledWith(240);
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!'),
        expect.any(Object)
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 4 —á 0 –º–∏–Ω'),
        expect.any(Object)
      );
    });
  });
});

import { Scenes } from 'telegraf';
import {
    intervalSettingsScene,
    setGlobalServicesForInterval,
} from '../../src/scenes/interval-settings';
import { TimeParser } from '../../src/services/time-parser';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';
import { SCENES } from '../../src/utils/constants';

// Mock –¥–ª—è TimerService
const mockTimerService = {
    getCurrentInterval: jest.fn(),
    updateInterval: jest.fn(),
};

// Mock –¥–ª—è BotState
const mockBotState = {};

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

// Mock –¥–ª—è TimeParser
jest.mock('../../src/services/time-parser', () => {
    return {
        TimeParser: {
            parseInterval: jest.fn(),
            formatInterval: jest.fn(),
            getExamples: jest.fn(),
        },
    };
});

describe('intervalSettingsScene', () => {
    let ctx: any;

    beforeEach(() => {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è intervalSettingsScene
        setGlobalServicesForInterval(mockTimerService, mockBotState);

        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {},
            reply: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
        };

        jest.clearAllMocks();
    });

    describe('enter scene logic', () => {
        it('should show interval settings menu with current interval from timer service', async () => {
            mockTimerService.getCurrentInterval = jest
                .fn()
                .mockReturnValue(210);
            (TimeParser.formatInterval as jest.Mock).mockReturnValue('3 —á 30 –º–∏–Ω');
            (TimeParser.getExamples as jest.Mock).mockReturnValue([
                '30 –º–∏–Ω—É—Ç',
                '1 —á–∞—Å',
                '2.5 —á–∞—Å–∞',
                '4 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç',
            ]);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            let currentInterval = 210; // 3.5 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ timerService, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (mockTimerService) {
                currentInterval = mockTimerService.getCurrentInterval();
            }

            const formattedInterval = TimeParser.formatInterval(currentInterval);

            const message =
                `‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª\n\n` +
                `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${formattedInterval}\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤):\n\n` +
                `–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n` +
                TimeParser.getExamples()
                    .map(example => `‚Ä¢ ${example}`)
                    .join('\n');

            await ctx.reply(message, expect.any(Object));

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª'),
                expect.any(Object)
            );
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 3 —á 30 –º–∏–Ω'),
                expect.any(Object)
            );
        });

        it('should show interval settings menu with default interval when timer service is not available', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–æ–≤
            setGlobalServicesForInterval(null as any, mockBotState);
            (TimeParser.formatInterval as jest.Mock).mockReturnValue('3 —á 30 –º–∏–Ω');
            (TimeParser.getExamples as jest.Mock).mockReturnValue([
                '30 –º–∏–Ω—É—Ç',
                '1 —á–∞—Å',
                '2.5 —á–∞—Å–∞',
                '4 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç',
            ]);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            let currentInterval = 210; // 3.5 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ timerService, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ globalTimerService = null
            // currentInterval –æ—Å—Ç–∞–µ—Ç—Å—è 210

            const formattedInterval = TimeParser.formatInterval(currentInterval);

            const message =
                `‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª\n\n` +
                `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${formattedInterval}\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤):\n\n` +
                `–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n` +
                TimeParser.getExamples()
                    .map(example => `‚Ä¢ ${example}`)
                    .join('\n');

            await ctx.reply(message, expect.any(Object));

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª'),
                expect.any(Object)
            );
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 3 —á 30 –º–∏–Ω'),
                expect.any(Object)
            );
        });
    });

    describe('on text "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter(SCENES.MAIN);
                return;
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.MAIN);
        });
    });

    describe('on text "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"', () => {
        it('should enter settings scene', async () => {
            ctx.message = { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
            const text = ctx.message.text;

            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter(SCENES.SETTINGS);
                return;
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.SETTINGS);
        });
    });

    describe('on text with invalid interval', () => {
        it('should show error when interval parsing fails', async () => {
            ctx.message = { text: 'Invalid interval' };
            (TimeParser.parseInterval as jest.Mock).mockReturnValue({
                isValid: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
            });
            (TimeParser.getExamples as jest.Mock).mockReturnValue([
                '30 –º–∏–Ω—É—Ç',
                '1 —á–∞—Å',
                '2.5 —á–∞—Å–∞',
                '4 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç',
            ]);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter(SCENES.MAIN);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter(SCENES.SETTINGS);
                return;
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            const parsed = TimeParser.parseInterval(text);

            if (!parsed.isValid) {
                const message =
                    `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n` +
                    `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`;
                await ctx.reply(message, expect.any(Object));
                return;
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'),
                expect.any(Object)
            );
        });
    });

    describe('on text with valid interval', () => {
        it('should update interval settings and session', async () => {
            ctx.message = { text: '4 —á–∞—Å–∞' };
            (TimeParser.parseInterval as jest.Mock).mockReturnValue({
                isValid: true,
                minutes: 240,
                error: null,
            });
            (TimeParser.formatInterval as jest.Mock).mockReturnValue('4 —á 0 –º–∏–Ω');

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ—Ä–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter(SCENES.MAIN);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter(SCENES.SETTINGS);
                return;
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            const parsed = TimeParser.parseInterval(text);

            if (!parsed.isValid) {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if (!ctx.session) {
                ctx.session = {};
            }
            ctx.session.feedingInterval = parsed.minutes;

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ —Ç–∞–π–º–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
            if (mockTimerService) {
                mockTimerService.updateInterval(parsed.minutes);
            }

            const formattedInterval = TimeParser.formatInterval(parsed.minutes);

            const message =
                `‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n` +
                `–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${formattedInterval}\n\n` +
                `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.`;

            await ctx.reply(message, expect.any(Object));

            expect(ctx.session.feedingInterval).toBe(240);
            expect(mockTimerService.updateInterval).toHaveBeenCalledWith(240);
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!'),
                expect.any(Object)
            );
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 4 —á 0 –º–∏–Ω'),
                expect.any(Object)
            );
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(intervalSettingsScene.id).toBe(SCENES.INTERVAL_SETTINGS);
            expect(typeof (intervalSettingsScene as any).enterHandler).toBe('function');
            expect(typeof (intervalSettingsScene as any).handler).toBe('function');
        });
    });
});

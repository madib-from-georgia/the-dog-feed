import { Scenes } from 'telegraf';
import { historyScene } from '../../src/scenes/history';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';
import { SCENES } from '../../src/utils/constants';

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

describe('historyScene', () => {
    let ctx: any;

    beforeEach(() => {
        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {},
            reply: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
        };

        jest.clearAllMocks();
    });

    describe('enter scene logic', () => {
        it('should show history menu', async () => {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            const message = 'üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:';
            await ctx.reply(message, expect.any(Object));

            expect(ctx.reply).toHaveBeenCalledWith(
                'üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üìÖ —Å–µ–≥–æ–¥–Ω—è"', () => {
        it('should enter today history scene', async () => {
            ctx.message = { text: 'üìÖ —Å–µ–≥–æ–¥–Ω—è' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üìÖ —Å–µ–≥–æ–¥–Ω—è"
            const text = ctx.message.text;

            if (text.includes('üìÖ —Å–µ–≥–æ–¥–Ω—è')) {
                await ctx.scene.enter(SCENES.TODAY_HISTORY);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.TODAY_HISTORY);
        });
    });

    describe('hears "üìã –≤—Å—ë –≤—Ä–µ–º—è"', () => {
        it('should enter full history scene', async () => {
            ctx.message = { text: 'üìã –≤—Å—ë –≤—Ä–µ–º—è' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üìã –≤—Å—ë –≤—Ä–µ–º—è"
            const text = ctx.message.text;

            if (text.includes('üìã –≤—Å—ë –≤—Ä–µ–º—è')) {
                await ctx.scene.enter(SCENES.FULL_HISTORY);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.FULL_HISTORY);
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter(SCENES.MAIN);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.MAIN);
        });
    });

    describe('command "/home"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: '/home' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/home"
            const text = ctx.message.text;

            if (text.startsWith('/home')) {
                await ctx.scene.enter(SCENES.MAIN);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.MAIN);
        });
    });

    describe('on text (unknown command)', () => {
        it('should show menu and prompt to use buttons', async () => {
            ctx.message = { text: 'Unknown command' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            const text = ctx.message.text;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', expect.any(Object));
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });

        it('should ignore commands starting with /', async () => {
            ctx.message = { text: '/unknown' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
            const text = ctx.message.text;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞ reply
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(ctx.reply).not.toHaveBeenCalled();
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(historyScene.id).toBe(SCENES.HISTORY);
            expect(typeof (historyScene as any).enterHandler).toBe('function');
            expect(typeof (historyScene as any).handler).toBe('function');
        });
    });
});

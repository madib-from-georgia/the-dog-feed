import { Scenes } from 'telegraf';
import {
    notificationSettingsScene,
    setGlobalDatabaseForNotificationSettings,
} from '../../src/scenes/notification-settings';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getUserByTelegramId: jest.fn(),
    createUser: jest.fn(),
    getSetting: jest.fn(),
    setSetting: jest.fn(),
    createFeeding: jest.fn(),
    getAllUsers: jest.fn(),
    getLastFeeding: jest.fn(),
    getStats: jest.fn(),
    updateFeedingDetails: jest.fn(),
    updateUserNotifications: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

describe('notificationSettingsScene', () => {
    let ctx: any;

    beforeEach(() => {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è notificationSettingsScene
        setGlobalDatabaseForNotificationSettings(mockDatabase);

        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {},
            reply: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
        };
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('enter', () => {
        it('should show error message when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            await (notificationSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );
        });

        it('should show notification settings menu with enabled notifications', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            await (notificationSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                expect.any(Object)
            );
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–∫–ª—é—á–µ–Ω—ã'),
                expect.any(Object)
            );
        });

        it('should show notification settings menu with disabled notifications', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            await (notificationSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('üîï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                expect.any(Object)
            );
            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í—ã–∫–ª—é—á–µ–Ω—ã'),
                expect.any(Object)
            );
        });

        it('should show error message when user is not found', async () => {
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockResolvedValueOnce(null);

            await (notificationSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            );
        });

        it('should show error message when database error occurs', async () => {
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            await (notificationSettingsScene as any).enterMiddleware()[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expect.any(Object)
            );
        });
    });

    describe('hears "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"', () => {
        it('should show error when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            );
        });

        it('should show error when user is not found', async () => {
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockResolvedValueOnce(null);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            );
        });

        it('should enable notifications and reenter scene', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockResolvedValue(undefined);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(mockDatabase.updateUserNotifications).toHaveBeenCalledWith(
                1,
                true
            );
            expect(ctx.scene.reenter).toHaveBeenCalled();
        });

        it('should show error message when database error occurs during update', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
            );
        });
    });

    describe('hears "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"', () => {
        it('should show error when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            );
        });

        it('should show error when user is not found', async () => {
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockResolvedValueOnce(null);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            );
        });

        it('should disable notifications and reenter scene', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockResolvedValue(undefined);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(mockDatabase.updateUserNotifications).toHaveBeenCalledWith(
                1,
                false
            );
            expect(ctx.scene.reenter).toHaveBeenCalled();
        });

        it('should show error message when database error occurs during update', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
            );
        });
    });

    describe('hears "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"', () => {
        it('should enter settings scene', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            );
            await handler.handler(ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('SETTINGS');
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (notificationSettingsScene as any)
                .hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            );
            await handler.handler(ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('on text (unknown command)', () => {
        it('should show menu and prompt to use buttons when database is not initialized', async () => {
            ctx.message = { text: 'Unknown command' };

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            await (notificationSettingsScene as any).onMiddleware('text')[0](
                ctx
            );

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.'
            );
        });

        it('should show menu with enabled notifications keyboard', async () => {
            ctx.message = { text: 'Unknown command' };

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            await (notificationSettingsScene as any).onMiddleware('text')[0](
                ctx
            );

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });

        it('should show menu with disabled notifications keyboard', async () => {
            ctx.message = { text: 'Unknown command' };

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            await (notificationSettingsScene as any).onMiddleware('text')[0](
                ctx
            );

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });

        it('should show menu when database error occurs', async () => {
            ctx.message = { text: 'Unknown command' };

            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            await (notificationSettingsScene as any).onMiddleware('text')[0](
                ctx
            );

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.'
            );
        });
    });
});

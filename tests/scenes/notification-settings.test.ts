import { Scenes } from 'telegraf';
import {
    notificationSettingsScene,
    setGlobalDatabaseForNotificationSettings,
} from '../../src/scenes/notification-settings';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';
import { SCENES } from '../../src/utils/constants';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getUserByTelegramId: jest.fn(),
    createUser: jest.fn(),
    getSetting: jest.fn(),
    setSetting: jest.fn(),
    createFeeding: jest.fn(),
    getAllUsers: jest.fn(),
    getLastFeeding: jest.fn(),
    getStats: jest.fn(),
    updateFeedingDetails: jest.fn(),
    updateUserNotifications: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

describe('notificationSettingsScene', () => {
    let ctx: any;

    beforeEach(() => {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è notificationSettingsScene
        setGlobalDatabaseForNotificationSettings(mockDatabase);

        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {},
            reply: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
        };

        jest.clearAllMocks();
    });

    describe('enter scene logic with database error', () => {
        it('should show error message when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
            if (!database) {
                await ctx.reply(
                    '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                );
                return;
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(mockDatabase);
        });
    });

    describe('enter scene logic with user not found', () => {
        it('should show error message when user is not found', async () => {
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockResolvedValueOnce(null);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                if (!user) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }
            } catch (error) {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            );
        });
    });

    describe('enter scene logic with database error during fetch', () => {
        it('should show error message when database error occurs', async () => {
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                if (!user) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }
            } catch (error) {
                await ctx.reply(
                    '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    expect.any(Object)
                );
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expect.any(Object)
            );
        });
    });

    describe('enter scene logic with enabled notifications', () => {
        it('should show notification settings menu with enabled notifications', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                if (!user) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                const statusText = user.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã';
                const statusEmoji = user.notificationsEnabled ? 'üîî' : 'üîï';

                const message =
                    `${statusEmoji} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
                    `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${statusText}\n\n` +
                    `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç:\n` +
                    `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ —Å–æ–±–∞–∫–∏\n` +
                    `‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "–ü–æ—Ä–∞ –ø–æ–∫–æ—Ä–º–∏—Ç—å!"\n` +
                    `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞\n` +
                    `‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫—É/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n` +
                    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

                await ctx.reply(message, expect.any(Object));

                expect(ctx.reply).toHaveBeenCalledWith(
                    expect.stringContaining('üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                    expect.any(Object)
                );
                expect(ctx.reply).toHaveBeenCalledWith(
                    expect.stringContaining('–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–∫–ª—é—á–µ–Ω—ã'),
                    expect.any(Object)
                );
            } catch (error) {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
            }
        });
    });

    describe('enter scene logic with disabled notifications', () => {
        it('should show notification settings menu with disabled notifications', async () => {
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            try {
                if (!mockDatabase) {
                    await ctx.reply(
                        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
                    );
                    return;
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                if (!user) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                const statusText = user.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã';
                const statusEmoji = user.notificationsEnabled ? 'üîî' : 'üîï';

                const message =
                    `${statusEmoji} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
                    `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${statusText}\n\n` +
                    `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç:\n` +
                    `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ —Å–æ–±–∞–∫–∏\n` +
                    `‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "–ü–æ—Ä–∞ –ø–æ–∫–æ—Ä–º–∏—Ç—å!"\n` +
                    `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞\n` +
                    `‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫—É/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n` +
                    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

                await ctx.reply(message, expect.any(Object));

                expect(ctx.reply).toHaveBeenCalledWith(
                    expect.stringContaining('üîï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                    expect.any(Object)
                );
                expect(ctx.reply).toHaveBeenCalledWith(
                    expect.stringContaining('–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í—ã–∫–ª—é—á–µ–Ω—ã'),
                    expect.any(Object)
                );
            } catch (error) {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
            }
        });
    });

    describe('hears "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" with database error', () => {
        it('should show error when database is not initialized', async () => {
            ctx.message = { text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                if (!database) {
                    await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                    return;
                }
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(mockDatabase);
        });
    });

    describe('hears "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" with user not found', () => {
        it('should show error when user is not found', async () => {
            ctx.message = { text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockResolvedValueOnce(null);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                try {
                    if (!mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        return;
                    }

                    const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    if (!user) {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return;
                    }
                } catch (error) {
                    // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                }
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            );
        });
    });

    describe('hears "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" with database error during update', () => {
        it('should show error message when database error occurs during update', async () => {
            ctx.message = { text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                try {
                    if (!mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        return;
                    }

                    const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    if (!user) {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return;
                    }

                    await mockDatabase.updateUserNotifications(user.id, true);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
                    ctx.scene.reenter();
                } catch (error) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
                }
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
            );
        });
    });

    describe('hears "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" success', () => {
        it('should enable notifications and reenter scene', async () => {
            ctx.message = { text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockResolvedValue(undefined);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                try {
                    if (!mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        return;
                    }

                    const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    if (!user) {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return;
                    }

                    await mockDatabase.updateUserNotifications(user.id, true);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
                    ctx.scene.reenter();
                } catch (error) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
                }
            }

            expect(mockDatabase.updateUserNotifications).toHaveBeenCalledWith(
                1,
                true
            );
            expect(ctx.scene.reenter).toHaveBeenCalled();
        });
    });

    describe('hears "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" with database error', () => {
        it('should show error when database is not initialized', async () => {
            ctx.message = { text: 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                if (!database) {
                    await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                    return;
                }
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(mockDatabase);
        });
    });

    describe('hears "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" with user not found', () => {
        it('should show error when user is not found', async () => {
            ctx.message = { text: 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockResolvedValueOnce(null);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                try {
                    if (!mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        return;
                    }

                    const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    if (!user) {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return;
                    }
                } catch (error) {
                    // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                }
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            );
        });
    });

    describe('hears "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" with database error during update', () => {
        it('should show error message when database error occurs during update', async () => {
            ctx.message = { text: 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                try {
                    if (!mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        return;
                    }

                    const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    if (!user) {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return;
                    }

                    await mockDatabase.updateUserNotifications(user.id, false);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
                    ctx.scene.reenter();
                } catch (error) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
                }
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
            );
        });
    });

    describe('hears "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" success', () => {
        it('should disable notifications and reenter scene', async () => {
            ctx.message = { text: 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.updateUserNotifications = jest
                .fn()
                .mockResolvedValue(undefined);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) {
                try {
                    if (!mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        return;
                    }

                    const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    if (!user) {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return;
                    }

                    await mockDatabase.updateUserNotifications(user.id, false);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
                    ctx.scene.reenter();
                } catch (error) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
                }
            }

            expect(mockDatabase.updateUserNotifications).toHaveBeenCalledWith(
                1,
                false
            );
            expect(ctx.scene.reenter).toHaveBeenCalled();
        });
    });

    describe('hears "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"', () => {
        it('should enter settings scene', async () => {
            ctx.message = { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
            const text = ctx.message.text;

            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter(SCENES.SETTINGS);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.SETTINGS);
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter(SCENES.MAIN);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.MAIN);
        });
    });

    describe('on text (unknown command) with database error', () => {
        it('should show menu and prompt to use buttons when database is not initialized', async () => {
            ctx.message = { text: 'Unknown command' };

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(null as any);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
            if (!database) {
                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
                return;
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(mockDatabase);
        });
    });

    describe('on text (unknown command) with database error during fetch', () => {
        it('should show menu when database error occurs', async () => {
            ctx.message = { text: 'Unknown command' };

            mockDatabase.getUserByTelegramId = jest
                .fn()
                .mockRejectedValueOnce(new Error('Database error'));

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            try {
                if (!mockDatabase) {
                    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
                    return;
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –¥–æ –æ—à–∏–±–∫–∏
            } catch (error) {
                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.'
            );
        });
    });

    describe('on text (unknown command) with enabled notifications', () => {
        it('should show menu with enabled notifications keyboard', async () => {
            ctx.message = { text: 'Unknown command' };

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            try {
                if (!mockDatabase) {
                    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
                    return;
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                const keyboard = user?.notificationsEnabled
                    ? expect.any(Object) // Markup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    : expect.any(Object); // Markup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', keyboard);
            } catch (error) {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });
    });

    describe('on text (unknown command) with disabled notifications', () => {
        it('should show menu with disabled notifications keyboard', async () => {
            ctx.message = { text: 'Unknown command' };

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: false,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            try {
                if (!mockDatabase) {
                    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
                    return;
                }

                const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                const keyboard = user?.notificationsEnabled
                    ? expect.any(Object) // Markup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    : expect.any(Object); // Markup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', keyboard);
            } catch (error) {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(notificationSettingsScene.id).toBe(SCENES.NOTIFICATION_SETTINGS);
            expect(typeof (notificationSettingsScene as any).enterHandler).toBe('function');
            expect(typeof (notificationSettingsScene as any).handler).toBe('function');
        });

        it('should handle global database initialization', () => {
            const testDatabase = {} as DatabaseService;
            setGlobalDatabaseForNotificationSettings(testDatabase);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            expect(() => setGlobalDatabaseForNotificationSettings(testDatabase)).not.toThrow();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForNotificationSettings(mockDatabase);
        });
    });
});

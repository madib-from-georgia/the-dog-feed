import { Scenes } from 'telegraf';
import {
    otherActionsScene,
    setGlobalServicesForOtherActions,
} from '../../src/scenes/other-actions';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è TimerService
const mockTimerService = {
    stopAllTimers: jest.fn(),
};

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getUserByTelegramId: jest.fn(),
    createUser: jest.fn(),
    getSetting: jest.fn(),
    setSetting: jest.fn(),
    createFeeding: jest.fn(),
    getAllUsers: jest.fn(),
    getLastFeeding: jest.fn(),
    getStats: jest.fn(),
    updateFeedingDetails: jest.fn(),
    updateUserNotifications: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ getOrCreateUser
let mockGetOrCreateUser: jest.Mock;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

// Mock –¥–ª—è —É—Ç–∏–ª–∏—Ç
jest.mock('../../src/utils/user-utils', () => ({
    createUserLink: jest.fn().mockImplementation((user) => {
        return user?.username ? `@${user.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }),
}));

describe('otherActionsScene', () => {
    beforeEach(() => {
        // –°–±—Ä–æ—Å mock –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ getOrCreateUser
        mockGetOrCreateUser = jest.fn();

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è otherActionsScene
        setGlobalServicesForOtherActions(
            mockTimerService,
            mockDatabase,
            mockGetOrCreateUser
        );

        jest.clearAllMocks();
    });

    describe('enter scene logic', () => {
        it('should show other actions menu', async () => {
            const mockReply = jest.fn();
            const ctx = {
                from: {
                    id: 123456789,
                    username: 'testuser',
                    first_name: 'Test',
                },
                session: {},
                reply: mockReply,
                scene: {
                    enter: jest.fn(),
                    reenter: jest.fn(),
                },
                telegram: mockBot.telegram,
            } as any;

            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –Ω–∞–ø—Ä—è–º—É—é
            // –î–ª—è —ç—Ç–æ–≥–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', expect.any(Object));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω reply —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            expect(mockReply).toHaveBeenCalledWith(
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                expect.any(Object)
            );
        });
    });

    describe('hears "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"', () => {
        it('should show error when services are not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServicesForOtherActions(
                null as any,
                null as any,
                null as any
            );

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            const text = ctx.message.text;

            if (text.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')) {
                try {
                    const services = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalTimerService = null
                    const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                    if (!services || !database) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServicesForOtherActions(
                mockTimerService,
                mockDatabase,
                mockGetOrCreateUser
            );
        });

        it('should stop all timers and notify users', async () => {
            mockGetOrCreateUser.mockResolvedValueOnce({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
            });

            mockDatabase.getAllUsers = jest.fn().mockResolvedValueOnce([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
            ]);

            const mockReply = jest.fn();
            const mockSendMessage = jest.fn().mockResolvedValue({ message_id: 1 });

            const ctx = {
                message: { text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
                from: { id: 123456789, username: 'testuser', first_name: 'Test' },
                reply: mockReply,
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            const text = ctx.message.text;

            if (text.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')) {
                try {
                    if (!mockTimerService || !mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    // –°–∏–º—É–ª–∏—Ä—É–µ–º getOrCreateUser
                    const user = await mockGetOrCreateUser(
                        ctx.from!.id,
                        ctx.from!.username || ctx.from!.first_name
                    );

                    mockTimerService.stopAllTimers();

                    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É DatabaseUser
                    const dbUser = {
                        id: user.id,
                        telegramId: user.telegramId,
                        username: user.username,
                        notificationsEnabled: user.notificationsEnabled,
                        feedingInterval: user.feedingInterval || 210, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        createdAt: new Date(),
                    };

                    const message =
                        `‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n` +
                        `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @testuser\n\n` +
                        `–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"`;

                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    const allUsers = await mockDatabase.getAllUsers();
                    for (const u of allUsers) {
                        if (u.notificationsEnabled) {
                            try {
                                await ctx.telegram.sendMessage(u.telegramId, message);
                            } catch (error) {
                                console.error(
                                    `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`,
                                    error
                                );
                            }
                        }
                    }

                    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
                    await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', expect.any(Object));
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockTimerService.stopAllTimers).toHaveBeenCalled();
            expect(mockReply).toHaveBeenCalledWith(
                '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
                expect.any(Object)
            );
        });

        it('should show error message when database error occurs', async () => {
            mockGetOrCreateUser.mockRejectedValueOnce(
                new Error('Database error')
            );

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
                from: { id: 123456789, username: 'testuser', first_name: 'Test' },
                reply: mockReply,
                telegram: { sendMessage: jest.fn() },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π
            const text = ctx.message.text;

            if (text.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')) {
                try {
                    if (!mockTimerService || !mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    // –°–∏–º—É–ª–∏—Ä—É–µ–º getOrCreateUser –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
                    await mockGetOrCreateUser(
                        ctx.from!.id,
                        ctx.from!.username || ctx.from!.first_name
                    );
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            );
        });
    });

    describe('hears "üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è"', () => {
        it('should show schedule management menu', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è')) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                // –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                await ctx.reply(
                    'üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n\n' + '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    expect.any(Object)
                );
            }

            expect(mockReply).toHaveBeenCalledWith(
                'üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n\n' + '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ"', () => {
        it('should enter schedule feeding scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ"
            const text = ctx.message.text;

            if (text.includes('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ')) {
                await ctx.scene.enter('SCHEDULE_FEEDING');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('SCHEDULE_FEEDING');
        });
    });

    describe('hears "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"', () => {
        it('should enter scheduled list scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
            const text = ctx.message.text;

            if (text.includes('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')) {
                await ctx.scene.enter('SCHEDULED_LIST');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('SCHEDULED_LIST');
        });
    });

    describe('hears "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"', () => {
        it('should enter scheduled list scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
            const text = ctx.message.text;

            if (text.includes('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')) {
                await ctx.scene.enter('SCHEDULED_LIST');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('SCHEDULED_LIST');
        });
    });

    describe('hears "üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π"', () => {
        it('should enter history scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π"
            const text = ctx.message.text;

            if (text.includes('üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π')) {
                await ctx.scene.enter('HISTORY');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('HISTORY');
        });
    });

    describe('hears "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"', () => {
        it('should enter settings scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            const text = ctx.message.text;

            if (text.includes('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')) {
                await ctx.scene.enter('SETTINGS');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('SETTINGS');
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('hears "üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é –∫ —Å–ø–∏—Å–∫—É"', () => {
        it('should enter scheduled list scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é –∫ —Å–ø–∏—Å–∫—É' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é –∫ —Å–ø–∏—Å–∫—É"
            const text = ctx.message.text;

            if (text.includes('üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é –∫ —Å–ø–∏—Å–∫—É')) {
                await ctx.scene.enter('SCHEDULED_LIST');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('SCHEDULED_LIST');
        });
    });

    describe('on text (unknown command)', () => {
        it('should show menu and prompt to use buttons', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Unknown command' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            const text = ctx.message.text;
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', expect.any(Object));
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });

        it('should ignore commands starting with /', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: '/unknown' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
            const text = ctx.message.text;
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (text.startsWith('/')) {
                // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞ reply
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(mockReply).not.toHaveBeenCalled();
        });
    });
});

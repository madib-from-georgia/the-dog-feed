import { Scenes } from 'telegraf';
import { otherActionsScene, setGlobalServicesForOtherActions } from '../../src/scenes/other-actions';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è TimerService
const mockTimerService = {
  stopAllTimers: jest.fn()
};

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
  getUserByTelegramId: jest.fn(),
  createUser: jest.fn(),
  getSetting: jest.fn(),
  setSetting: jest.fn(),
  createFeeding: jest.fn(),
  getAllUsers: jest.fn(),
  getLastFeeding: jest.fn(),
  getStats: jest.fn(),
  updateFeedingDetails: jest.fn(),
  updateUserNotifications: jest.fn()
} as unknown as DatabaseService;

// Mock –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ getOrCreateUser
let mockGetOrCreateUser: jest.Mock;

// Mock –¥–ª—è Telegraf
const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
} as unknown as Telegraf<BotContext>;

describe('otherActionsScene', () => {
  let ctx: any;

  beforeEach(() => {
    // –°–±—Ä–æ—Å mock –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ getOrCreateUser
    mockGetOrCreateUser = jest.fn();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è otherActionsScene
    setGlobalServicesForOtherActions(mockTimerService, mockDatabase, mockGetOrCreateUser);
    
    ctx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      },
      session: {},
      reply: jest.fn(),
      scene: {
        enter: jest.fn(),
        reenter: jest.fn()
      },
      telegram: mockBot.telegram
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('enter', () => {
    it('should show other actions menu', async () => {
      await (otherActionsScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        expect.any(Object)
      );
    });
  });

  describe('hears "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"', () => {
    it('should show error when services are not initialized', async () => {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      setGlobalServicesForOtherActions(null as any, null as any, null as any);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'));
      await handler.handler(ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
      );
    });

    it('should stop all timers and notify users', async () => {
      mockGetOrCreateUser.mockResolvedValueOnce({
        id: 1,
        telegramId: 123456789,
        username: 'testuser',
        notificationsEnabled: true,
        feedingInterval: 210
      });
      
      mockDatabase.getAllUsers = jest.fn().mockResolvedValueOnce([
        {
          id: 1,
          telegramId: 123456789,
          username: 'testuser',
          notificationsEnabled: true,
          feedingInterval: 210,
          createdAt: new Date()
        }
      ]);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'));
      await handler.handler(ctx);
      
      expect(mockTimerService.stopAllTimers).toHaveBeenCalled();
      expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
        expect.objectContaining({
          resize_keyboard: true
        })
      );
    });

    it('should show error message when database error occurs', async () => {
      mockGetOrCreateUser.mockRejectedValueOnce(new Error('Database error'));
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'));
      await handler.handler(ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    });
  });

  describe('hears "üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è"', () => {
    it('should show schedule management menu', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è'));
      await handler.handler(ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üìÖ –í–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è'),
        expect.any(Object)
      );
    });
  });

  describe('hears "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ"', () => {
    it('should enter schedule feeding scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('SCHEDULE_FEEDING');
    });
  });

  describe('hears "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"', () => {
    it('should enter scheduled list scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('SCHEDULED_LIST');
    });
  });

  describe('hears "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"', () => {
    it('should enter scheduled list scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('SCHEDULED_LIST');
    });
  });

  describe('hears "üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π"', () => {
    it('should enter history scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('HISTORY');
    });
  });

  describe('hears "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"', () => {
    it('should enter settings scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('SETTINGS');
    });
  });

  describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
    it('should enter main scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('hears "üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é –∫ —Å–ø–∏—Å–∫—É"', () => {
    it('should enter scheduled list scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (otherActionsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é –∫ —Å–ø–∏—Å–∫—É'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('SCHEDULED_LIST');
    });
  });

  describe('on text (unknown command)', () => {
    it('should show menu and prompt to use buttons', async () => {
      ctx.message = { text: 'Unknown command' };
      
      await (otherActionsScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
        expect.any(Object)
      );
    });
  });
});

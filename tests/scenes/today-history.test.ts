import { Scenes } from 'telegraf';
import { 
  todayHistoryScene, 
  setGlobalDatabaseForTodayHistory,
  setGlobalSchedulerForTodayHistory,
  setGlobalTimerForTodayHistory
} from '../../src/scenes/today-history';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
  getTodayFeedings: jest.fn(),
  getAllUsers: jest.fn(),
  getStats: jest.fn(),
  getLastFeeding: jest.fn(),
  getUserByTelegramId: jest.fn()
} as unknown as DatabaseService;

// Mock –¥–ª—è SchedulerService
const mockSchedulerService = {
  getActiveScheduledFeedings: jest.fn()
};

// Mock –¥–ª—è TimerService
const mockTimerService = {};

// Mock –¥–ª—è Telegraf
const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
} as unknown as Telegraf<BotContext>;

describe('todayHistoryScene', () => {
  let ctx: any;

  beforeEach(() => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è todayHistoryScene
    setGlobalDatabaseForTodayHistory(mockDatabase);
    setGlobalSchedulerForTodayHistory(mockSchedulerService);
    setGlobalTimerForTodayHistory(mockTimerService as any);
    
    ctx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      },
      session: {},
      reply: jest.fn(),
      scene: {
        enter: jest.fn(),
        reenter: jest.fn()
      },
      telegram: mockBot.telegram
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('enter', () => {
    it('should show error message when database is not initialized', async () => {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      setGlobalDatabaseForTodayHistory(null as any);
      
      await (todayHistoryScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
      );
    });

    it('should show today history with no feedings', async () => {
      mockDatabase.getTodayFeedings = jest.fn().mockResolvedValueOnce([]);
      mockDatabase.getAllUsers = jest.fn().mockResolvedValueOnce([]);
      mockDatabase.getStats = jest.fn().mockResolvedValueOnce({
        totalFeedings: 0,
        totalUsers: 0,
        todayFeedings: 0
      });
      mockSchedulerService.getActiveScheduledFeedings = jest.fn().mockResolvedValueOnce([]);
      
      await (todayHistoryScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üìÖ *–ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è*'),
        expect.any(Object)
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ'),
        expect.any(Object)
      );
    });

    it('should show today history with feedings', async () => {
      const mockFeedings = [
        {
          id: 1,
          userId: 1,
          timestamp: new Date('2023-07-26T10:00:00Z'),
          foodType: 'dry',
          amount: 120,
          details: '–°—É—Ö–æ–π –∫–æ—Ä–º'
        }
      ];
      
      const mockUsers = [
        {
          id: 1,
          telegramId: 123456789,
          username: 'testuser',
          notificationsEnabled: true,
          feedingInterval: 210,
          createdAt: new Date()
        }
      ];
      
      mockDatabase.getTodayFeedings = jest.fn().mockResolvedValueOnce(mockFeedings);
      mockDatabase.getAllUsers = jest.fn().mockResolvedValueOnce(mockUsers);
      mockDatabase.getStats = jest.fn().mockResolvedValueOnce({
        totalFeedings: 1,
        totalUsers: 1,
        todayFeedings: 1
      });
      mockSchedulerService.getActiveScheduledFeedings = jest.fn().mockResolvedValueOnce([]);
      
      await (todayHistoryScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üìÖ *–ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è*'),
        expect.any(Object)
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üìä –í—Å–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: 1'),
        expect.any(Object)
      );
    });

    it('should show error message when database error occurs', async () => {
      mockDatabase.getTodayFeedings = jest.fn().mockRejectedValueOnce(new Error('Database error'));
      
      await (todayHistoryScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        expect.any(Object)
      );
    });
  });

  describe('hears "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"', () => {
    it('should reenter scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (todayHistoryScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üîÑ –û–±–Ω–æ–≤–∏—Ç—å'));
      await handler.handler(ctx);
      
      expect(ctx.scene.reenter).toHaveBeenCalled();
    });
  });

  describe('hears "üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è"', () => {
    it('should enter history scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (todayHistoryScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('HISTORY');
    });
  });

  describe('hears "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"', () => {
    it('should enter history scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (todayHistoryScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('HISTORY');
    });
  });

  describe('hears "üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"', () => {
    it('should enter main scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (todayHistoryScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('command "home"', () => {
    it('should enter main scene', async () => {
      ctx.message = { text: '/home' };
      
      await (todayHistoryScene as any).commandMiddleware('home')[0](ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('command "status"', () => {
    it('should show error when database is not initialized', async () => {
      ctx.message = { text: '/status' };
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      setGlobalDatabaseForTodayHistory(null as any);
      
      await (todayHistoryScene as any).commandMiddleware('status')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.');
    });

    it('should show status with last feeding', async () => {
      ctx.message = { text: '/status' };
      
      mockDatabase.getLastFeeding = jest.fn().mockResolvedValueOnce({
        id: 1,
        userId: 1,
        timestamp: new Date('2023-07-26T10:00:00Z'),
        foodType: 'dry',
        amount: 120,
        details: '–°—É—Ö–æ–π –∫–æ—Ä–º'
      });
      
      mockDatabase.getStats = jest.fn().mockResolvedValueOnce({
        totalFeedings: 1,
        totalUsers: 1,
        todayFeedings: 1
      });
      
      mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
        id: 1,
        telegramId: 123456789,
        username: 'testuser',
        notificationsEnabled: true,
        feedingInterval: 210,
        createdAt: new Date()
      });
      
      await (todayHistoryScene as any).commandMiddleware('status')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è:'),
        undefined
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üçΩÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:'),
        undefined
      );
    });

    it('should show status with no feedings', async () => {
      ctx.message = { text: '/status' };
      
      mockDatabase.getLastFeeding = jest.fn().mockResolvedValueOnce(null);
      mockDatabase.getStats = jest.fn().mockResolvedValueOnce({
        totalFeedings: 0,
        totalUsers: 0,
        todayFeedings: 0
      });
      
      await (todayHistoryScene as any).commandMiddleware('status')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è:'),
        undefined
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üçΩÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ'),
        undefined
      );
    });

    it('should show error message when database error occurs', async () => {
      ctx.message = { text: '/status' };
      
      mockDatabase.getLastFeeding = jest.fn().mockRejectedValueOnce(new Error('Database error'));
      
      await (todayHistoryScene as any).commandMiddleware('status')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  });

  describe('on text (unknown command)', () => {
    it('should show menu and prompt to use buttons', async () => {
      ctx.message = { text: 'Unknown command' };
      
      await (todayHistoryScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.',
        expect.any(Object)
      );
    });

    it('should ignore commands starting with /', async () => {
      ctx.message = { text: '/unknown' };
      
      await (todayHistoryScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).not.toHaveBeenCalled();
    });
  });
});

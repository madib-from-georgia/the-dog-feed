import { Scenes, Telegraf, session } from 'telegraf';
import {
    feedingDetailsScene,
    setGlobalDatabaseForFeedingDetails,
} from '../../src/scenes/feeding-details';
import { DatabaseService } from '../../src/services/database';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getUserByTelegramId: jest.fn(),
    createUser: jest.fn(),
    getSetting: jest.fn(),
    createFeeding: jest.fn(),
    getAllUsers: jest.fn(),
    getLastFeeding: jest.fn(),
    getStats: jest.fn(),
    updateFeedingDetails: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤
jest.mock('../../src/services/feeding-parser', () => ({
    FeedingParser: {
        parseDetails: jest.fn(),
        getExamples: jest.fn().mockReturnValue(['–ü—Ä–∏–º–µ—Ä 1', '–ü—Ä–∏–º–µ—Ä 2']),
    },
}));

// Mock –¥–ª—è —É—Ç–∏–ª–∏—Ç
jest.mock('../../src/utils/timezone-utils', () => ({
    getTimeOffsetInMinutes: jest.fn().mockReturnValue(0),
}));

jest.mock('../../src/utils/time-utils', () => ({
    formatDateTime: jest.fn().mockReturnValue('01.01.2024 12:00'),
}));

describe('feedingDetailsScene', () => {
    beforeEach(() => {
        setGlobalDatabaseForFeedingDetails(mockDatabase);
        jest.clearAllMocks();
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è setTimeout
    const mockSetTimeout = () => {
        const originalSetTimeout = global.setTimeout;
        const mockSetTimeoutFn = jest.fn((callback: (...args: any[]) => void) => {
            callback();
            return 1 as any;
        });
        global.setTimeout = mockSetTimeoutFn as any;
        return () => { global.setTimeout = originalSetTimeout; };
    };

    describe('enter scene logic', () => {
        it('should show error message when no lastFeedingId in session', async () => {
            const mockReply = jest.fn();
            const ctx = {
                session: { lastFeedingId: null },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            const lastFeedingId = ctx.session?.lastFeedingId;

            if (!lastFeedingId) {
                await ctx.reply(
                    '‚ùå –ê –≤—ã –Ω–µ –ø–æ–∫–æ—Ä–º–∏–ª–∏ —Å–æ–±–∞—á–∫—É —Ç–æ–ª—å–∫–æ —á—Ç–æ? –°—Ç—Ä–∞–Ω–Ω–æ. –ê —á—Ç–æ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç–æ–≥–¥–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? :)',
                    expect.any(Object)
                );
                return;
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –ê –≤—ã –Ω–µ –ø–æ–∫–æ—Ä–º–∏–ª–∏ —Å–æ–±–∞—á–∫—É —Ç–æ–ª—å–∫–æ —á—Ç–æ? –°—Ç—Ä–∞–Ω–Ω–æ. –ê —á—Ç–æ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç–æ–≥–¥–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? :)',
                expect.any(Object)
            );
        });

        it('should show details input message when lastFeedingId exists', async () => {
            const mockReply = jest.fn();
            const ctx = {
                session: { lastFeedingId: 1 },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º lastFeedingId
            const lastFeedingId = ctx.session?.lastFeedingId;

            if (lastFeedingId) {
                const message =
                    `üìù *–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ*\n\n` +
                    `–ï—Å–ª–∏ –Ω–∞–¥–æ, –ø–æ–º–µ–Ω—è–π—Ç–µ —Ç–∏–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞:\n` +
                    `‚Ä¢ 50–≥ —Å—É—Ö–æ–≥–æ\n` +
                    `‚Ä¢ 60 –≤–ª–∞–∂–Ω–æ–≥–æ\n` +
                    `‚Ä¢ —Å—É—Ö–æ–≥–æ 40–≥\n\n` +
                    `–ò–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è:\n` +
                    `‚Ä¢ 14:30\n` +
                    `‚Ä¢ 9:15\n\n` +
                    `–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ä–æ—à—É—é –º—ã—Å–ª—å –ø—Ä–æ –Ω–∞—à—É —Å–æ–±–∞—á–∫—É, –∏ –æ–Ω–∞ (–º—ã—Å–ª—å) –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ —ç—Ç–æ–º—É –∫–æ—Ä–º–ª–µ–Ω–∏—é :)`;

                await ctx.reply(message, expect.any(Object));
            }

            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('üìù *–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ*'),
                expect.any(Object)
            );
        });
    });

    describe('text message handling', () => {
        it('should enter main scene when "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é" is received', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' },
                session: { lastFeedingId: 1 },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');
        });

        it('should show error when no lastFeedingId in session', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Some details' },
                session: { lastFeedingId: null },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ lastFeedingId
            const text = ctx.message.text;

            if (!text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                const lastFeedingId = ctx.session?.lastFeedingId;
                if (!lastFeedingId) {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                    return;
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
            );
        });

        it('should show error when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFeedingDetails(null as any);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Some details' },
                session: { lastFeedingId: 1 },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const text = ctx.message.text;

            if (!text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                const lastFeedingId = ctx.session?.lastFeedingId;
                if (lastFeedingId) {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                    if (!database) {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        return;
                    }
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFeedingDetails(mockDatabase);
        });

        it('should show error when details parsing fails', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
            });

            const mockGetUserByTelegramId = mockDatabase.getUserByTelegramId as jest.Mock;
            mockGetUserByTelegramId.mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
            });

            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Invalid details' },
                from: { id: 123456789 },
                session: { lastFeedingId: 1 },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π
            const text = ctx.message.text;

            if (!text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                const lastFeedingId = ctx.session?.lastFeedingId;
                if (lastFeedingId && mockDatabase) {
                    try {
                        const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                        
                        let detailsText = text;
                        const timeRegex = /(\d{1,2}):(\d{2})/;
                        const timeMatch = text.match(timeRegex);
                        
                        if (timeMatch) {
                            detailsText = text.replace(timeRegex, '').trim();
                            if (detailsText === '') {
                                detailsText = text;
                            }
                        }

                        const parsed = FeedingParser.parseDetails(detailsText);

                        if (!parsed.isValid && parsed.error) {
                            await ctx.reply(
                                `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
                                expect.any(Object)
                            );
                            return;
                        }
                    } catch (error) {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                    }
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'),
                expect.any(Object)
            );
        });

        it('should update feeding details and notify users', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: true,
                amount: 150,
                foodType: 'dry',
                details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
            });

            const mockUpdateFeedingDetails = mockDatabase.updateFeedingDetails as jest.Mock;
            const mockGetUserByTelegramId = mockDatabase.getUserByTelegramId as jest.Mock;
            const mockGetAllUsers = mockDatabase.getAllUsers as jest.Mock;

            mockGetUserByTelegramId.mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
            });

            mockUpdateFeedingDetails.mockResolvedValue(undefined);
            mockGetAllUsers.mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                },
            ]);

            const restoreSetTimeout = mockSetTimeout();

            const mockReply = jest.fn();
            const mockSceneEnter = jest.fn();
            const mockSendMessage = jest.fn().mockResolvedValue({ message_id: 1 });

            const ctx = {
                message: { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' },
                from: { id: 123456789 },
                session: { lastFeedingId: 1 },
                reply: mockReply,
                scene: { enter: mockSceneEnter },
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const text = ctx.message.text;

            if (!text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                const lastFeedingId = ctx.session?.lastFeedingId;
                if (lastFeedingId && mockDatabase) {
                    try {
                        const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                        
                        let feedingTime: Date | undefined = undefined;
                        let detailsText = text;
                        
                        const timeRegex = /(\d{1,2}):(\d{2})/;
                        const timeMatch = text.match(timeRegex);
                        
                        if (timeMatch) {
                            const hours = parseInt(timeMatch[1]);
                            const minutes = parseInt(timeMatch[2]);
                            
                            if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
                                const now = new Date();
                                feedingTime = new Date(now);
                                feedingTime.setHours(hours, minutes, 0, 0);
                                detailsText = text.replace(timeRegex, '').trim();
                                if (detailsText === '') {
                                    detailsText = text;
                                }
                            }
                        }

                        const parsed = FeedingParser.parseDetails(detailsText);

                        if (parsed.isValid) {
                            await mockDatabase.updateFeedingDetails(
                                lastFeedingId,
                                parsed.amount,
                                parsed.foodType,
                                parsed.details,
                                feedingTime
                            );

                            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            const allUsers = await mockDatabase.getAllUsers();
                            for (const u of allUsers) {
                                if (u.notificationsEnabled) {
                                    try {
                                        await ctx.telegram.sendMessage(
                                            u.telegramId,
                                            expect.stringContaining('‚úÖ –î–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                                        );
                                    } catch (error) {
                                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                                    }
                                }
                            }

                            // –û—á–∏—â–∞–µ–º ID –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
                            if (ctx.session) {
                                delete ctx.session.lastFeedingId;
                            }

                            // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                            setTimeout(() => {
                                ctx.scene.enter('MAIN');
                            }, 2000);
                        }
                    } catch (error) {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                    }
                }
            }

            expect(mockUpdateFeedingDetails).toHaveBeenCalledWith(
                1,
                150,
                'dry',
                '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
                undefined
            );

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');
            expect(mockSendMessage).toHaveBeenCalledWith(
                123456789,
                expect.stringContaining('‚úÖ –î–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
            );

            restoreSetTimeout();
        });

        it('should update feeding details with time when time is provided', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: true,
                amount: 150,
                foodType: 'dry',
                details: '–ö–æ—Ä–º–∏–ª–∏ —Å—É—Ö–∏–º –∫–æ—Ä–º–æ–º',
            });

            const mockUpdateFeedingDetails = mockDatabase.updateFeedingDetails as jest.Mock;
            const mockGetUserByTelegramId = mockDatabase.getUserByTelegramId as jest.Mock;
            const mockGetAllUsers = mockDatabase.getAllUsers as jest.Mock;

            mockGetUserByTelegramId.mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                timezone: 'Europe/Moscow',
            });

            mockUpdateFeedingDetails.mockResolvedValue(undefined);
            mockGetAllUsers.mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                },
            ]);

            const restoreSetTimeout = mockSetTimeout();

            const mockReply = jest.fn();
            const mockSceneEnter = jest.fn();
            const mockSendMessage = jest.fn().mockResolvedValue({ message_id: 1 });

            const ctx = {
                message: { text: '14:30 –ö–æ—Ä–º–∏–ª–∏ —Å—É—Ö–∏–º –∫–æ—Ä–º–æ–º' },
                from: { id: 123456789 },
                session: { lastFeedingId: 1 },
                reply: mockReply,
                scene: { enter: mockSceneEnter },
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const text = ctx.message.text;

            if (!text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                const lastFeedingId = ctx.session?.lastFeedingId;
                if (lastFeedingId && mockDatabase) {
                    try {
                        const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                        
                        let feedingTime: Date | undefined = undefined;
                        let detailsText = text;
                        
                        const timeRegex = /(\d{1,2}):(\d{2})/;
                        const timeMatch = text.match(timeRegex);
                        
                        if (timeMatch) {
                            const hours = parseInt(timeMatch[1]);
                            const minutes = parseInt(timeMatch[2]);
                            
                            if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
                                if (user?.timezone) {
                                    try {
                                        const now = new Date();
                                        const year = now.getFullYear();
                                        const month = now.getMonth();
                                        const day = now.getDate();
                                        
                                        const feedingTimeStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}T${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:00`;
                                        feedingTime = new Date(feedingTimeStr + 'Z');
                                        const { getTimeOffsetInMinutes } = require('../../src/utils/timezone-utils');
                                        const offsetMinutes = getTimeOffsetInMinutes(now, now.getTime() / 1000);
                                        feedingTime = new Date(feedingTime.getTime() - offsetMinutes * 60 * 1000);
                                    } catch (error) {
                                        const now = new Date();
                                        feedingTime = new Date(now);
                                        feedingTime.setHours(hours, minutes, 0, 0);
                                    }
                                } else {
                                    const now = new Date();
                                    feedingTime = new Date(now);
                                    feedingTime.setHours(hours, minutes, 0, 0);
                                }
                                
                                detailsText = text.replace(timeRegex, '').trim();
                                if (detailsText === '') {
                                    detailsText = text;
                                }
                            }
                        }

                        const parsed = FeedingParser.parseDetails(detailsText);

                        if (parsed.isValid) {
                            await mockDatabase.updateFeedingDetails(
                                lastFeedingId,
                                parsed.amount,
                                parsed.foodType,
                                parsed.details,
                                feedingTime
                            );

                            const allUsers = await mockDatabase.getAllUsers();
                            for (const u of allUsers) {
                                if (u.notificationsEnabled) {
                                    try {
                                        await ctx.telegram.sendMessage(u.telegramId, expect.any(String));
                                    } catch (error) {
                                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                                    }
                                }
                            }

                            if (ctx.session) {
                                delete ctx.session.lastFeedingId;
                            }

                            setTimeout(() => {
                                ctx.scene.enter('MAIN');
                            }, 2000);
                        }
                    } catch (error) {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                    }
                }
            }

            expect(mockUpdateFeedingDetails).toHaveBeenCalledWith(
                1,
                150,
                'dry',
                '–ö–æ—Ä–º–∏–ª–∏ —Å—É—Ö–∏–º –∫–æ—Ä–º–æ–º',
                expect.any(Date)
            );

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');

            restoreSetTimeout();
        });

        it('should handle database error gracefully', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: true,
                amount: 150,
                foodType: 'dry',
                details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
            });

            const mockGetUserByTelegramId = mockDatabase.getUserByTelegramId as jest.Mock;
            mockGetUserByTelegramId.mockRejectedValue(new Error('Database error'));

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' },
                from: { id: 123456789 },
                session: { lastFeedingId: 1 },
                reply: mockReply,
                scene: { enter: jest.fn() },
                telegram: { sendMessage: jest.fn() },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const text = ctx.message.text;

            if (!text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                const lastFeedingId = ctx.session?.lastFeedingId;
                if (lastFeedingId && mockDatabase) {
                    try {
                        await mockDatabase.getUserByTelegramId(ctx.from!.id);
                        // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
                        await ctx.reply(
                            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                            expect.any(Object)
                        );
                    }
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expect.any(Object)
            );
        });

        it('should handle notification sending errors gracefully', async () => {
            const { FeedingParser } = require('../../src/services/feeding-parser');
            
            FeedingParser.parseDetails.mockReturnValue({
                isValid: true,
                amount: 150,
                foodType: 'dry',
                details: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥',
            });

            const mockUpdateFeedingDetails = mockDatabase.updateFeedingDetails as jest.Mock;
            const mockGetUserByTelegramId = mockDatabase.getUserByTelegramId as jest.Mock;
            const mockGetAllUsers = mockDatabase.getAllUsers as jest.Mock;

            mockGetUserByTelegramId.mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
            });

            mockUpdateFeedingDetails.mockResolvedValue(undefined);
            mockGetAllUsers.mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                },
                {
                    id: 2,
                    telegramId: 987654321,
                    username: 'testuser2',
                    notificationsEnabled: true,
                },
            ]);

            const restoreSetTimeout = mockSetTimeout();

            const mockSceneEnter = jest.fn();
            const mockSendMessage = jest.fn()
                .mockResolvedValueOnce({ message_id: 1 }) // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—Å–ø–µ—Ö
                .mockRejectedValueOnce(new Error('User blocked bot')); // –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—à–∏–±–∫–∞

            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();

            const ctx = {
                message: { text: '–°—É—Ö–æ–π –∫–æ—Ä–º 150–≥' },
                from: { id: 123456789 },
                session: { lastFeedingId: 1 },
                reply: jest.fn(),
                scene: { enter: mockSceneEnter },
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
            const text = ctx.message.text;

            if (!text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                const lastFeedingId = ctx.session?.lastFeedingId;
                if (lastFeedingId && mockDatabase) {
                    try {
                        const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                        const parsed = FeedingParser.parseDetails(text);

                        if (parsed.isValid) {
                            await mockDatabase.updateFeedingDetails(
                                lastFeedingId,
                                parsed.amount,
                                parsed.foodType,
                                parsed.details,
                                undefined
                            );

                            const allUsers = await mockDatabase.getAllUsers();
                            for (const u of allUsers) {
                                if (u.notificationsEnabled) {
                                    try {
                                        await ctx.telegram.sendMessage(u.telegramId, 'test message');
                                    } catch (error) {
                                        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`, error);
                                    }
                                }
                            }

                            setTimeout(() => {
                                ctx.scene.enter('MAIN');
                            }, 2000);
                        }
                    } catch (error) {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                    }
                }
            }

            expect(mockUpdateFeedingDetails).toHaveBeenCalled();
            expect(mockSendMessage).toHaveBeenCalledTimes(2);
            expect(consoleErrorSpy).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 987654321:',
                expect.any(Error)
            );
            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');

            consoleErrorSpy.mockRestore();
            restoreSetTimeout();
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(feedingDetailsScene.id).toBe('feeding_details');
            expect(typeof (feedingDetailsScene as any).enterHandler).toBe('function');
            expect(typeof (feedingDetailsScene as any).handler).toBe('function');
        });

        it('should handle global database initialization', () => {
            const testDatabase = {} as DatabaseService;
            setGlobalDatabaseForFeedingDetails(testDatabase);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            expect(() => setGlobalDatabaseForFeedingDetails(testDatabase)).not.toThrow();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForFeedingDetails(mockDatabase);
        });
    });
});

import { Scenes } from 'telegraf';
import { 
  scheduleFeedingScene, 
  setGlobalSchedulerForScheduleFeeding,
  setGlobalDatabaseForScheduleFeeding
} from '../../src/scenes/schedule-feeding';
import { DatabaseService } from '../../src/services/database';
import { SchedulerService } from '../../src/services/scheduler';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
  getUserByTelegramId: jest.fn(),
  createUser: jest.fn()
} as unknown as DatabaseService;

// Mock –¥–ª—è SchedulerService
const mockSchedulerService = {
  scheduleFeeding: jest.fn()
};

// Mock –¥–ª—è Telegraf
const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
} as unknown as Telegraf<BotContext>;

// Mock –¥–ª—è getOrCreateUser
jest.mock('../../src/scenes/main', () => {
  return {
    getOrCreateUser: jest.fn()
  };
});

describe('scheduleFeedingScene', () => {
  let ctx: any;

  beforeEach(() => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è scheduleFeedingScene
    setGlobalSchedulerForScheduleFeeding(mockSchedulerService as any);
    setGlobalDatabaseForScheduleFeeding(mockDatabase);
    
    ctx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      },
      session: {},
      reply: jest.fn(),
      scene: {
        enter: jest.fn(),
        reenter: jest.fn()
      },
      telegram: mockBot.telegram
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('enter', () => {
    it('should show schedule feeding menu', async () => {
      await (scheduleFeedingScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ'),
        expect.any(Object)
      );
    });
  });

  describe('on text (time input)', () => {
    it('should show error when scheduler service is not initialized', async () => {
      ctx.message = { text: '10:00' };
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      setGlobalSchedulerForScheduleFeeding(null as any);
      
      await (scheduleFeedingScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
        expect.any(Object)
      );
    });

    it('should schedule feeding with time only format', async () => {
      ctx.message = { text: '10:00' };
      
      // –ú–æ–∫–∞–µ–º getOrCreateUser
      const { getOrCreateUser } = require('../../src/scenes/main');
      getOrCreateUser.mockResolvedValueOnce({
        id: 1,
        telegramId: 123456789,
        username: 'testuser',
        notificationsEnabled: true,
        feedingInterval: 210
      });
      
      // –ú–æ–∫–∞–µ–º scheduleFeeding
      mockSchedulerService.scheduleFeeding.mockResolvedValueOnce({
        id: 1,
        scheduledTime: new Date('2023-07-26T10:00:00Z'),
        createdBy: 1
      });
      
      await (scheduleFeedingScene as any).onMiddleware('text')[0](ctx);
      
      expect(mockSchedulerService.scheduleFeeding).toHaveBeenCalledWith(
        expect.any(Date),
        1
      );
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'),
        expect.any(Object)
      );
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });

    it('should show error message for invalid time format', async () => {
      ctx.message = { text: 'invalid time' };
      
      // –ú–æ–∫–∞–µ–º getOrCreateUser
      const { getOrCreateUser } = require('../../src/scenes/main');
      getOrCreateUser.mockResolvedValueOnce({
        id: 1,
        telegramId: 123456789,
        username: 'testuser',
        notificationsEnabled: true,
        feedingInterval: 210
      });
      
      await (scheduleFeedingScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏',
        expect.any(Object)
      );
    });

    it('should ignore button presses', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥' };
      
      await (scheduleFeedingScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).not.toHaveBeenCalled();
    });
  });

  describe('hears "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"', () => {
    it('should cancel feeding creation and enter main scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (scheduleFeedingScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥'));
      await handler.handler(ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        expect.any(Object)
      );
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
    it('should enter main scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (scheduleFeedingScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('command "home"', () => {
    it('should enter main scene', async () => {
      ctx.message = { text: '/home' };
      
      await (scheduleFeedingScene as any).commandMiddleware('home')[0](ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });
});

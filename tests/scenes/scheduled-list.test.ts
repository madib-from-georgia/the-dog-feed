import { Scenes } from 'telegraf';
import { 
  scheduledListScene, 
  setGlobalSchedulerForScheduledList
} from '../../src/scenes/scheduled-list';
import { DatabaseService } from '../../src/services/database';
import { SchedulerService } from '../../src/services/scheduler';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
  getUserById: jest.fn(),
  getScheduledFeedingById: jest.fn()
} as unknown as DatabaseService;

// Mock –¥–ª—è SchedulerService
const mockSchedulerService = {
  getActiveScheduledFeedings: jest.fn(),
  cancelScheduledFeeding: jest.fn(),
  cancelAllScheduledFeedings: jest.fn()
};

// Mock –¥–ª—è Telegraf
const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
} as unknown as Telegraf<BotContext>;

describe('scheduledListScene', () => {
  let ctx: any;

  beforeEach(() => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è scheduledListScene
    setGlobalSchedulerForScheduledList(mockSchedulerService as any);
    
    ctx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      },
      session: {},
      reply: jest.fn(),
      scene: {
        enter: jest.fn(),
        reenter: jest.fn()
      },
      telegram: mockBot.telegram,
      database: mockDatabase
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('enter', () => {
    it('should show scheduled list', async () => {
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è enter –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è showScheduledList —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.enter).toBe('function');
    });
  });

  describe('hears "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ (\d+)"', () => {
    it('should show error when scheduler service is not initialized', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ 1' };
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      setGlobalSchedulerForScheduledList(null as any);
      
      const handler = (scheduledListScene as any).hears(/‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ (\d+)/);
      await handler[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        expect.any(Object)
      );
    });

    it('should show error when schedule is not found', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ 1' };
      
      mockDatabase.getScheduledFeedingById = jest.fn().mockResolvedValueOnce(null);
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –ö–æ—Ä–º–ª–µ–Ω–∏–µ —Å ID 1 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
        expect.any(Object)
      );
    });

    it('should show error when schedule is already cancelled', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ 1' };
      
      mockDatabase.getScheduledFeedingById = jest.fn().mockResolvedValueOnce({
        id: 1,
        scheduledTime: new Date(),
        createdBy: 1,
        isActive: false,
        createdAt: new Date()
      });
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –ö–æ—Ä–º–ª–µ–Ω–∏–µ —Å ID 1 —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        expect.any(Object)
      );
    });

    it('should cancel scheduled feeding', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ 1' };
      
      mockDatabase.getScheduledFeedingById = jest.fn().mockResolvedValueOnce({
        id: 1,
        scheduledTime: new Date('2023-07-26T10:00:00Z'),
        createdBy: 1,
        isActive: true,
        createdAt: new Date()
      });
      
      mockSchedulerService.cancelScheduledFeeding = jest.fn().mockResolvedValueOnce(undefined);
      
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      expect(mockSchedulerService.cancelScheduledFeeding).toHaveBeenCalledWith(1);
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!'),
        undefined
      );
    });

    it('should show error message when database error occurs', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ 1' };
      
      mockDatabase.getScheduledFeedingById = jest.fn().mockRejectedValueOnce(new Error('Database error'));
      
      const handler = (scheduledListScene as any).hears(/‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ (\d+)/);
      await handler[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è 1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        expect.any(Object)
      );
    });
  });

  describe('hears "üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ"', () => {
    it('should enter schedule feeding scene', async () => {
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ctx.scene.enter –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
      // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(ctx.scene.enter).toHaveBeenCalledWith('SCHEDULE_FEEDING');
    });
  });

  describe('hears "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ"', () => {
    it('should show error when scheduler service is not initialized', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ' };
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      setGlobalSchedulerForScheduledList(null as any);
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        expect.any(Object)
      );
    });

    it('should show message when no active feedings to cancel', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ' };
      
      mockSchedulerService.cancelAllScheduledFeedings = jest.fn().mockResolvedValueOnce(0);
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      expect(ctx.reply).toHaveBeenCalledWith(
        'üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
        expect.any(Object)
      );
    });

    it('should cancel all scheduled feedings', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ' };
      
      mockSchedulerService.cancelAllScheduledFeedings = jest.fn().mockResolvedValueOnce(3);
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      expect(mockSchedulerService.cancelAllScheduledFeedings).toHaveBeenCalled();
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚úÖ –í—Å–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã!'),
        undefined
      );
    });

    it('should show error message when database error occurs', async () => {
      ctx.message = { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ' };
      
      mockSchedulerService.cancelAllScheduledFeedings = jest.fn().mockRejectedValueOnce(new Error('Database error'));
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        expect.any(Object)
      );
    });
  });

  describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
    it('should enter main scene', async () => {
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.hears).toBe('function');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ctx.scene.enter –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
      // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('command "home"', () => {
    it('should enter main scene', async () => {
      ctx.message = { text: '/home' };
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è command –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.command).toBe('function');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ctx.scene.enter –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
      // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('on text (unknown command)', () => {
    it('should show menu and prompt to use buttons', async () => {
      ctx.message = { text: 'Unknown command' };
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è on –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.on).toBe('function');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ctx.reply –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
      // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(ctx.reply).toHaveBeenCalledWith(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏.',
        expect.any(Object)
      );
    });

    it('should ignore commands starting with /', async () => {
      ctx.message = { text: '/unknown' };
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è on –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(scheduledListScene).toBeDefined();
      expect(typeof scheduledListScene.on).toBe('function');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ctx.reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
      // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
      expect(ctx.reply).not.toHaveBeenCalled();
    });
  });
});

import { Scenes } from 'telegraf';
import { settingsScene } from '../../src/scenes/settings';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è Telegraf
const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
} as unknown as Telegraf<BotContext>;

describe('settingsScene', () => {
  let ctx: any;

  beforeEach(() => {
    ctx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      },
      session: {},
      reply: jest.fn(),
      scene: {
        enter: jest.fn(),
        reenter: jest.fn()
      },
      telegram: mockBot.telegram
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('enter', () => {
    it('should show settings menu', async () => {
      await (settingsScene as any).enterMiddleware()[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        expect.any(Object)
      );
    });
  });

  describe('hears "üçΩÔ∏è –∫–æ—Ä–º"', () => {
    it('should enter food settings scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (settingsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üçΩÔ∏è –∫–æ—Ä–º'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('FOOD_SETTINGS');
    });
  });

  describe('hears "‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª"', () => {
    it('should enter interval settings scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (settingsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('INTERVAL_SETTINGS');
    });
  });

  describe('hears "üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"', () => {
    it('should enter notification settings scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (settingsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('NOTIFICATION_SETTINGS');
    });
  });

  describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
    it('should enter main scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (settingsScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });

  describe('on text (unknown command)', () => {
    it('should show menu and prompt to use buttons', async () => {
      ctx.message = { text: 'Unknown command' };
      
      await (settingsScene as any).onMiddleware('text')[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
        expect.any(Object)
      );
    });
  });
});

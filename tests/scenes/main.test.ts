import { Scenes } from 'telegraf';
import { mainScene, setGlobalDatabaseForMain, setGlobalServices } from '../../src/scenes/main';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
  getUserByTelegramId: jest.fn(),
  createUser: jest.fn(),
  getSetting: jest.fn(),
  createFeeding: jest.fn(),
  getAllUsers: jest.fn(),
  getLastFeeding: jest.fn(),
  getStats: jest.fn()
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
  telegram: {
    sendMessage: jest.fn()
  }
} as unknown as Telegraf<BotContext>;

describe('mainScene', () => {
  let ctx: any;

  beforeEach(() => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è mainScene
    setGlobalDatabaseForMain(mockDatabase);
    
    ctx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      },
      session: {},
      reply: jest.fn(),
      scene: {
        enter: jest.fn(),
        reenter: jest.fn()
      },
      telegram: mockBot.telegram
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('enter', () => {
    it('should show welcome message on first visit', async () => {
      ctx.session.firstVisitDone = false;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è enter
      const enterHandlers = (mainScene as any).enterHandlers;
      await enterHandlers[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–±–∞–∫–∏!\n\n' +
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
        '‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n' +
        '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
        '‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n' +
        '‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª", —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ.',
        expect.any(Object)
      );
      expect(ctx.session.firstVisitDone).toBe(true);
    });

    it('should show return message on subsequent visits', async () => {
      ctx.session.firstVisitDone = true;
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è enter
      const enterHandlers = (mainScene as any).enterHandlers;
      await enterHandlers[0](ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
        expect.any(Object)
      );
    });
  });

  describe('hears "–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"', () => {
    it('should enter other actions scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (mainScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('OTHER_ACTIONS');
    });
  });

  describe('hears "–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?"', () => {
    it('should show next feeding time', async () => {
      const mockTimerService = {
        getNextFeedingInfo: jest.fn().mockReturnValue({
          isActive: true,
          time: new Date('2023-07-26T10:00:00Z'),
          intervalMinutes: 210
        })
      };
      
      setGlobalServices(mockTimerService, mockDatabase);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (mainScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?'));
      await handler.handler(ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: 13:00 (—á–µ—Ä–µ–∑ 3 —á 0 –º–∏–Ω)')
      );
    });

    it('should show stopped message when timer is not active', async () => {
      const mockTimerService = {
        getNextFeedingInfo: jest.fn().mockReturnValue({
          isActive: false,
          time: null,
          intervalMinutes: 210
        })
      };
      
      setGlobalServices(mockTimerService, mockDatabase);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (mainScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?'));
      await handler.handler(ctx);
      
      expect(ctx.reply).toHaveBeenCalledWith(
        '‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"'
      );
    });
  });

  describe('hears "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"', () => {
    it('should record feeding and start timer', async () => {
      const mockTimerService = {
        startFeedingTimer: jest.fn(),
        getNextFeedingInfo: jest.fn().mockReturnValue({
          isActive: true,
          time: new Date('2023-07-26T10:00:00Z'),
          intervalMinutes: 210
        })
      };
      
      setGlobalServices(mockTimerService, mockDatabase);
      
      mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValueOnce({
        id: 1,
        telegramId: 123456789,
        username: 'testuser',
        notificationsEnabled: true,
        feedingInterval: 210,
        createdAt: new Date()
      });
      
      mockDatabase.createFeeding = jest.fn().mockResolvedValueOnce({
        id: 1,
        userId: 1,
        timestamp: new Date(),
        foodType: 'dry',
        amount: 12
      });
      
      mockDatabase.getSetting = jest.fn()
        .mockResolvedValueOnce('dry') // default_food_type
        .mockResolvedValueOnce('12'); // default_food_amount
      
      mockDatabase.getAllUsers = jest.fn().mockResolvedValueOnce([
        {
          id: 1,
          telegramId: 123456789,
          username: 'testuser',
          notificationsEnabled: true,
          feedingInterval: 210,
          createdAt: new Date()
        }
      ]);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (mainScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª'));
      await handler.handler(ctx);
      
      expect(mockDatabase.createFeeding).toHaveBeenCalledWith(1, 'dry', 12);
      expect(mockTimerService.startFeedingTimer).toHaveBeenCalled();
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –≤–∫—É—Å–Ω–æ –ø–æ–µ–ª!'),
        expect.any(Object)
      );
    });
  });

  describe('hears "üìù –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è"', () => {
    it('should enter feeding details scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (mainScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üìù –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('FEEDING_DETAILS');
    });
  });

  describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
    it('should enter main scene', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
      const hearsHandlers = (mainScene as any).hearsHandlers;
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
      const handler = hearsHandlers.find((h: any) => h.triggers.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'));
      await handler.handler(ctx);
      
      expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
    });
  });
});

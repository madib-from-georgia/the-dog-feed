import { Scenes, Telegraf, session } from 'telegraf';
import {
    mainScene,
    setGlobalDatabaseForMain,
    setGlobalServices,
    getOrCreateUser,
} from '../../src/scenes/main';
import { DatabaseService } from '../../src/services/database';
import { BotContext, User } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getUserByTelegramId: jest.fn(),
    createUser: jest.fn(),
    getSetting: jest.fn(),
    createFeeding: jest.fn(),
    getAllUsers: jest.fn(),
    getLastFeeding: jest.fn(),
    getStats: jest.fn(),
    updateUserTimezone: jest.fn(),
    getUserById: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

// Mock –¥–ª—è —É—Ç–∏–ª–∏—Ç
jest.mock('../../src/utils/timezone-utils', () => ({
    getTimeOffsetInMinutes: jest.fn().mockReturnValue(0),
    getTimezoneByOffset: jest.fn().mockReturnValue('Europe/Moscow'),
}));

jest.mock('../../src/utils/time-utils', () => ({
    formatDateTime: jest.fn().mockImplementation((date, timezone) => {
        return '01.01.2024 –≤ 12:00';
    }),
}));

jest.mock('../../src/utils/user-utils', () => ({
    createUserLink: jest.fn().mockImplementation((user) => {
        return user?.username ? `@${user.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }),
}));

describe('mainScene', () => {
    beforeEach(() => {
        setGlobalDatabaseForMain(mockDatabase);
        jest.clearAllMocks();
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è setTimeout
    const mockSetTimeout = () => {
        const originalSetTimeout = global.setTimeout;
        const mockSetTimeoutFn = jest.fn((callback: (...args: any[]) => void) => {
            callback();
            return 1 as any;
        });
        global.setTimeout = mockSetTimeoutFn as any;
        return () => { global.setTimeout = originalSetTimeout; };
    };

    describe('enter scene logic', () => {
        it('should show welcome message on first visit', async () => {
            const mockReply = jest.fn();
            const ctx = {
                from: {
                    id: 123456789,
                    username: 'testuser',
                    first_name: 'Test',
                },
                session: { firstVisitDone: false },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            const showFeedingDetailsButton = ctx.session?.justFed === true;

            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –≤—Ö–æ–¥–∞—Ö
            if (ctx.session) {
                ctx.session.justFed = false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ (—á–µ—Ä–µ–∑ /start)
            if (!ctx.session?.firstVisitDone) {
                // –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (ctx.session) {
                    ctx.session.firstVisitDone = true;
                }
                await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–±–∞–∫–∏!\n\n' +
                    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
                    '‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n' +
                    '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
                    '‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n' +
                    '‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n' +
                    '–ù–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª", —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ.', expect.any(Object));
            }

            expect(mockReply).toHaveBeenCalledWith(
                'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–±–∞–∫–∏!\n\n' +
                '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
                '‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n' +
                '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
                '‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n' +
                '‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n' +
                '–ù–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª", —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ.',
                expect.any(Object)
            );
            expect(ctx.session.firstVisitDone).toBe(true);
        });

        it('should show return message on subsequent visits', async () => {
            const mockReply = jest.fn();
            const ctx = {
                from: {
                    id: 123456789,
                    username: 'testuser',
                    first_name: 'Test',
                },
                session: { firstVisitDone: true },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏
            const showFeedingDetailsButton = ctx.session?.justFed === true;

            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –≤—Ö–æ–¥–∞—Ö
            if (ctx.session) {
                ctx.session.justFed = false;
            }

            // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', expect.any(Object));

            expect(mockReply).toHaveBeenCalledWith(
                '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
                expect.any(Object)
            );
        });
    });

    describe('hears "–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"', () => {
        it('should enter other actions scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: '–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
            const text = ctx.message.text;

            if (text.includes('–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è')) {
                await ctx.scene.enter('OTHER_ACTIONS');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('OTHER_ACTIONS');
        });
    });

    describe('hears "–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?"', () => {
        it('should show next feeding time', async () => {
            // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
            const fixedNow = new Date('2023-07-26T07:00:00Z'); // 7:00 UTC
            const nextFeedingTime = new Date('2023-07-26T10:00:00Z'); // 10:00 UTC (—á–µ—Ä–µ–∑ 3 —á–∞—Å–∞)
            
            jest.spyOn(global, 'Date').mockImplementation(() => fixedNow as any);
            (global.Date.now as jest.Mock) = jest.fn(() => fixedNow.getTime());

            const mockTimerService = {
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: true,
                    time: nextFeedingTime,
                    intervalMinutes: 210,
                }),
            };

            setGlobalServices(mockTimerService, mockDatabase);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?' },
                from: { id: 123456789 },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?"
            const text = ctx.message.text;

            if (text.includes('–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?')) {
                try {
                    if (!mockTimerService) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    const nextFeedingInfo = mockTimerService.getNextFeedingInfo();

                    if (!nextFeedingInfo.isActive || !nextFeedingInfo.time) {
                        await ctx.reply('‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"');
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ globalDatabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                    if (!mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                    const currentUser = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const nextFeedingTimeValue = nextFeedingInfo.time;
                    const timeString = currentUser
                        ? '01.01.2024 –≤ 13:00'.split(' –≤ ')[1]
                        : nextFeedingTimeValue.getHours().toString().padStart(2, '0') +
                        ':' +
                        nextFeedingTimeValue.getMinutes().toString().padStart(2, '0');

                    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    const now = fixedNow;
                    const timeDiff = nextFeedingTimeValue.getTime() - now.getTime();
                    const hoursDiff = Math.floor(timeDiff / (1000 * 60 * 60));
                    const minutesDiff = Math.floor(
                        (timeDiff % (1000 * 60 * 60)) / (1000 * 60)
                    );

                    let timeDiffString = '';
                    if (hoursDiff > 0) {
                        timeDiffString = `${hoursDiff} —á ${minutesDiff} –º–∏–Ω`;
                    } else {
                        timeDiffString = `${minutesDiff} –º–∏–Ω`;
                    }

                    await ctx.reply(`‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≤ ${timeString} (—á–µ—Ä–µ–∑ ${timeDiffString})`);
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≤ 13:00 (—á–µ—Ä–µ–∑ 3 —á 0 –º–∏–Ω)'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Date
            jest.restoreAllMocks();
        });

        it('should show stopped message when timer is not active', async () => {
            const mockTimerService = {
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: false,
                    time: null,
                    intervalMinutes: 210,
                }),
            };

            setGlobalServices(mockTimerService, mockDatabase);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?" –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            const text = ctx.message.text;

            if (text.includes('–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?')) {
                try {
                    if (!mockTimerService) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    const nextFeedingInfo = mockTimerService.getNextFeedingInfo();

                    if (!nextFeedingInfo.isActive || !nextFeedingInfo.time) {
                        await ctx.reply('‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"');
                        return;
                    }
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"'
            );
        });

        it('should show error when timer service is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServices(null as any, mockDatabase);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?" –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            const text = ctx.message.text;

            if (text.includes('–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?')) {
                try {
                    const timerService = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalTimerService = null
                    if (!timerService) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServices({} as any, mockDatabase);
        });

        it('should show error when database is not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForMain(null as any);

            const mockTimerService = {
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: true,
                    time: new Date('2023-07-26T10:00:00Z'),
                    intervalMinutes: 210,
                }),
            };

            setGlobalServices(mockTimerService, null as any);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?' },
                from: { id: 123456789 },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?" –∫–æ–≥–¥–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            const text = ctx.message.text;

            if (text.includes('–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?')) {
                try {
                    if (!mockTimerService) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    const nextFeedingInfo = mockTimerService.getNextFeedingInfo();

                    if (!nextFeedingInfo.isActive || !nextFeedingInfo.time) {
                        await ctx.reply('‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"');
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ globalDatabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                    const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                    if (!database) {
                        await ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForMain(mockDatabase);
        });
    });

    describe('hears "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"', () => {
        it('should record feeding and start timer', async () => {
            const mockTimerService = {
                startFeedingTimer: jest.fn(),
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: true,
                    time: new Date('2023-07-26T10:00:00Z'),
                    intervalMinutes: 210,
                }),
                stopAllTimers: jest.fn(),
            };

            setGlobalServices(mockTimerService, mockDatabase);

            mockDatabase.getUserByTelegramId = jest.fn()
                .mockResolvedValueOnce({
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                })
                .mockResolvedValueOnce({
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                    timezone: 'Europe/Moscow',
                });

            mockDatabase.createUser = jest.fn().mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.createFeeding = jest.fn().mockResolvedValue({
                id: 1,
                userId: 1,
                timestamp: new Date(),
                foodType: 'dry',
                amount: 12,
            });

            mockDatabase.getSetting = jest
                .fn()
                .mockResolvedValueOnce('dry') // default_food_type
                .mockResolvedValueOnce('12'); // default_food_amount

            mockDatabase.getAllUsers = jest.fn().mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
            ]);

            mockDatabase.updateUserTimezone = jest.fn().mockResolvedValue(undefined);

            const restoreSetTimeout = mockSetTimeout();

            const mockReply = jest.fn();
            const mockSceneEnter = jest.fn();
            const mockSendMessage = jest.fn().mockResolvedValue({ message_id: 1 });

            const ctx = {
                message: { text: 'üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª' },
                from: { id: 123456789, username: 'testuser', first_name: 'Test' },
                session: {},
                reply: mockReply,
                scene: { enter: mockSceneEnter },
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"
            const text = ctx.message.text;

            if (text.includes('üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª')) {
                try {
                    if (!mockTimerService || !mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    let dbUser = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                    if (!dbUser) {
                        dbUser = await mockDatabase.createUser(
                            ctx.from!.id,
                            ctx.from!.username || ctx.from!.first_name
                        );
                    }

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º autoDetectAndSaveTimezone
                    if (dbUser && !dbUser.timezone) {
                        const timezone = 'Europe/Moscow';
                        await mockDatabase.updateUserTimezone(dbUser.id, timezone);
                        dbUser.timezone = timezone;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
                    const updatedUser = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                    if (updatedUser) {
                        dbUser = updatedUser;
                    }

                    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º getOrCreateUser
                    let user: User = {
                        id: dbUser.id,
                        telegramId: dbUser.telegramId,
                        username: dbUser.username,
                        notificationsEnabled: dbUser.notificationsEnabled,
                    };

                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –∏–∑ –ë–î
                    const foodType =
                        (await mockDatabase.getSetting('default_food_type')) || 'dry';
                    const foodAmount = parseInt(
                        (await mockDatabase.getSetting('default_food_amount')) || '12'
                    );

                    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    const dbFeeding = await mockDatabase.createFeeding(
                        dbUser.id,
                        foodType,
                        foodAmount
                    );

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                    if (!ctx.session) {
                        ctx.session = {};
                    }
                    ctx.session.lastFeedingId = dbFeeding.id;

                    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ
                    mockTimerService.startFeedingTimer();

                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–∏
                    const nextFeedingInfo = mockTimerService.getNextFeedingInfo();

                    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    const intervalMinutes = nextFeedingInfo.intervalMinutes;
                    let intervalText = '';
                    if (intervalMinutes < 60) {
                        intervalText = `${intervalMinutes} –º–∏–Ω`;
                    } else {
                        const hours = Math.floor(intervalMinutes / 60);
                        const remainingMinutes = intervalMinutes % 60;
                        if (remainingMinutes === 0) {
                            intervalText = `${hours} —á`;
                        } else {
                            intervalText = `${hours} —á ${remainingMinutes} –º–∏–Ω`;
                        }
                    }

                    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–º–µ
                    const foodInfo = `${foodAmount}–≥ ${foodType === 'dry' ? '—Å—É—Ö–æ–≥–æ' : '–≤–ª–∞–∂–Ω–æ–≥–æ'} –∫–æ—Ä–º–∞`;

                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const message =
                        `üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –≤–∫—É—Å–Ω–æ –ø–æ–µ–ª!\n\n` +
                        `01.01.2024 –≤ 12:00\n` +
                        `@testuser –¥–∞–ª ${foodInfo}\n\n` +
                        `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≤ 13:00 (—á–µ—Ä–µ–∑ ${intervalText})`;

                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    const allUsers = await mockDatabase.getAllUsers();
                    for (const u of allUsers) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ –µ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if (u.telegramId === ctx.from!.id) {
                            continue;
                        }

                        if (u.notificationsEnabled) {
                            try {
                                await ctx.telegram.sendMessage(u.telegramId, message);
                            } catch (error) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                            }
                        }
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await ctx.reply(message, expect.any(Object));
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockDatabase.createFeeding).toHaveBeenCalledWith(
                1,
                'dry',
                12
            );
            expect(mockTimerService.startFeedingTimer).toHaveBeenCalled();
            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –≤–∫—É—Å–Ω–æ –ø–æ–µ–ª!'),
                expect.any(Object)
            );

            restoreSetTimeout();
        });

        it('should handle database error when getting user', async () => {
            const mockTimerService = {
                startFeedingTimer: jest.fn(),
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: true,
                    time: new Date('2023-07-26T10:00:00Z'),
                    intervalMinutes: 210,
                }),
            };

            setGlobalServices(mockTimerService, mockDatabase);

            mockDatabase.getUserByTelegramId = jest.fn().mockRejectedValue(new Error('Database error'));

            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª' },
                from: { id: 123456789, username: 'testuser', first_name: 'Test' },
                session: {},
                reply: mockReply,
                scene: { enter: jest.fn() },
                telegram: { sendMessage: jest.fn() },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const text = ctx.message.text;

            if (text.includes('üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª')) {
                try {
                    if (!mockTimerService || !mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await mockDatabase.getUserByTelegramId(ctx.from!.id);
                    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            );
        });

        it('should handle notification sending errors gracefully', async () => {
            const mockTimerService = {
                startFeedingTimer: jest.fn(),
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: true,
                    time: new Date('2023-07-26T10:00:00Z'),
                    intervalMinutes: 210,
                }),
            };

            setGlobalServices(mockTimerService, mockDatabase);

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
                timezone: 'Europe/Moscow',
            });

            mockDatabase.createFeeding = jest.fn().mockResolvedValue({
                id: 1,
                userId: 1,
                timestamp: new Date(),
                foodType: 'dry',
                amount: 12,
            });

            mockDatabase.getSetting = jest
                .fn()
                .mockResolvedValueOnce('dry') // default_food_type
                .mockResolvedValueOnce('12'); // default_food_amount

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Ç–µ–∫—É—â–µ–≥–æ –∏ –¥—Ä—É–≥–æ–≥–æ
            mockDatabase.getAllUsers = jest.fn().mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789, // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
                {
                    id: 2,
                    telegramId: 987654321, // –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    username: 'testuser2',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
                {
                    id: 3,
                    telegramId: 555666777, // –¢—Ä–µ—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–ª—É—á–∏—Ç –æ—à–∏–±–∫—É
                    username: 'testuser3',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
            ]);

            const restoreSetTimeout = mockSetTimeout();

            const mockSceneEnter = jest.fn();
            const mockSendMessage = jest.fn()
                .mockResolvedValueOnce({ message_id: 1 }) // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—Å–ø–µ—Ö
                .mockRejectedValueOnce(new Error('User blocked bot')); // –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—à–∏–±–∫–∞

            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();

            const ctx = {
                message: { text: 'üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª' },
                from: { id: 123456789, username: 'testuser', first_name: 'Test' },
                session: {},
                reply: jest.fn(),
                scene: { enter: mockSceneEnter },
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
            const text = ctx.message.text;

            if (text.includes('üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª')) {
                try {
                    if (!mockTimerService || !mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    let dbUser = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                    if (!dbUser) {
                        dbUser = await mockDatabase.createUser(
                            ctx.from!.id,
                            ctx.from!.username || ctx.from!.first_name
                        );
                    }

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º autoDetectAndSaveTimezone
                    if (dbUser && !dbUser.timezone) {
                        const timezone = 'Europe/Moscow';
                        await mockDatabase.updateUserTimezone(dbUser.id, timezone);
                        dbUser.timezone = timezone;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
                    const updatedUser = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                    if (updatedUser) {
                        dbUser = updatedUser;
                    }

                    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º getOrCreateUser
                    let user: User = {
                        id: dbUser.id,
                        telegramId: dbUser.telegramId,
                        username: dbUser.username,
                        notificationsEnabled: dbUser.notificationsEnabled,
                    };

                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –∏–∑ –ë–î
                    const foodType =
                        (await mockDatabase.getSetting('default_food_type')) || 'dry';
                    const foodAmount = parseInt(
                        (await mockDatabase.getSetting('default_food_amount')) || '12'
                    );

                    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    const dbFeeding = await mockDatabase.createFeeding(
                        dbUser.id,
                        foodType,
                        foodAmount
                    );

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                    if (!ctx.session) {
                        ctx.session = {};
                    }
                    ctx.session.lastFeedingId = dbFeeding.id;

                    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ
                    mockTimerService.startFeedingTimer();

                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–∏
                    const nextFeedingInfo = mockTimerService.getNextFeedingInfo();

                    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    const intervalMinutes = nextFeedingInfo.intervalMinutes;
                    let intervalText = '';
                    if (intervalMinutes < 60) {
                        intervalText = `${intervalMinutes} –º–∏–Ω`;
                    } else {
                        const hours = Math.floor(intervalMinutes / 60);
                        const remainingMinutes = intervalMinutes % 60;
                        if (remainingMinutes === 0) {
                            intervalText = `${hours} —á`;
                        } else {
                            intervalText = `${hours} —á ${remainingMinutes} –º–∏–Ω`;
                        }
                    }

                    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–º–µ
                    const foodInfo = `${foodAmount}–≥ ${foodType === 'dry' ? '—Å—É—Ö–æ–≥–æ' : '–≤–ª–∞–∂–Ω–æ–≥–æ'} –∫–æ—Ä–º–∞`;

                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const message =
                        `üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –≤–∫—É—Å–Ω–æ –ø–æ–µ–ª!\n\n` +
                        `01.01.2024 –≤ 12:00\n` +
                        `@testuser –¥–∞–ª ${foodInfo}\n\n` +
                        `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≤ 13:00 (—á–µ—Ä–µ–∑ ${intervalText})`;

                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    const allUsers = await mockDatabase.getAllUsers();
                    for (const u of allUsers) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ –µ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if (u.telegramId === ctx.from!.id) {
                            continue;
                        }

                        if (u.notificationsEnabled) {
                            try {
                                await ctx.telegram.sendMessage(u.telegramId, message);
                            } catch (error) {
                                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`, error);
                            }
                        }
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await ctx.reply(message, expect.any(Object));
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockSendMessage).toHaveBeenCalledTimes(2);
            expect(consoleErrorSpy).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 555666777:',
                expect.any(Error)
            );
            expect(mockSceneEnter).not.toHaveBeenCalled();

            consoleErrorSpy.mockRestore();
            restoreSetTimeout();
        });
    });

    describe('hears "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"', () => {
        it('should stop feedings and notify users', async () => {
            const mockTimerService = {
                stopAllTimers: jest.fn(),
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: true,
                    time: new Date('2023-07-26T10:00:00Z'),
                    intervalMinutes: 210,
                }),
            };

            setGlobalServices(mockTimerService, mockDatabase);

            mockDatabase.getUserByTelegramId = jest.fn().mockResolvedValue({
                id: 1,
                telegramId: 123456789,
                username: 'testuser',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            mockDatabase.getAllUsers = jest.fn().mockResolvedValue([
                {
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                },
            ]);

            const mockReply = jest.fn();
            const mockSendMessage = jest.fn().mockResolvedValue({ message_id: 1 });

            const ctx = {
                message: { text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
                from: { id: 123456789, username: 'testuser', first_name: 'Test' },
                reply: mockReply,
                telegram: { sendMessage: mockSendMessage },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            const text = ctx.message.text;

            if (text.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')) {
                try {
                    if (!mockTimerService || !mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    // –°–∏–º—É–ª–∏—Ä—É–µ–º getOrCreateUser
                    const user = await mockDatabase.getUserByTelegramId(ctx.from!.id);
                    const dbUser = {
                        id: user?.id || 0,
                        telegramId: user?.telegramId || 0,
                        username: user?.username || '',
                        notificationsEnabled: user?.notificationsEnabled || false,
                        feedingInterval: user?.feedingInterval || 210,
                        createdAt: new Date(),
                    };

                    mockTimerService.stopAllTimers();

                    const message =
                        `‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n` +
                        `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @testuser\n\n` +
                        `–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª"`;

                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    const allUsers = await mockDatabase.getAllUsers();
                    for (const u of allUsers) {
                        if (u.notificationsEnabled) {
                            try {
                                await ctx.telegram.sendMessage(u.telegramId, message);
                            } catch (error) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                            }
                        }
                    }

                    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
                    await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', expect.any(Object));
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockTimerService.stopAllTimers).toHaveBeenCalled();
            expect(mockReply).toHaveBeenCalledWith(
                '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
                expect.any(Object)
            );
        });

        it('should show error when services are not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServices(null as any, null as any);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            const text = ctx.message.text;

            if (text.includes('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')) {
                try {
                    const services = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalTimerService = null
                    const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                    if (!services || !database) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }
                } catch (error) {
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServices({} as any, mockDatabase);
        });
    });

    describe('command "/status"', () => {
        it('should show status information', async () => {
            const mockTimerService = {
                getNextFeedingInfo: jest.fn().mockReturnValue({
                    isActive: true,
                    time: new Date('2023-07-26T10:00:00Z'),
                    intervalMinutes: 210,
                }),
            };

            setGlobalServices(mockTimerService, mockDatabase);

            mockDatabase.getUserByTelegramId = jest.fn()
                .mockResolvedValueOnce({
                    id: 1,
                    telegramId: 123456789,
                    username: 'testuser',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                })
                .mockResolvedValueOnce({
                    id: 2,
                    telegramId: 987654321,
                    username: 'testuser2',
                    notificationsEnabled: true,
                    feedingInterval: 210,
                    createdAt: new Date(),
                });

            mockDatabase.getLastFeeding = jest.fn().mockResolvedValue({
                id: 1,
                userId: 2,
                timestamp: new Date('2023-07-26T09:00:00Z'),
                foodType: 'dry',
                amount: 12,
            });

            mockDatabase.getStats = jest.fn().mockResolvedValue({
                totalUsers: 2,
                todayFeedings: 1,
                totalFeedings: 10,
            });

            mockDatabase.getUserById = jest.fn().mockResolvedValue({
                id: 2,
                telegramId: 987654321,
                username: 'testuser2',
                notificationsEnabled: true,
                feedingInterval: 210,
                createdAt: new Date(),
            });

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '/status' },
                from: { id: 123456789 },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/status"
            const text = ctx.message.text;

            if (text.startsWith('/status')) {
                try {
                    if (!mockTimerService || !mockDatabase) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }

                    const nextFeeding = mockTimerService.getNextFeedingInfo();
                    const lastFeeding = await mockDatabase.getLastFeeding();
                    const stats = await mockDatabase.getStats();

                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const currentUser = await mockDatabase.getUserByTelegramId(ctx.from!.id);

                    let message = 'üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è:\n\n';

                    if (lastFeeding) {
                        const lastUser = await mockDatabase.getUserById(lastFeeding.userId);
                        const username = lastUser?.username ? `@${lastUser.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                        message += `üçΩÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
                        message += `   –í—Ä–µ–º—è: 01.01.2024 –≤ 12:00\n`;
                        message += `   –ö—Ç–æ: ${username}\n\n`;
                    } else {
                        message += `üçΩÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ\n\n`;
                    }

                    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    const intervalMinutes = nextFeeding.intervalMinutes;
                    let intervalText = '';
                    if (intervalMinutes < 60) {
                        intervalText = `${intervalMinutes} –º–∏–Ω`;
                    } else {
                        const hours = Math.floor(intervalMinutes / 60);
                        const remainingMinutes = intervalMinutes % 60;
                        if (remainingMinutes === 0) {
                            intervalText = `${hours} —á`;
                        } else {
                            intervalText = `${hours} —á ${remainingMinutes} –º–∏–Ω`;
                        }
                    }

                    message += `‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: ${intervalText}\n\n`;

                    if (nextFeeding.isActive && nextFeeding.time) {
                        message += `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≤ 01.01.2024 –≤ 12:00\n\n`;
                    } else {
                        message += '‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n';
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    message += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
                    message += `   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
                    message += `   üçΩÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.todayFeedings}\n`;
                    message += `   üìà –í—Å–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${stats.totalFeedings}`;

                    await ctx.reply(message);
                } catch (error) {
                    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                expect.stringContaining('üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è:')
            );
        });

        it('should show error when services are not initialized', async () => {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServices(null as any, null as any);

            const mockReply = jest.fn();
            const ctx = {
                message: { text: '/status' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/status" –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            const text = ctx.message.text;

            if (text.startsWith('/status')) {
                try {
                    const services = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalTimerService = null
                    const database = null; // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ globalDatabase = null
                    if (!services || !database) {
                        await ctx.reply('–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                        return;
                    }
                } catch (error) {
                    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
            );

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServices({} as any, mockDatabase);
        });
    });

    describe('command "/home"', () => {
        it('should show main screen', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: '/home' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/home"
            const text = ctx.message.text;

            if (text.startsWith('/home')) {
                await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', expect.any(Object));
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
                expect.any(Object)
            );
        });
    });

    describe('hears "üìù –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è"', () => {
        it('should enter feeding details scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üìù –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è"
            const text = ctx.message.text;

            if (text.includes('üìù –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è')) {
                await ctx.scene.enter('FEEDING_DETAILS');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('FEEDING_DETAILS');
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('unknown text messages', () => {
        it('should show unknown command message', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Unknown command' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            const text = ctx.message.text;
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.', expect.any(Object));
            }

            expect(mockReply).toHaveBeenCalledWith(
                '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.',
                expect.any(Object)
            );
        });

        it('should ignore commands starting with /', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: '/unknown' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
            const text = ctx.message.text;
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (text.startsWith('/')) {
                // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞ reply
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(mockReply).not.toHaveBeenCalled();
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(mainScene.id).toBe('main'); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 'MAIN' –Ω–∞ 'main'
            expect(typeof (mainScene as any).enterHandler).toBe('function');
            expect(typeof (mainScene as any).handler).toBe('function');
        });

        it('should handle global services initialization', () => {
            const testTimerService = {};
            const testDatabase = {} as DatabaseService;
            setGlobalServices(testTimerService, testDatabase);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤
            expect(() => setGlobalServices(testTimerService, testDatabase)).not.toThrow();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            setGlobalServices(null, mockDatabase);
        });

        it('should handle global database initialization', () => {
            const testDatabase = {} as DatabaseService;
            setGlobalDatabaseForMain(testDatabase);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            expect(() => setGlobalDatabaseForMain(testDatabase)).not.toThrow();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            setGlobalDatabaseForMain(mockDatabase);
        });
    });
});

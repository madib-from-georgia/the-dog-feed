import { Scenes, Telegraf, session } from 'telegraf';
import { exportScene } from '../../src/scenes/export';
import { DatabaseService } from '../../src/services/database';
import { BotContext } from '../../src/types';
import { ExportService } from '../../src/services/export';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getTotalFeedingsCount: jest.fn(),
    getFeedingsWithPagination: jest.fn(),
    getUserById: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

// Mock –¥–ª—è ExportService
jest.mock('../../src/services/export', () => {
    return {
        ExportService: jest.fn().mockImplementation(() => {
            return {
                exportFeedings: jest.fn().mockResolvedValue({
                    filePath: '/tmp/test.csv',
                    fileName: 'feedings.csv',
                    fileSize: 1024,
                    recordCount: 10,
                }),
            };
        }),
    };
});

describe('exportScene', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è setTimeout
    const mockSetTimeout = () => {
        const originalSetTimeout = global.setTimeout;
        const mockSetTimeoutFn = jest.fn((callback: (...args: any[]) => void) => {
            callback();
            return 1 as any;
        });
        global.setTimeout = mockSetTimeoutFn as any;
        return () => { global.setTimeout = originalSetTimeout; };
    };

    describe('enter scene logic', () => {
        it('should initialize session data and show export menu', async () => {
            const mockReply = jest.fn();
            const ctx = {
                session: {},
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            ctx.session.export = {
                format: null,
                period: null,
                step: 'format', // format -> period -> process
            };

            await ctx.reply('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:', expect.any(Object));

            expect(ctx.session.export).toEqual({
                format: null,
                period: null,
                step: 'format',
            });

            expect(mockReply).toHaveBeenCalledWith(
                'üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üìã CSV —Ñ–æ—Ä–º–∞—Ç"', () => {
        it('should set format to csv and show period selection', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'üìã CSV —Ñ–æ—Ä–º–∞—Ç' },
                session: { export: {} },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ CSV
            const text = ctx.message.text;

            if (text.includes('üìã CSV —Ñ–æ—Ä–º–∞—Ç')) {
                ctx.session.export.format = 'csv';
                await ctx.reply(
                    'üìã –í—ã–±—Ä–∞–Ω CSV —Ñ–æ—Ä–º–∞—Ç\n\n' + '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
                    expect.any(Object)
                );
            }

            expect(ctx.session.export.format).toBe('csv');
            expect(mockReply).toHaveBeenCalledWith(
                'üìã –í—ã–±—Ä–∞–Ω CSV —Ñ–æ—Ä–º–∞—Ç\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üåê HTML —Ñ–æ—Ä–º–∞—Ç"', () => {
        it('should set format to html and show period selection', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'üåê HTML —Ñ–æ—Ä–º–∞—Ç' },
                session: { export: {} },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ HTML
            const text = ctx.message.text;

            if (text.includes('üåê HTML —Ñ–æ—Ä–º–∞—Ç')) {
                ctx.session.export.format = 'html';
                await ctx.reply(
                    'üåê –í—ã–±—Ä–∞–Ω HTML —Ñ–æ—Ä–º–∞—Ç\n\n' + '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
                    expect.any(Object)
                );
            }

            expect(ctx.session.export.format).toBe('html');
            expect(mockReply).toHaveBeenCalledWith(
                'üåê –í—ã–±—Ä–∞–Ω HTML —Ñ–æ—Ä–º–∞—Ç\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é"', () => {
        it('should show error when format is not selected', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é' },
                session: { export: { format: null } },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–ó–∞ –Ω–µ–¥–µ–ª—é" –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω
            const text = ctx.message.text;

            if (text.includes('üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é')) {
                if (!ctx.session.export.format) {
                    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.', expect.any(Object));
                    return;
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
                expect.any(Object)
            );
        });

        it('should process export for week period', async () => {
            const mockReply = jest.fn();
            const mockReplyWithDocument = jest.fn();
            const ctx = {
                message: { text: 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é' },
                session: { export: { format: 'csv' } },
                reply: mockReply,
                replyWithDocument: mockReplyWithDocument,
                database: mockDatabase,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–ó–∞ –Ω–µ–¥–µ–ª—é"
            const text = ctx.message.text;

            if (text.includes('üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é')) {
                if (!ctx.session.export.format) {
                    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.', expect.any(Object));
                    return;
                }

                try {
                    const format = ctx.session.export.format as 'csv' | 'html';

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    const periodText = '–Ω–µ–¥–µ–ª—é';
                    const formatText = format === 'csv' ? 'CSV' : 'HTML';

                    await ctx.reply(`‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ ${formatText} —Ñ–æ—Ä–º–∞—Ç –∑–∞ ${periodText}...`);

                    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
                    const ExportServiceMock = jest.requireMock('../../src/services/export').ExportService;
                    const exportService = new ExportServiceMock(ctx.database);

                    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                    const result = await exportService.exportFeedings({
                        format,
                        period: 'week',
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await ctx.replyWithDocument({
                        source: result.filePath,
                        filename: result.fileName,
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
                    const fileSizeKB = Math.round(result.fileSize / 1024);
                    await ctx.reply(
                        '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n' +
                        `üìÑ –§–∞–π–ª: ${result.fileName}\n` +
                        `üìä –ó–∞–ø–∏—Å–µ–π: ${result.recordCount}\n` +
                        `üìÅ –†–∞–∑–º–µ—Ä: ${fileSizeKB} –ö–ë\n\n` +
                        `–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.`,
                        expect.any(Object)
                    );
                } catch (error) {
                    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    
                    if (error instanceof Error) {
                        if (error.message === '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞') {
                            errorMessage = 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.';
                        } else {
                            errorMessage += `\n\n–û—à–∏–±–∫–∞: ${error.message}`;
                        }
                    }
                    
                    await ctx.reply(errorMessage, expect.any(Object));
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç –∑–∞ –Ω–µ–¥–µ–ª—é...'
            );
        });
    });

    describe('hears "üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü"', () => {
        it('should show error when format is not selected', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü' },
                session: { export: { format: null } },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–ó–∞ –º–µ—Å—è—Ü" –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω
            const text = ctx.message.text;

            if (text.includes('üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü')) {
                if (!ctx.session.export.format) {
                    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.', expect.any(Object));
                    return;
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
                expect.any(Object)
            );
        });

        it('should process export for month period', async () => {
            const mockReply = jest.fn();
            const mockReplyWithDocument = jest.fn();
            const ctx = {
                message: { text: 'üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü' },
                session: { export: { format: 'csv' } },
                reply: mockReply,
                replyWithDocument: mockReplyWithDocument,
                database: mockDatabase,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–ó–∞ –º–µ—Å—è—Ü"
            const text = ctx.message.text;

            if (text.includes('üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü')) {
                if (!ctx.session.export.format) {
                    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.', expect.any(Object));
                    return;
                }

                try {
                    const format = ctx.session.export.format as 'csv' | 'html';

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    const periodText = '–º–µ—Å—è—Ü';
                    const formatText = format === 'csv' ? 'CSV' : 'HTML';

                    await ctx.reply(`‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ ${formatText} —Ñ–æ—Ä–º–∞—Ç –∑–∞ ${periodText}...`);

                    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
                    const ExportServiceMock = jest.requireMock('../../src/services/export').ExportService;
                    const exportService = new ExportServiceMock(ctx.database);

                    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                    const result = await exportService.exportFeedings({
                        format,
                        period: 'month',
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await ctx.replyWithDocument({
                        source: result.filePath,
                        filename: result.fileName,
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
                    const fileSizeKB = Math.round(result.fileSize / 1024);
                    await ctx.reply(
                        '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n' +
                        `üìÑ –§–∞–π–ª: ${result.fileName}\n` +
                        `üìä –ó–∞–ø–∏—Å–µ–π: ${result.recordCount}\n` +
                        `üìÅ –†–∞–∑–º–µ—Ä: ${fileSizeKB} –ö–ë\n\n` +
                        `–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.`,
                        expect.any(Object)
                    );
                } catch (error) {
                    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    
                    if (error instanceof Error) {
                        if (error.message === '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞') {
                            errorMessage = 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.';
                        } else {
                            errorMessage += `\n\n–û—à–∏–±–∫–∞: ${error.message}`;
                        }
                    }
                    
                    await ctx.reply(errorMessage, expect.any(Object));
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç –∑–∞ –º–µ—Å—è—Ü...'
            );
        });
    });

    describe('hears "üìä –í—Å–µ –≤—Ä–µ–º—è"', () => {
        it('should show error when format is not selected', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'üìä –í—Å–µ –≤—Ä–µ–º—è' },
                session: { export: { format: null } },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–í—Å–µ –≤—Ä–µ–º—è" –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω
            const text = ctx.message.text;

            if (text.includes('üìä –í—Å–µ –≤—Ä–µ–º—è')) {
                if (!ctx.session.export.format) {
                    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.', expect.any(Object));
                    return;
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
                expect.any(Object)
            );
        });

        it('should process export for all period', async () => {
            const mockReply = jest.fn();
            const mockReplyWithDocument = jest.fn();
            const ctx = {
                message: { text: 'üìä –í—Å–µ –≤—Ä–µ–º—è' },
                session: { export: { format: 'csv' } },
                reply: mockReply,
                replyWithDocument: mockReplyWithDocument,
                database: mockDatabase,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–í—Å–µ –≤—Ä–µ–º—è"
            const text = ctx.message.text;

            if (text.includes('üìä –í—Å–µ –≤—Ä–µ–º—è')) {
                if (!ctx.session.export.format) {
                    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.', expect.any(Object));
                    return;
                }

                try {
                    const format = ctx.session.export.format as 'csv' | 'html';

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    const periodText = '–≤—Å–µ –≤—Ä–µ–º—è';
                    const formatText = format === 'csv' ? 'CSV' : 'HTML';

                    await ctx.reply(`‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ ${formatText} —Ñ–æ—Ä–º–∞—Ç –∑–∞ ${periodText}...`);

                    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
                    const ExportServiceMock = jest.requireMock('../../src/services/export').ExportService;
                    const exportService = new ExportServiceMock(ctx.database);

                    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                    const result = await exportService.exportFeedings({
                        format,
                        period: 'all',
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await ctx.replyWithDocument({
                        source: result.filePath,
                        filename: result.fileName,
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
                    const fileSizeKB = Math.round(result.fileSize / 1024);
                    await ctx.reply(
                        '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n' +
                        `üìÑ –§–∞–π–ª: ${result.fileName}\n` +
                        `üìä –ó–∞–ø–∏—Å–µ–π: ${result.recordCount}\n` +
                        `üìÅ –†–∞–∑–º–µ—Ä: ${fileSizeKB} –ö–ë\n\n` +
                        `–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.`,
                        expect.any(Object)
                    );
                } catch (error) {
                    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    
                    if (error instanceof Error) {
                        if (error.message === '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞') {
                            errorMessage = 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.';
                        } else {
                            errorMessage += `\n\n–û—à–∏–±–∫–∞: ${error.message}`;
                        }
                    }
                    
                    await ctx.reply(errorMessage, expect.any(Object));
                }
            }

            expect(mockReply).toHaveBeenCalledWith(
                '‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è...'
            );
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter('MAIN');
                return;
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('command "home"', () => {
        it('should enter main scene', async () => {
            const mockSceneEnter = jest.fn();
            const ctx = {
                message: { text: '/home' },
                scene: { enter: mockSceneEnter },
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "home"
            const text = ctx.message.text;

            if (text.startsWith('/home')) {
                await ctx.scene.enter('MAIN');
            }

            expect(mockSceneEnter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('on text (unknown command)', () => {
        it('should show menu and prompt to select format when format is not selected', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Unknown command' },
                session: { export: { format: null } },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω
            const text = ctx.message.text;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.';

                if (!ctx.session.export.format) {
                    message = 'üìã –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (CSV –∏–ª–∏ HTML).';
                } else {
                    message =
                        `üìã –§–æ—Ä–º–∞—Ç ${ctx.session.export.format.toUpperCase()} –≤—ã–±—Ä–∞–Ω.\n\n` +
                        'üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.';
                }

                await ctx.reply(message, expect.any(Object));
            }

            expect(mockReply).toHaveBeenCalledWith(
                'üìã –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (CSV –∏–ª–∏ HTML).',
                expect.any(Object)
            );
        });

        it('should show menu and prompt to select period when format is selected', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: 'Unknown command' },
                session: { export: { format: 'csv' } },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω
            const text = ctx.message.text;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.';

                if (!ctx.session.export.format) {
                    message = 'üìã –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (CSV –∏–ª–∏ HTML).';
                } else {
                    message =
                        `üìã –§–æ—Ä–º–∞—Ç ${ctx.session.export.format.toUpperCase()} –≤—ã–±—Ä–∞–Ω.\n\n` +
                        'üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.';
                }

                await ctx.reply(message, expect.any(Object));
            }

            expect(mockReply).toHaveBeenCalledWith(
                'üìã –§–æ—Ä–º–∞—Ç CSV –≤—ã–±—Ä–∞–Ω.\n\nüìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.',
                expect.any(Object)
            );
        });

        it('should ignore commands starting with /', async () => {
            const mockReply = jest.fn();
            const ctx = {
                message: { text: '/unknown' },
                reply: mockReply,
            } as any;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
            const text = ctx.message.text;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞ reply
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(mockReply).not.toHaveBeenCalled();
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(exportScene.id).toBe('export');
            expect(typeof (exportScene as any).enterHandler).toBe('function');
            expect(typeof (exportScene as any).handler).toBe('function');
        });
    });
});

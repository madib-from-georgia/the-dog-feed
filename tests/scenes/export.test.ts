import { Scenes } from 'telegraf';
import { exportScene } from '../../src/scenes/export';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getTotalFeedingsCount: jest.fn(),
    getFeedingsWithPagination: jest.fn(),
    getUserById: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

describe('exportScene', () => {
    let ctx: any;

    beforeEach(() => {
        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {
                export: {
                    format: null,
                    period: null,
                    step: 'format',
                },
            },
            reply: jest.fn(),
            replyWithDocument: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
            database: mockDatabase,
        };
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('enter', () => {
        it('should initialize session data and show export menu', async () => {
            await (exportScene as any).enterMiddleware()[0](ctx);

            expect(ctx.session.export).toEqual({
                format: null,
                period: null,
                step: 'format',
            });

            expect(ctx.reply).toHaveBeenCalledWith(
                'üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üìã CSV —Ñ–æ—Ä–º–∞—Ç"', () => {
        it('should set format to csv and show period selection', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üìã CSV —Ñ–æ—Ä–º–∞—Ç')
            );
            await handler.handler(ctx);

            expect(ctx.session.export.format).toBe('csv');
            expect(ctx.reply).toHaveBeenCalledWith(
                'üìã –í—ã–±—Ä–∞–Ω CSV —Ñ–æ—Ä–º–∞—Ç\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üåê HTML —Ñ–æ—Ä–º–∞—Ç"', () => {
        it('should set format to html and show period selection', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üåê HTML —Ñ–æ—Ä–º–∞—Ç')
            );
            await handler.handler(ctx);

            expect(ctx.session.export.format).toBe('html');
            expect(ctx.reply).toHaveBeenCalledWith(
                'üåê –í—ã–±—Ä–∞–Ω HTML —Ñ–æ—Ä–º–∞—Ç\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
                expect.any(Object)
            );
        });
    });

    describe('hears "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é"', () => {
        it('should show error when format is not selected', async () => {
            ctx.session.export.format = null;

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
                expect.any(Object)
            );
        });

        it('should process export for week period', async () => {
            ctx.session.export.format = 'csv';

            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é processExport
            jest.mock('../../src/scenes/export', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/export'
                );
                return {
                    ...originalModule,
                    processExport: jest.fn(),
                };
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é')
            );
            await handler.handler(ctx);

            // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –º–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
            expect(ctx.session.export.format).toBe('csv');
        });
    });

    describe('hears "üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü"', () => {
        it('should show error when format is not selected', async () => {
            ctx.session.export.format = null;

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
                expect.any(Object)
            );
        });

        it('should process export for month period', async () => {
            ctx.session.export.format = 'csv';

            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é processExport
            jest.mock('../../src/scenes/export', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/export'
                );
                return {
                    ...originalModule,
                    processExport: jest.fn(),
                };
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü')
            );
            await handler.handler(ctx);

            // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –º–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
            expect(ctx.session.export.format).toBe('csv');
        });
    });

    describe('hears "üìä –í—Å–µ –≤—Ä–µ–º—è"', () => {
        it('should show error when format is not selected', async () => {
            ctx.session.export.format = null;

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üìä –í—Å–µ –≤—Ä–µ–º—è')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
                expect.any(Object)
            );
        });

        it('should process export for all period', async () => {
            ctx.session.export.format = 'csv';

            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é processExport
            jest.mock('../../src/scenes/export', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/export'
                );
                return {
                    ...originalModule,
                    processExport: jest.fn(),
                };
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üìä –í—Å–µ –≤—Ä–µ–º—è')
            );
            await handler.handler(ctx);

            // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –º–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
            expect(ctx.session.export.format).toBe('csv');
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (exportScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            );
            await handler.handler(ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('command "home"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: '/home' };

            await (exportScene as any).commandMiddleware('home')[0](ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('on text (unknown command)', () => {
        it('should show menu and prompt to select format when format is not selected', async () => {
            ctx.message = { text: 'Unknown command' };
            ctx.session.export.format = null;

            await (exportScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                'üìã –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (CSV –∏–ª–∏ HTML).',
                expect.any(Object)
            );
        });

        it('should show menu and prompt to select period when format is selected', async () => {
            ctx.message = { text: 'Unknown command' };
            ctx.session.export.format = 'csv';

            await (exportScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                'üìã –§–æ—Ä–º–∞—Ç CSV –≤—ã–±—Ä–∞–Ω.\n\nüìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.',
                expect.any(Object)
            );
        });

        it('should ignore commands starting with /', async () => {
            ctx.message = { text: '/unknown' };

            await (exportScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).not.toHaveBeenCalled();
        });
    });
});

import { Scenes } from 'telegraf';
import {
    fullHistoryScene,
    setGlobalSchedulerForFullHistory,
    setGlobalTimerForFullHistory,
} from '../../src/scenes/full-history';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';
import { SCENES } from '../../src/utils/constants';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getTotalFeedingsCount: jest.fn(),
    getFeedingsWithPagination: jest.fn(),
    getUserById: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è SchedulerService
const mockSchedulerService = {
    getActiveScheduledFeedings: jest.fn(),
};

// Mock –¥–ª—è TimerService
const mockTimerService = {};

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

// Mock –¥–ª—è showHistoryPage
jest.mock('../../src/scenes/full-history', () => {
    const originalModule = jest.requireActual('../../src/scenes/full-history');
    return {
        ...originalModule,
        showHistoryPage: jest.fn(),
    };
});

// –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–æ–∫–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é showHistoryPage
const { showHistoryPage } = jest.requireMock('../../src/scenes/full-history');

describe('fullHistoryScene', () => {
    let ctx: any;

    beforeEach(() => {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è fullHistoryScene
        setGlobalSchedulerForFullHistory(mockSchedulerService);
        setGlobalTimerForFullHistory(mockTimerService as any);

        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {
                fullHistory: {
                    currentPage: 1,
                    totalPages: 1,
                    totalRecords: 0,
                    period: 'all',
                },
            },
            reply: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
            database: mockDatabase,
        };

        jest.clearAllMocks();
    });

    describe('enter scene logic', () => {
        it('should initialize session data and show first page', async () => {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            ctx.session.fullHistory = {
                currentPage: 1,
                totalPages: 1,
                totalRecords: 0,
                period: 'all',
            };

            // –í—ã–∑—ã–≤–∞–µ–º showHistoryPage –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await showHistoryPage(ctx, 1);

            expect(ctx.session.fullHistory).toEqual({
                currentPage: 1,
                totalPages: 1,
                totalRecords: 0,
                period: 'all',
            });
        });
    });

    describe('hears "‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"', () => {
        it('should show previous page when current page is greater than 1', async () => {
            ctx.session.fullHistory.currentPage = 2;
            ctx.message = { text: '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
            const text = ctx.message.text;

            if (text.includes('‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è')) {
                if (ctx.session.fullHistory.currentPage > 1) {
                    ctx.session.fullHistory.currentPage--;
                    await showHistoryPage(ctx, ctx.session.fullHistory.currentPage);
                }
            }

            expect(ctx.session.fullHistory.currentPage).toBe(1);
            expect(showHistoryPage).toHaveBeenCalledWith(ctx, 1);
        });

        it('should not show previous page when current page is 1', async () => {
            ctx.session.fullHistory.currentPage = 1;
            ctx.message = { text: '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
            const text = ctx.message.text;

            if (text.includes('‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è')) {
                if (ctx.session.fullHistory.currentPage > 1) {
                    ctx.session.fullHistory.currentPage--;
                    await showHistoryPage(ctx, ctx.session.fullHistory.currentPage);
                }
            }

            expect(ctx.session.fullHistory.currentPage).toBe(1);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ showHistoryPage –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
            expect(showHistoryPage).not.toHaveBeenCalled();
        });
    });

    describe('hears "‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è"', () => {
        it('should show next page when current page is less than total pages', async () => {
            ctx.session.fullHistory.currentPage = 1;
            ctx.session.fullHistory.totalPages = 2;
            ctx.message = { text: '‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è"
            const text = ctx.message.text;

            if (text.includes('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è')) {
                if (ctx.session.fullHistory.currentPage < ctx.session.fullHistory.totalPages) {
                    ctx.session.fullHistory.currentPage++;
                    await showHistoryPage(ctx, ctx.session.fullHistory.currentPage);
                }
            }

            expect(ctx.session.fullHistory.currentPage).toBe(2);
            expect(showHistoryPage).toHaveBeenCalledWith(ctx, 2);
        });

        it('should not show next page when current page equals total pages', async () => {
            ctx.session.fullHistory.currentPage = 2;
            ctx.session.fullHistory.totalPages = 2;
            ctx.message = { text: '‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è"
            const text = ctx.message.text;

            if (text.includes('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è')) {
                if (ctx.session.fullHistory.currentPage < ctx.session.fullHistory.totalPages) {
                    ctx.session.fullHistory.currentPage++;
                    await showHistoryPage(ctx, ctx.session.fullHistory.currentPage);
                }
            }

            expect(ctx.session.fullHistory.currentPage).toBe(2);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ showHistoryPage –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
            expect(showHistoryPage).not.toHaveBeenCalled();
        });
    });

    describe('hears "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"', () => {
        it('should enter export scene', async () => {
            ctx.message = { text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"
            const text = ctx.message.text;

            if (text.includes('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏')) {
                await ctx.scene.enter(SCENES.EXPORT);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.EXPORT);
        });
    });

    describe('hears "üîç –§–∏–ª—å—Ç—Ä—ã"', () => {
        it('should show filters message', async () => {
            ctx.message = { text: 'üîç –§–∏–ª—å—Ç—Ä—ã' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–§–∏–ª—å—Ç—Ä—ã"
            const text = ctx.message.text;

            if (text.includes('üîç –§–∏–ª—å—Ç—Ä—ã')) {
                await ctx.reply(
                    'üîç –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏:\n\n' +
                    '‚Ä¢ –ü–æ –¥–∞—Ç–µ\n' +
                    '‚Ä¢ –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n' +
                    '‚Ä¢ –ü–æ —Ç–∏–ø—É –∫–æ—Ä–º–∞\n' +
                    '‚Ä¢ –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É\n\n' +
                    '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
                    expect.any(Object)
                );
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('üîç –§–∏–ª—å—Ç—Ä—ã'),
                expect.any(Object)
            );
        });
    });

    describe('hears "üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \d+ –∏–∑ \d+"', () => {
        it('should do nothing', async () => {
            ctx.message = { text: 'üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 5' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const text = ctx.message.text;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageButtonRegex = /^üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \d+ –∏–∑ \d+$/;
            if (pageButtonRegex.test(text)) {
                // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            expect(ctx.reply).not.toHaveBeenCalled();
            expect(ctx.scene.enter).not.toHaveBeenCalled();
        });
    });

    describe('hears "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"', () => {
        it('should enter history scene', async () => {
            ctx.message = { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            const text = ctx.message.text;

            if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
                await ctx.scene.enter(SCENES.HISTORY);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.HISTORY);
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            const text = ctx.message.text;

            if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
                await ctx.scene.enter(SCENES.MAIN);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.MAIN);
        });
    });

    describe('command "/home"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: '/home' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/home"
            const text = ctx.message.text;

            if (text.startsWith('/home')) {
                await ctx.scene.enter(SCENES.MAIN);
            }

            expect(ctx.scene.enter).toHaveBeenCalledWith(SCENES.MAIN);
        });
    });

    describe('on text (unknown command)', () => {
        it('should show menu and prompt to use buttons', async () => {
            ctx.message = { text: 'Unknown command' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            const text = ctx.message.text;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', expect.any(Object));
            }

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });

        it('should ignore commands starting with /', async () => {
            ctx.message = { text: '/unknown' };

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /
            const text = ctx.message.text;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if (!text.startsWith('/')) {
                // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞ reply
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(ctx.reply).not.toHaveBeenCalled();
        });
    });

    describe('scene properties', () => {
        it('should have correct scene id and structure', () => {
            expect(fullHistoryScene.id).toBe(SCENES.FULL_HISTORY);
            expect(typeof (fullHistoryScene as any).enterHandler).toBe('function');
            expect(typeof (fullHistoryScene as any).handler).toBe('function');
        });
    });
});

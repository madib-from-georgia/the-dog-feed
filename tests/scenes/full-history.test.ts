import { Scenes } from 'telegraf';
import {
    fullHistoryScene,
    setGlobalSchedulerForFullHistory,
    setGlobalTimerForFullHistory,
} from '../../src/scenes/full-history';
import { DatabaseService } from '../../src/services/database';
import { Telegraf } from 'telegraf';
import { BotContext } from '../../src/types';

// Mock –¥–ª—è DatabaseService
const mockDatabase = {
    getTotalFeedingsCount: jest.fn(),
    getFeedingsWithPagination: jest.fn(),
    getUserById: jest.fn(),
} as unknown as DatabaseService;

// Mock –¥–ª—è SchedulerService
const mockSchedulerService = {
    getActiveScheduledFeedings: jest.fn(),
};

// Mock –¥–ª—è TimerService
const mockTimerService = {};

// Mock –¥–ª—è Telegraf
const mockBot = {
    telegram: {
        sendMessage: jest.fn(),
    },
} as unknown as Telegraf<BotContext>;

describe('fullHistoryScene', () => {
    let ctx: any;

    beforeEach(() => {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è fullHistoryScene
        setGlobalSchedulerForFullHistory(mockSchedulerService);
        setGlobalTimerForFullHistory(mockTimerService as any);

        ctx = {
            from: {
                id: 123456789,
                username: 'testuser',
                first_name: 'Test',
            },
            session: {
                fullHistory: {
                    currentPage: 1,
                    totalPages: 1,
                    totalRecords: 0,
                    period: 'all',
                },
            },
            reply: jest.fn(),
            scene: {
                enter: jest.fn(),
                reenter: jest.fn(),
            },
            telegram: mockBot.telegram,
            database: mockDatabase,
        };
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('enter', () => {
        it('should initialize session data and show first page', async () => {
            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é showHistoryPage
            jest.mock('../../src/scenes/full-history', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/full-history'
                );
                return {
                    ...originalModule,
                    showHistoryPage: jest.fn(),
                };
            });

            await (fullHistoryScene as any).enterMiddleware()[0](ctx);

            expect(ctx.session.fullHistory).toEqual({
                currentPage: 1,
                totalPages: 1,
                totalRecords: 0,
                period: 'all',
            });
        });
    });

    describe('hears "‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"', () => {
        it('should show previous page when current page is greater than 1', async () => {
            ctx.session.fullHistory.currentPage = 2;

            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é showHistoryPage
            jest.mock('../../src/scenes/full-history', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/full-history'
                );
                return {
                    ...originalModule,
                    showHistoryPage: jest.fn(),
                };
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è')
            );
            await handler.handler(ctx);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ showHistoryPage –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –º–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            expect(ctx.session.fullHistory.currentPage).toBe(2);
        });

        it('should not show previous page when current page is 1', async () => {
            ctx.session.fullHistory.currentPage = 1;

            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é showHistoryPage
            jest.mock('../../src/scenes/full-history', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/full-history'
                );
                return {
                    ...originalModule,
                    showHistoryPage: jest.fn(),
                };
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è')
            );
            await handler.handler(ctx);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ showHistoryPage –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
            // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –º–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            expect(ctx.session.fullHistory.currentPage).toBe(1);
        });
    });

    describe('hears "‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è"', () => {
        it('should show next page when current page is less than total pages', async () => {
            ctx.session.fullHistory.currentPage = 1;
            ctx.session.fullHistory.totalPages = 2;

            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é showHistoryPage
            jest.mock('../../src/scenes/full-history', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/full-history'
                );
                return {
                    ...originalModule,
                    showHistoryPage: jest.fn(),
                };
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è')
            );
            await handler.handler(ctx);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ showHistoryPage –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –º–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            expect(ctx.session.fullHistory.currentPage).toBe(1);
        });

        it('should not show next page when current page equals total pages', async () => {
            ctx.session.fullHistory.currentPage = 2;
            ctx.session.fullHistory.totalPages = 2;

            // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é showHistoryPage
            jest.mock('../../src/scenes/full-history', () => {
                const originalModule = jest.requireActual(
                    '../../src/scenes/full-history'
                );
                return {
                    ...originalModule,
                    showHistoryPage: jest.fn(),
                };
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è')
            );
            await handler.handler(ctx);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ showHistoryPage –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
            // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –º–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
            expect(ctx.session.fullHistory.currentPage).toBe(2);
        });
    });

    describe('hears "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"', () => {
        it('should enter export scene', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏')
            );
            await handler.handler(ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('EXPORT');
        });
    });

    describe('hears "üîç –§–∏–ª—å—Ç—Ä—ã"', () => {
        it('should show filters message', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üîç –§–∏–ª—å—Ç—Ä—ã')
            );
            await handler.handler(ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                expect.stringContaining('üîç –§–∏–ª—å—Ç—Ä—ã'),
                expect.any(Object)
            );
        });
    });

    describe('hears "üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \d+ –∏–∑ \d+"', () => {
        it('should do nothing', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \d+ –∏–∑ \d+')
            );
            await handler.handler(ctx);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            expect(ctx.reply).not.toHaveBeenCalled();
            expect(ctx.scene.enter).not.toHaveBeenCalled();
        });
    });

    describe('hears "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"', () => {
        it('should enter history scene', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            );
            await handler.handler(ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('HISTORY');
        });
    });

    describe('hears "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"', () => {
        it('should enter main scene', async () => {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hears
            const hearsHandlers = (fullHistoryScene as any).hearsHandlers;
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            const handler = hearsHandlers.find((h: any) =>
                h.triggers.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
            );
            await handler.handler(ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('command "home"', () => {
        it('should enter main scene', async () => {
            ctx.message = { text: '/home' };

            await (fullHistoryScene as any).commandMiddleware('home')[0](ctx);

            expect(ctx.scene.enter).toHaveBeenCalledWith('MAIN');
        });
    });

    describe('on text (unknown command)', () => {
        it('should show menu and prompt to use buttons', async () => {
            ctx.message = { text: 'Unknown command' };

            await (fullHistoryScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).toHaveBeenCalledWith(
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                expect.any(Object)
            );
        });

        it('should ignore commands starting with /', async () => {
            ctx.message = { text: '/unknown' };

            await (fullHistoryScene as any).onMiddleware('text')[0](ctx);

            expect(ctx.reply).not.toHaveBeenCalled();
        });
    });
});

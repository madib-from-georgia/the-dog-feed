import * as keyboards from '../../src/utils/keyboards';
import { EMOJIS } from '../../src/utils/constants';

describe('keyboards', () => {
    describe('getMainKeyboard', () => {
        it('should return keyboard with feeding details button when showFeedingDetailsButton is true', () => {
            const keyboard = keyboards.getMainKeyboard(true);
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(2);
            expect(buttons[0]).toEqual(['üìù –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è']);
            expect(buttons[1]).toEqual([
                '–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?',
                '–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è',
            ]);
        });

        it('should return keyboard without feeding details button when showFeedingDetailsButton is false', () => {
            const keyboard = keyboards.getMainKeyboard(false);
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(2);
            expect(buttons[0]).toEqual([`${EMOJIS.FEED} –°–æ–±–∞—á–∫–∞ –ø–æ–µ–ª`]);
            expect(buttons[1]).toEqual([
                '–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?',
                '–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è',
            ]);
        });
    });

    describe('getSettingsKeyboard', () => {
        it('should return settings keyboard with correct buttons', () => {
            const keyboard = keyboards.getSettingsKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(2);
            expect(buttons[0]).toEqual([
                'üçΩÔ∏è –∫–æ—Ä–º',
                '‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª',
                'üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            ]);
            expect(buttons[1]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getHistoryKeyboard', () => {
        it('should return history keyboard with correct buttons', () => {
            const keyboard = keyboards.getHistoryKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(2);
            expect(buttons[0]).toEqual(['üìÖ —Å–µ–≥–æ–¥–Ω—è', 'üìã –≤—Å—ë –≤—Ä–µ–º—è']);
            expect(buttons[1]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getBackKeyboard', () => {
        it('should return back keyboard with correct buttons', () => {
            const keyboard = keyboards.getBackKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(1);
            expect(buttons[0]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getScheduleManagementKeyboard', () => {
        it('should return schedule management keyboard with correct buttons', () => {
            const keyboard = keyboards.getScheduleManagementKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(3);
            expect(buttons[0]).toEqual(['üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ']);
            expect(buttons[1]).toEqual([
                'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
                '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
            ]);
            expect(buttons[2]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getScheduleFeedingKeyboard', () => {
        it('should return schedule feeding keyboard with correct buttons', () => {
            const keyboard = keyboards.getScheduleFeedingKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(2);
            expect(buttons[0]).toEqual(['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥']);
            expect(buttons[1]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getScheduledListKeyboard', () => {
        it('should return scheduled list keyboard with correct buttons', () => {
            const keyboard = keyboards.getScheduledListKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(3);
            expect(buttons[0]).toEqual(['üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ']);
            expect(buttons[1]).toEqual(['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ']);
            expect(buttons[2]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getScheduledItemKeyboard', () => {
        it('should return scheduled item keyboard with correct buttons', () => {
            const scheduleId = 123;
            const keyboard = keyboards.getScheduledItemKeyboard(scheduleId);
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(3);
            expect(buttons[0]).toEqual([`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ ${scheduleId}`]);
            expect(buttons[1]).toEqual(['üìã –ù–∞ –≥–ª–∞–≤–Ω—É—é –∫ —Å–ø–∏—Å–∫—É']);
            expect(buttons[2]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getFullHistoryKeyboard', () => {
        it('should return full history keyboard with correct buttons', () => {
            const keyboard = keyboards.getFullHistoryKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(3);
            expect(buttons[0]).toEqual(['üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏', 'üîç –§–∏–ª—å—Ç—Ä—ã']);
            expect(buttons[1]).toEqual(['‚ñ∂Ô∏è –î–∞–ª–µ–µ']);
            expect(buttons[2]).toEqual(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getExportKeyboard', () => {
        it('should return export keyboard with correct buttons', () => {
            const keyboard = keyboards.getExportKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(3);
            expect(buttons[0]).toEqual(['üìã CSV —Ñ–æ—Ä–º–∞—Ç', 'üåê HTML —Ñ–æ—Ä–º–∞—Ç']);
            expect(buttons[1]).toEqual([
                'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é',
                'üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü',
                'üìä –í—Å–µ –≤—Ä–µ–º—è',
            ]);
            expect(buttons[2]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getPaginationKeyboard', () => {
        it('should return pagination keyboard with both navigation buttons when hasPrev and hasNext are true', () => {
            const keyboard = keyboards.getPaginationKeyboard(2, 5, true, true);
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(4);
            expect(buttons[0]).toEqual(['‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', '‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è']);
            expect(buttons[1]).toEqual(['üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 –∏–∑ 5']);
            expect(buttons[2]).toEqual(['üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏']);
            expect(buttons[3]).toEqual(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });

        it('should return pagination keyboard with only previous button when hasPrev is true and hasNext is false', () => {
            const keyboard = keyboards.getPaginationKeyboard(5, 5, false, true);
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(4);
            expect(buttons[0]).toEqual(['‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è']);
            expect(buttons[1]).toEqual(['üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 –∏–∑ 5']);
            expect(buttons[2]).toEqual(['üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏']);
            expect(buttons[3]).toEqual(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });

        it('should return pagination keyboard with only next button when hasPrev is false and hasNext is true', () => {
            const keyboard = keyboards.getPaginationKeyboard(1, 5, true, false);
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(4);
            expect(buttons[0]).toEqual(['‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è']);
            expect(buttons[1]).toEqual(['üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 5']);
            expect(buttons[2]).toEqual(['üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏']);
            expect(buttons[3]).toEqual(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });

        it('should return pagination keyboard without page info when totalPages is 1', () => {
            const keyboard = keyboards.getPaginationKeyboard(
                1,
                1,
                false,
                false
            );
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(2);
            expect(buttons[0]).toEqual(['üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏']);
            expect(buttons[1]).toEqual(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });

    describe('getOtherActionsKeyboard', () => {
        it('should return other actions keyboard with correct buttons', () => {
            const keyboard = keyboards.getOtherActionsKeyboard();
            const buttons = keyboard.reply_markup.keyboard;

            expect(buttons).toHaveLength(3);
            expect(buttons[0]).toEqual(['‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è']);
            expect(buttons[1]).toEqual([
                'üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π',
                '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            ]);
            expect(buttons[2]).toEqual(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
        });
    });
});

import { Context } from 'telegraf';
import { BotContext } from '../types';
import { DatabaseUser, DatabaseFeeding } from '../services/database';
import { TimerService } from '../services/timer';
import { DatabaseService } from '../services/database';
import { MESSAGES, SCENES } from '../utils/constants';

export class MainHandler {
  private timerService: TimerService;
  private database: DatabaseService;

  constructor(timerService: TimerService, database: DatabaseService) {
    this.timerService = timerService;
    this.database = database;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–∫–æ—Ä–º–∏–ª"
  async handleFeeding(ctx: BotContext): Promise<void> {
    try {
      const user = await this.getOrCreateUser(
        ctx.from!.id,
        ctx.from!.username || ctx.from!.first_name
      );

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –∏–∑ –ë–î
      const foodType = await this.database.getSetting('default_food_type') || 'dry';
      const foodAmount = parseInt(await this.database.getSetting('default_food_amount') || '12');

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –≤ –ë–î —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const feeding = await this.database.createFeeding(user.id, foodType, foodAmount);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
      if (!ctx.session) {
        ctx.session = {};
      }
      ctx.session.lastFeedingId = feeding.id;

      // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ
      this.timerService.startFeedingTimer();

      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–º–µ
      const foodInfo = `${foodAmount}–≥ ${foodType === 'dry' ? '—Å—É—Ö–æ–≥–æ' : '–≤–ª–∞–∂–Ω–æ–≥–æ'} –∫–æ—Ä–º–∞`;

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ NotificationService
      const message = `${MESSAGES.FEEDING_COMPLETED}\n` +
        `–í—Ä–µ–º—è: ${feeding.timestamp.toLocaleString('ru-RU')}\n` +
        `–ö—Ç–æ: ${user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
        `–ö–æ—Ä–º: ${foodInfo}\n\n` +
        `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${Math.round(this.timerService.getCurrentInterval() / 60)} —á–∞—Å–æ–≤`;

      const notificationService = this.timerService.getNotificationService();
      await notificationService.sendToAll(message);

      console.log(`–ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: ${user.username} –≤ ${feeding.timestamp}, ${foodInfo}`);

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
      await ctx.scene.enter(SCENES.FEEDING_SUCCESS);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
  async handleStopFeedings(ctx: BotContext): Promise<void> {
    try {
      const user = await this.getOrCreateUser(
        ctx.from!.id,
        ctx.from!.username || ctx.from!.first_name
      );

      this.timerService.stopAllTimers();

      const message = `${MESSAGES.FEEDINGS_STOPPED}\n` +
        `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n` +
        `–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –Ø –ø–æ–∫–æ—Ä–º–∏–ª"`;

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ NotificationService
      const notificationService = this.timerService.getNotificationService();
      await notificationService.sendToAll(message);

      console.log(`–ö–æ—Ä–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${user.username}`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async getOrCreateUser(telegramId: number, username?: string): Promise<DatabaseUser> {
    let user = await this.database.getUserByTelegramId(telegramId);

    if (!user) {
      user = await this.database.createUser(telegramId, username);
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${username || telegramId}`);
    }

    return user;
  }
}

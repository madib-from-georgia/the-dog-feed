import { DatabaseService, DatabaseScheduledFeeding } from './database';
import { TimerService } from './timer';
import { SCHEDULER_SETTINGS } from '../utils/constants';
import { createUserText } from '../utils/user-utils';

export interface ScheduledFeeding {
    id: number;
    scheduledTime: Date;
    isActive: boolean;
    createdBy: number;
    createdAt: Date;
}

export class SchedulerService {
    private database: DatabaseService;
    private timerService: TimerService;
    private scheduledTimers: Map<number, NodeJS.Timeout> = new Map();

    constructor(database: DatabaseService, timerService: TimerService) {
        this.database = database;
        this.timerService = timerService;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    async initialize(): Promise<void> {
        try {
            const activeSchedules =
                await this.database.getActiveScheduledFeedings();

            for (const schedule of activeSchedules) {
                await this.restoreTimer(schedule);
            }

            console.log(
                `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${activeSchedules.length} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π`
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    async scheduleFeeding(
        scheduledTime: Date,
        createdBy: number
    ): Promise<ScheduledFeeding> {
        const now = new Date();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if (scheduledTime <= now) {
            throw new Error('–í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (5 –º–∏–Ω—É—Ç)
        const minTime = new Date(
            now.getTime() + SCHEDULER_SETTINGS.MIN_SCHEDULE_MINUTES * 60 * 1000
        );
        if (scheduledTime < minTime) {
            throw new Error(
                `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${SCHEDULER_SETTINGS.MIN_SCHEDULE_MINUTES} –º–∏–Ω—É—Ç`
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
        const maxTime = new Date();
        maxTime.setDate(
            maxTime.getDate() + SCHEDULER_SETTINGS.MAX_SCHEDULE_DAYS
        );
        if (scheduledTime > maxTime) {
            throw new Error(
                `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${SCHEDULER_SETTINGS.MAX_SCHEDULE_DAYS} –¥–Ω–µ–π`
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π
        const activeSchedules =
            await this.database.getActiveScheduledFeedings();
        if (
            activeSchedules.length >= SCHEDULER_SETTINGS.MAX_SCHEDULED_FEEDINGS
        ) {
            throw new Error(
                `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${SCHEDULER_SETTINGS.MAX_SCHEDULED_FEEDINGS}`
            );
        }

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            const schedule = await this.database.createScheduledFeeding(
                scheduledTime,
                createdBy
            );

            // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
            await this.createTimer(schedule);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            const user = await this.database.getUserById(createdBy);
            console.log(
                `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞ ${scheduledTime.toLocaleString('ru-RU')} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${createUserText(user)}`
            );

            return {
                id: schedule.id,
                scheduledTime: schedule.scheduledTime,
                isActive: schedule.isActive,
                createdBy: schedule.createdBy,
                createdAt: schedule.createdAt,
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    async cancelScheduledFeeding(scheduleId: number): Promise<void> {
        try {
            // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            const timer = this.scheduledTimers.get(scheduleId);
            if (timer) {
                clearTimeout(timer);
                this.scheduledTimers.delete(scheduleId);
            }

            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î
            await this.database.deactivateScheduledFeeding(scheduleId);

            console.log(`–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ ID: ${scheduleId}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π
    async cancelAllScheduledFeedings(): Promise<number> {
        try {
            const activeSchedules =
                await this.database.getActiveScheduledFeedings();

            for (const schedule of activeSchedules) {
                await this.cancelScheduledFeeding(schedule.id);
            }

            console.log(
                `–û—Ç–º–µ–Ω–µ–Ω–æ ${activeSchedules.length} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π`
            );
            return activeSchedules.length;
        } catch (error) {
            console.error(
                '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π:',
                error
            );
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π
    async getActiveScheduledFeedings(): Promise<ScheduledFeeding[]> {
        const dbSchedules = await this.database.getActiveScheduledFeedings();
        return dbSchedules.map(schedule => ({
            id: schedule.id,
            scheduledTime: schedule.scheduledTime,
            isActive: schedule.isActive,
            createdBy: schedule.createdBy,
            createdAt: schedule.createdAt,
        }));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π
    async getAllScheduledFeedings(): Promise<ScheduledFeeding[]> {
        const dbSchedules = await this.database.getAllScheduledFeedings();
        return dbSchedules.map(schedule => ({
            id: schedule.id,
            scheduledTime: schedule.scheduledTime,
            isActive: schedule.isActive,
            createdBy: schedule.createdBy,
            createdAt: schedule.createdAt,
        }));
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    private async createTimer(
        schedule: DatabaseScheduledFeeding
    ): Promise<void> {
        const now = new Date();
        const delay = schedule.scheduledTime.getTime() - now.getTime();

        if (delay <= 0) {
            // –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            await this.database.deactivateScheduledFeeding(schedule.id);
            return;
        }

        const timer = setTimeout(async () => {
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
                const notificationService =
                    this.timerService.getNotificationService();
                const message = `üîî –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!\n\n–í—Ä–µ–º—è: ${schedule.scheduledTime.toLocaleString('ru-RU')}\n\n–ü–æ—Ä–∞ –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å–æ–±–∞–∫—É!`;

                await notificationService.sendToAll(message);

                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ
                await this.database.deactivateScheduledFeeding(schedule.id);
                this.scheduledTimers.delete(schedule.id);

                console.log(
                    `–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ ID: ${schedule.id}`
                );
            } catch (error) {
                console.error(
                    '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è:',
                    error
                );
            }
        }, delay);

        this.scheduledTimers.set(schedule.id, timer);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    private async restoreTimer(
        schedule: DatabaseScheduledFeeding
    ): Promise<void> {
        const now = new Date();

        if (schedule.scheduledTime <= now) {
            // –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            await this.database.deactivateScheduledFeeding(schedule.id);
            console.log(
                `–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ ID: ${schedule.id}`
            );
            return;
        }

        await this.createTimer(schedule);
        console.log(
            `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è ID: ${schedule.id} –Ω–∞ ${schedule.scheduledTime.toLocaleString('ru-RU')}`
        );
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ (–ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞)
    cleanup(): void {
        for (const timer of this.scheduledTimers.values()) {
            clearTimeout(timer);
        }
        this.scheduledTimers.clear();
        console.log('–û—á–∏—â–µ–Ω—ã –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    async getNextScheduledFeeding(): Promise<ScheduledFeeding | null> {
        const activeSchedules =
            await this.database.getActiveScheduledFeedings();

        if (activeSchedules.length === 0) {
            return null;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ
        activeSchedules.sort(
            (a, b) => a.scheduledTime.getTime() - b.scheduledTime.getTime()
        );
        const next = activeSchedules[0];

        return {
            id: next.id,
            scheduledTime: next.scheduledTime,
            isActive: next.isActive,
            createdBy: next.createdBy,
            createdAt: next.createdAt,
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    async getSchedulerStats(): Promise<{
        activeSchedules: number;
        totalSchedules: number;
        nextSchedule: ScheduledFeeding | null;
        runningTimers: number;
    }> {
        const activeSchedules =
            await this.database.getActiveScheduledFeedings();
        const allSchedules = await this.database.getAllScheduledFeedings();
        const nextSchedule = await this.getNextScheduledFeeding();

        return {
            activeSchedules: activeSchedules.length,
            totalSchedules: allSchedules.length,
            nextSchedule,
            runningTimers: this.scheduledTimers.size,
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    async cleanupOldSchedules(): Promise<number> {
        return await this.database.cleanupOldScheduledFeedings();
    }
}

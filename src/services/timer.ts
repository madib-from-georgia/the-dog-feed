import { Telegraf } from 'telegraf';
import { BotContext } from '../types';
import { DEFAULT_FEEDING_INTERVAL_MINUTES } from '../utils/constants';
import { NotificationService } from './notifications';
import { DatabaseService } from './database';

export interface TimerState {
    nextFeedingTime: Date | null;
    isActive: boolean;
    reminderInterval: NodeJS.Timeout | null;
    feedingTimeout: NodeJS.Timeout | null;
    currentIntervalMinutes: number;
}

export class TimerService {
    private bot: Telegraf<BotContext>;
    private database: DatabaseService;
    private notificationService: NotificationService;
    private timerState: TimerState;

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    private readonly REMINDER_INTERVAL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

    constructor(bot: Telegraf<BotContext>, database: DatabaseService) {
        this.bot = bot;
        this.database = database;
        this.notificationService = new NotificationService(bot, database);
        this.timerState = {
            nextFeedingTime: null,
            isActive: false,
            reminderInterval: null,
            feedingTimeout: null,
            currentIntervalMinutes: DEFAULT_FEEDING_INTERVAL_MINUTES,
        };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    updateInterval(minutes: number): void {
        this.timerState.currentIntervalMinutes = minutes;
        console.log(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: ${minutes} –º–∏–Ω—É—Ç`);

        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if (this.timerState.isActive) {
            console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º');
            this.restartWithNewInterval();
        }
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    private restartWithNewInterval(): void {
        this.clearAllTimers();

        const intervalMs = this.timerState.currentIntervalMinutes * 60 * 1000;
        const nextTime = new Date(Date.now() + intervalMs);
        this.timerState.nextFeedingTime = nextTime;
        this.timerState.isActive = true;

        console.log(
            `–¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: ${nextTime.toLocaleString('ru-RU')}`
        );

        this.timerState.feedingTimeout = setTimeout(() => {
            this.sendFeedingReminder();
        }, intervalMs);
    }

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    startFeedingTimer(customIntervalMinutes?: number): void {
        this.clearAllTimers();

        const intervalMinutes =
            customIntervalMinutes || this.timerState.currentIntervalMinutes;
        const intervalMs = intervalMinutes * 60 * 1000;
        const nextTime = new Date(Date.now() + intervalMs);

        this.timerState.nextFeedingTime = nextTime;
        this.timerState.isActive = true;

        console.log(
            `–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: ${nextTime.toLocaleString('ru-RU')} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMinutes} –º–∏–Ω)`
        );

        this.timerState.feedingTimeout = setTimeout(() => {
            this.sendFeedingReminder();
        }, intervalMs);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
    private async sendFeedingReminder(): Promise<void> {
        if (!this.timerState.isActive) return;

        const message = 'üîî –ü–æ—Ä–∞ –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å–æ–±–∞–∫—É!';
        await this.notificationService.sendToAll(message);

        console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏');

        // –ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        this.startReminderInterval();
    }

    // –ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    private startReminderInterval(): void {
        this.timerState.reminderInterval = setInterval(async () => {
            if (!this.timerState.isActive) {
                this.clearReminderInterval();
                return;
            }

            const message = 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ–±–∞–∫—É –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å!';
            await this.notificationService.sendToAll(message);

            console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
        }, this.REMINDER_INTERVAL);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
    stopAllTimers(): void {
        this.clearAllTimers();
        this.timerState.isActive = false;
        this.timerState.nextFeedingTime = null;
        console.log('–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    private clearAllTimers(): void {
        this.clearFeedingTimeout();
        this.clearReminderInterval();
    }

    private clearFeedingTimeout(): void {
        if (this.timerState.feedingTimeout) {
            clearTimeout(this.timerState.feedingTimeout);
            this.timerState.feedingTimeout = null;
        }
    }

    private clearReminderInterval(): void {
        if (this.timerState.reminderInterval) {
            clearInterval(this.timerState.reminderInterval);
            this.timerState.reminderInterval = null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–∏
    getNextFeedingInfo(): {
        time: Date | null;
        isActive: boolean;
        intervalMinutes: number;
    } {
        return {
            time: this.timerState.nextFeedingTime,
            isActive: this.timerState.isActive,
            intervalMinutes: this.timerState.currentIntervalMinutes,
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–æ–≤
    isTimerActive(): boolean {
        return this.timerState.isActive;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    getCurrentInterval(): number {
        return this.timerState.currentIntervalMinutes;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö)
    getNotificationService(): NotificationService {
        return this.notificationService;
    }
}

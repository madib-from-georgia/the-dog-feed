import { Telegraf, Scenes, session } from 'telegraf';
import * as dotenv from 'dotenv';
import { BotContext, BotState, DatabaseBotState } from './types';
import { TimerService } from './services/timer';
import { DatabaseService } from './services/database';
import {
    mainScene,
    setGlobalServices,
    setGlobalDatabaseForMain,
    getOrCreateUser,
} from './scenes/main';
import { setGlobalServicesForInterval } from './scenes/interval-settings';
import {
    otherActionsScene,
    setGlobalServicesForOtherActions,
} from './scenes/other-actions';
import {
    todayHistoryScene,
    setGlobalDatabaseForTodayHistory,
    setGlobalSchedulerForTodayHistory,
    setGlobalTimerForTodayHistory,
} from './scenes/today-history';
import { settingsScene } from './scenes/settings';
import { historyScene } from './scenes/history';
import { intervalSettingsScene } from './scenes/interval-settings';
import {
    foodSettingsScene,
    setGlobalDatabaseForFoodSettings,
} from './scenes/food-settings';
import {
    feedingDetailsScene,
    setGlobalDatabaseForFeedingDetails,
} from './scenes/feeding-details';
import {
    notificationSettingsScene,
    setGlobalDatabaseForNotificationSettings,
} from './scenes/notification-settings';
import { exportScene } from './scenes/export';
import {
    scheduleFeedingScene,
    setGlobalSchedulerForScheduleFeeding,
    setGlobalDatabaseForScheduleFeeding,
} from './scenes/schedule-feeding';
import {
    scheduledListScene,
    setGlobalSchedulerForScheduledList,
} from './scenes/scheduled-list';
import {
    fullHistoryScene,
    setGlobalSchedulerForFullHistory,
    setGlobalTimerForFullHistory,
} from './scenes/full-history';
import { SchedulerService } from './services/scheduler';
import { SCENES } from './utils/constants';
import { TimeParser } from './services/time-parser';
import { formatDateTime } from './utils/time-utils';
import { createUserLink } from './utils/user-utils';
import {
    getTimeOffsetInMinutes,
    getTimezoneByOffset,
} from './utils/timezone-utils';
import { AccessControlService } from './services/access-control';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è webhook
const NODE_ENV = process.env.NODE_ENV || 'development';
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = parseInt(process.env.PORT || '3000');
const WEBHOOK_PATH = process.env.WEBHOOK_PATH || '/webhook';

console.log(`–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: ${NODE_ENV}`);

// –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
let BOT_TOKEN: string;
if (NODE_ENV === 'production') {
    BOT_TOKEN = process.env.BOT_TOKEN_PROD || process.env.BOT_TOKEN || '';
    if (!BOT_TOKEN) {
        console.error(
            'BOT_TOKEN_PROD –∏–ª–∏ BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞'
        );
        process.exit(1);
    }
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–≤—ã–π –±–æ—Ç');
} else {
    BOT_TOKEN = process.env.BOT_TOKEN_DEV || process.env.BOT_TOKEN || '';
    if (!BOT_TOKEN) {
        console.error(
            'BOT_TOKEN_DEV –∏–ª–∏ BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
        );
        process.exit(1);
    }
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–≤–µ–ª–æ–ø–µ—Ä—Å–∫–∏–π –±–æ—Ç');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new Telegraf<BotContext>(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const database = new DatabaseService();

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const botState: BotState = {
    users: new Map(),
    feedings: [],
    nextFeedingId: 1,
    nextUserId: 1,
};

// –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const databaseBotState: DatabaseBotState = {
    database,
    defaultFeedingInterval: 210, // 3.5 —á–∞—Å–∞
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const timerService = new TimerService(bot, database);
const schedulerService = new SchedulerService(database, timerService);
const accessControlService = new AccessControlService();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å—Ü–µ–Ω
setGlobalServices(timerService, database);
setGlobalServicesForInterval(timerService, database);
setGlobalDatabaseForMain(database);
setGlobalServicesForOtherActions(timerService, database, getOrCreateUser);
setGlobalDatabaseForTodayHistory(database);
setGlobalDatabaseForFoodSettings(database);
setGlobalDatabaseForFeedingDetails(database);
setGlobalDatabaseForNotificationSettings(database);
setGlobalSchedulerForScheduleFeeding(schedulerService);
setGlobalDatabaseForScheduleFeeding(database);
setGlobalSchedulerForScheduledList(schedulerService);
setGlobalSchedulerForTodayHistory(schedulerService);
setGlobalSchedulerForFullHistory(schedulerService);
setGlobalTimerForTodayHistory(timerService);
setGlobalTimerForFullHistory(timerService);
setGlobalTimerForTodayHistory(timerService);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Scenes.Stage<BotContext>([
    mainScene,
    feedingDetailsScene,
    settingsScene,
    historyScene,
    intervalSettingsScene,
    todayHistoryScene,
    foodSettingsScene,
    notificationSettingsScene,
    fullHistoryScene,
    exportScene,
    scheduleFeedingScene,
    scheduledListScene,
    otherActionsScene,
]);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
bot.command('notifications', async ctx => {
    try {
        const notificationService = timerService.getNotificationService();
        const stats = await notificationService.getNotificationStats();

        let message =
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n\n`;

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        message += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: ${stats.enabledUsers}\n`;
        if (stats.enabledUsersList.length > 0) {
            message +=
                stats.enabledUsersList.map(name => `  ‚Ä¢ ${name}`).join('\n') +
                '\n';
        }
        message += '\n';

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        message += `üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã: ${stats.disabledUsers}\n`;
        if (stats.disabledUsersList.length > 0) {
            message += stats.disabledUsersList
                .map(name => `  ‚Ä¢ ${name}`)
                .join('\n');
        }

        await ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
bot.command('scheduler', async ctx => {
    try {
        const stats = await schedulerService.getSchedulerStats();

        let message =
            `üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:\n\n` +
            `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${stats.activeSchedules}\n` +
            `üìà –í—Å–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${stats.totalSchedules}\n` +
            `‚è±Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: ${stats.runningTimers}\n\n`;

        if (stats.nextSchedule) {
            message += `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
            const user = await database.getUserById(
                stats.nextSchedule.createdBy
            );
            message += `  üìÖ ${formatDateTime(stats.nextSchedule.scheduledTime, user?.timezone)}\n`;
            message += `  üÜî ID: ${stats.nextSchedule.id}\n`;
            message += `  üë§ –°–æ–∑–¥–∞–ª: ${createUserLink(user)}\n`;
        } else {
            message += `‚è∞ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π`;
        }

        await ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
bot.command('access', async ctx => {
    try {
        const userId = ctx.from?.id;
        if (!userId || !accessControlService.isUserAllowed(userId)) {
            await ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
            return;
        }

        const args = ctx.message.text.split(' ').slice(1);
        const command = args[0];
        const targetUserId = parseInt(args[1], 10);

        if (!command) {
            const allowedUsers = accessControlService.getAllowedUsers();
            let message = `üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:\n\n`;
            message += `üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${accessControlService.getAllowedUsersCount()}\n\n`;
            
            if (allowedUsers.length > 0) {
                message += `üìã –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID:\n`;
                message += allowedUsers.map(id => `  ‚Ä¢ ${id}`).join('\n');
            }
            
            message += `\n\nüìñ –ö–æ–º–∞–Ω–¥—ã:\n`;
            message += `‚Ä¢ /access add <user_id> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
            message += `‚Ä¢ /access remove <user_id> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
            message += `‚Ä¢ /access reload - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞`;
            
            await ctx.reply(message);
            return;
        }

        switch (command) {
            case 'add':
                if (isNaN(targetUserId)) {
                    await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    return;
                }
                accessControlService.addUser(targetUserId);
                await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö`);
                break;

            case 'remove':
                if (isNaN(targetUserId)) {
                    await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    return;
                }
                if (targetUserId === userId) {
                    await ctx.reply('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö');
                    return;
                }
                accessControlService.removeUser(targetUserId);
                await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö`);
                break;

            case 'reload':
                accessControlService.reloadAllowedUsers();
                await ctx.reply(`‚úÖ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞`);
                break;

            default:
                await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: add, remove, reload');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /access:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
    }
});

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π –∏ —Å—Ü–µ–Ω
bot.use(session());
bot.use(stage.middleware());

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.use(async (ctx, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø)
    if (ctx.from && ctx.from.id) {
        const userId = ctx.from.id;
        
        if (!accessControlService.isUserAllowed(userId)) {
            console.log(`–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${ctx.from.username || ctx.from.first_name})`);
            
            await ctx.reply(
                'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n' +
                '–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n' +
                '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            );
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º next()
        }
    }
    
    return next();
});

// Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ database –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
bot.use((ctx, next) => {
    ctx.database = database;
    return next();
});

// // Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// bot.use(async (ctx, next) => {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –µ—Å—Ç—å ctx.message.date
//     if (ctx.message && ctx.message.date && ctx.from && ctx.database) {
//         try {
//             // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//             let dbUser = await ctx.database.getUserByTelegramId(ctx.from.id);

//             if (dbUser) {
//                 // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
//                 const serverTime = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (UTC)
//                 const userTime = ctx.message.date; // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

//                 const offsetMinutes = getTimeOffsetInMinutes(
//                     serverTime,
//                     userTime
//                 );
//                 const timezone = getTimezoneByOffset(offsetMinutes);

//                 // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
//                 if (timezone) {
//                     await ctx.database.updateUserTimezone(dbUser.id, timezone);
//                     console.log(
//                         `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dbUser.username || dbUser.telegramId}: ${timezone}`
//                     );
//                 }
//             }
//         } catch (error) {
//             console.error(
//                 '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
//                 error
//             );
//         }
//     }

//     return next();
// });

// –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ü–µ–Ω—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–û–°–õ–ï middleware)
// –ö–æ–º–∞–Ω–¥–∞ /start - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–µ
bot.start(async ctx => {
    try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let dbUser = await database.getUserByTelegramId(ctx.from.id);
        if (!dbUser) {
            dbUser = await database.createUser(
                ctx.from.id,
                ctx.from.username || ctx.from.first_name
            );
            console.log(
                `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î: ${createUserLink(dbUser)}`
            );
        }

        console.log(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dbUser.username || dbUser.telegramId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`
        );
        ctx.scene.enter(SCENES.MAIN);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î)
bot.command('status', async ctx => {
    try {
        const nextFeeding = timerService.getNextFeedingInfo();
        const lastFeeding = await database.getLastFeeding();
        const nextScheduled = await schedulerService.getNextScheduledFeeding();

        let message = 'üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è:\n\n';

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        const dbUser = await database.getUserByTelegramId(ctx.from?.id || 0);

        if (lastFeeding) {
            message += `üçΩÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
            message += `   –í—Ä–µ–º—è: ${formatDateTime(lastFeeding.timestamp, dbUser?.timezone)}\n`;
            message += `   –ö—Ç–æ: ${ctx.from?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
        } else {
            message += `üçΩÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ\n\n`;
        }

        message += `‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: ${TimeParser.formatInterval(nextFeeding.intervalMinutes)}\n\n`;

        if (nextFeeding.isActive && nextFeeding.time) {
            message += `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≤ ${formatDateTime(nextFeeding.time, dbUser?.timezone)}\n`;
        } else {
            message += '‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö
        if (nextScheduled) {
            message += `\nüìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
            const scheduleUser = await database.getUserById(
                nextScheduled.createdBy
            );
            message += `   –í—Ä–µ–º—è: ${formatDateTime(nextScheduled.scheduledTime, scheduleUser?.timezone)}\n`;
            message += `   ID: ${nextScheduled.id}\n`;
            message += `   –°–æ–∑–¥–∞–ª: ${createUserLink(scheduleUser)}\n`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        const stats = await database.getStats();
        message += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
        message += `‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${stats.todayFeedings} –∫–æ—Ä–º–ª–µ–Ω–∏–π\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalFeedings} –∫–æ—Ä–º–ª–µ–Ω–∏–π`;

        ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
bot.command('home', ctx => {
    ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
});

// Graceful shutdown
process.once('SIGINT', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    timerService.stopAllTimers();
    schedulerService.cleanup();
    await database.close();
    bot.stop('SIGINT');
});

process.once('SIGTERM', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    timerService.stopAllTimers();
    schedulerService.cleanup();
    await database.close();
    bot.stop('SIGTERM');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await database.initialize();

        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
        await schedulerService.initialize();

        console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

        // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (NODE_ENV === 'production') {
            // –†–µ–∂–∏–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            if (!WEBHOOK_URL) {
                throw new Error('WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
            }

            console.log(`–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook:`);
            console.log(`  URL: ${WEBHOOK_URL}${WEBHOOK_PATH}`);
            console.log(`  Port: ${PORT}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å webhook
            try {
                const webhookInfo = await bot.telegram.getWebhookInfo();
                const targetUrl = `${WEBHOOK_URL}${WEBHOOK_PATH}`;

                if (webhookInfo.url === targetUrl) {
                    console.log('Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL');
                } else {
                    console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...');
                    await bot.telegram.setWebhook(targetUrl);
                    console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                }
            } catch (webhookError: any) {
                if (webhookError.response?.error_code === 429) {
                    console.log(
                        'Rate limit –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...'
                    );
                    const retryAfter =
                        webhookError.response?.parameters?.retry_after || 10;
                    console.log(
                        `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫—É–Ω–¥...`
                    );

                    // –ñ–¥–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                    await new Promise(resolve =>
                        setTimeout(resolve, retryAfter * 1000)
                    );
                    try {
                        await bot.telegram.setWebhook(
                            `${WEBHOOK_URL}${WEBHOOK_PATH}`
                        );
                        console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è');
                    } catch (retryError) {
                        console.log(
                            '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫...'
                        );
                    }
                } else {
                    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', webhookError);
                    throw webhookError;
                }
            }

            // –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook
            await bot.launch({
                webhook: {
                    domain: WEBHOOK_URL,
                    path: WEBHOOK_PATH,
                    port: PORT,
                },
            });

            console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook!');
        } else {
            // –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            console.log('–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...');

            // –í–ê–ñ–ù–û: –ù–ï —É–¥–∞–ª—è–µ–º webhook –≤ development, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–≤—ã–π –±–æ—Ç
            // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π dev –±–æ—Ç, —Ç–æ webhook —É –Ω–µ–≥–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            // –ï—Å–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –±–æ—Ç, —Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ webhook —Å–ª–æ–º–∞–µ—Ç –ø—Ä–æ–¥–∞–∫—à–µ–Ω
            console.log(
                'Webhook –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞'
            );

            // –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling
            await bot.launch();

            console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

startBot();

import { Scenes } from 'telegraf';
import { BotContext } from '../types';
import { getScheduleFeedingKeyboard } from '../utils/keyboards';
import { MESSAGES, SCENES } from '../utils/constants';
import { SchedulerService } from '../services/scheduler';
import { DatabaseService } from '../services/database';
import { User } from '../types';
import { formatDateTime } from '../utils/time-utils';
import { createUserLink } from '../utils/user-utils';
import { getOrCreateUser } from './main';

let globalSchedulerService: SchedulerService | null = null;
let globalDatabase: DatabaseService | null = null;

export function setGlobalSchedulerForScheduleFeeding(schedulerService: SchedulerService) {
  globalSchedulerService = schedulerService;
}

export function setGlobalDatabaseForScheduleFeeding(database: DatabaseService) {
  globalDatabase = database;
}

export const scheduleFeedingScene = new Scenes.BaseScene<BotContext>(SCENES.SCHEDULE_FEEDING);

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
scheduleFeedingScene.enter((ctx) => {
  ctx.reply(
    `${MESSAGES.SCHEDULE_FEEDING_HEADER}\n\n${MESSAGES.SCHEDULE_FEEDING_PROMPT}`,
    getScheduleFeedingKeyboard()
  );
});

// –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
function parseScheduleTime(timeString: string): Date {
  const now = new Date();
  const currentYear = now.getFullYear();
  const currentMonth = now.getMonth();
  const currentDate = now.getDate();
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const cleanTime = timeString.trim().toLowerCase();
  
  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  const patterns = {
    // HH:MM (—Å–µ–≥–æ–¥–Ω—è)
    timeOnly: /^(\d{1,2}):(\d{2})$/,
    // DD.MM HH:MM
    dateTimeShort: /^(\d{1,2})\.(\d{1,2})\s+(\d{1,2}):(\d{2})$/,
    // DD.MM.YYYY HH:MM
    dateTimeFull: /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/
  };
  
  let parsedDate: Date;
  
  if (patterns.timeOnly.test(cleanTime)) {
    // –§–æ—Ä–º–∞—Ç: HH:MM (—Å–µ–≥–æ–¥–Ω—è)
    const match = cleanTime.match(patterns.timeOnly)!;
    const hours = parseInt(match[1], 10);
    const minutes = parseInt(match[2], 10);
    
    parsedDate = new Date(currentYear, currentMonth, currentDate, hours, minutes, 0, 0);
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (parsedDate <= now) {
      parsedDate.setDate(parsedDate.getDate() + 1);
    }
    
  } else if (patterns.dateTimeShort.test(cleanTime)) {
    // –§–æ—Ä–º–∞—Ç: DD.MM HH:MM
    const match = cleanTime.match(patterns.dateTimeShort)!;
    const day = parseInt(match[1], 10);
    const month = parseInt(match[2], 10) - 1; // –ú–µ—Å—è—Ü—ã —Å 0
    const hours = parseInt(match[3], 10);
    const minutes = parseInt(match[4], 10);
    
    parsedDate = new Date(currentYear, month, day, hours, minutes, 0, 0);
    
    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
    if (parsedDate <= now) {
      parsedDate.setFullYear(currentYear + 1);
    }
    
  } else if (patterns.dateTimeFull.test(cleanTime)) {
    // –§–æ—Ä–º–∞—Ç: DD.MM.YYYY HH:MM
    const match = cleanTime.match(patterns.dateTimeFull)!;
    const day = parseInt(match[1], 10);
    const month = parseInt(match[2], 10) - 1; // –ú–µ—Å—è—Ü—ã —Å 0
    const year = parseInt(match[3], 10);
    const hours = parseInt(match[4], 10);
    const minutes = parseInt(match[5], 10);
    
    parsedDate = new Date(year, month, day, hours, minutes, 0, 0);
    
  } else {
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
  if (parsedDate.getHours() < 0 || parsedDate.getHours() > 23) {
    throw new Error('–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23');
  }
  
  if (parsedDate.getMinutes() < 0 || parsedDate.getMinutes() > 59) {
    throw new Error('–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 59');
  }
  
  if (parsedDate.getDate() !== parsedDate.getDate()) {
    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞');
  }
  
  return parsedDate;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Ä–µ–º—è)
scheduleFeedingScene.on('text', async (ctx) => {
  const timeString = ctx.message.text.trim();
  
  // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (timeString.includes('‚ùå') || timeString.includes('üè†')) {
    return;
  }
  
  if (!globalSchedulerService) {
    ctx.reply(
      '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
      getScheduleFeedingKeyboard()
    );
    return;
  }
  
  try {
    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    const scheduledTime = parseScheduleTime(timeString);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getOrCreateUser(
      ctx.from!.id,
      ctx.from!.username || ctx.from!.first_name
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    let dbUser = null;
    if (globalDatabase) {
      dbUser = await globalDatabase.getUserByTelegramId(ctx.from!.id);
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const schedule = await globalSchedulerService.scheduleFeeding(
      scheduledTime,
      user.id  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ Telegram ID
    );
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É DatabaseUser
    const dbUserForLink = {
      id: user.id,
      telegramId: user.telegramId,
      username: user.username,
      notificationsEnabled: user.notificationsEnabled,
      feedingInterval: user.feedingInterval || 210, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      createdAt: new Date()
    };
    
    const username = createUserLink(dbUserForLink);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    ctx.reply(
      `${MESSAGES.SCHEDULE_FEEDING_SUCCESS}\n\n` +
      `üìÖ –í—Ä–µ–º—è: ${formatDateTime(scheduledTime, dbUser?.timezone)}\n` +
      `üë§ –°–æ–∑–¥–∞–ª: ${username}\n` +
      `üÜî ID: ${schedule.id}\n\n` +
      `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.`,
      getScheduleFeedingKeyboard()
    );
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–µ
    ctx.scene.enter(SCENES.MAIN);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
    
    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è';
    
    if (error instanceof Error) {
      if (error.message.includes('–±—É–¥—É—â–µ–º')) {
        errorMessage = '‚ùå –í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
      } else if (error.message.includes('–∏–Ω—Ç–µ—Ä–≤–∞–ª')) {
        errorMessage = '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç';
      } else if (error.message.includes('–¥–Ω–µ–π')) {
        errorMessage = '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 7 –¥–Ω–µ–π';
      } else if (error.message.includes('–º–∞–∫—Å–∏–º—É–º')) {
        errorMessage = '‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ';
      } else if (error.message.includes('—Ñ–æ—Ä–º–∞—Ç')) {
        errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏';
      }
    }
    
    ctx.reply(errorMessage, getScheduleFeedingKeyboard());
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"
scheduleFeedingScene.hears(/‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥/, (ctx) => {
  ctx.reply(
    '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
    getScheduleFeedingKeyboard()
  );
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
scheduleFeedingScene.hears(/üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é/, (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /home
scheduleFeedingScene.command('home', (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
}); 

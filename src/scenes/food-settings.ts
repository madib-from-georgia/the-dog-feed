import { Scenes, Markup } from 'telegraf';
import { BotContext } from '../types';
import { DatabaseService } from '../services/database';
import { SCENES } from '../utils/constants';

export const foodSettingsScene = new Scenes.BaseScene<BotContext>(SCENES.FOOD_SETTINGS);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
let globalDatabase: DatabaseService | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export function setGlobalDatabaseForFoodSettings(database: DatabaseService) {
  globalDatabase = database;
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞
foodSettingsScene.enter(async (ctx) => {
  try {
    if (!globalDatabase) {
      ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    const currentType = await globalDatabase.getSetting('default_food_type') || 'dry';
    const currentAmount = await globalDatabase.getSetting('default_food_amount') || '12';
    
    const typeText = currentType === 'dry' ? '–°—É—Ö–æ–π' : '–í–ª–∞–∂–Ω—ã–π';
    
    const message = `üçΩÔ∏è –∫–æ—Ä–º\n\n` +
      `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
      `‚Ä¢ –¢–∏–ø –∫–æ—Ä–º–∞: ${typeText}\n` +
      `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${currentAmount} –≥—Ä–∞–º–º–æ–≤\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:`;

    ctx.reply(message, Markup.keyboard([
      ['ü•ò –¢–∏–ø –∫–æ—Ä–º–∞', '‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞'],
      ['üè† –í—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
    ]).resize());

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞:', error);
    ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      Markup.keyboard([['üè† –í—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']]).resize()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–∏–ø –∫–æ—Ä–º–∞"
foodSettingsScene.hears(/ü•ò –¢–∏–ø –∫–æ—Ä–º–∞/, (ctx) => {
  ctx.scene.enter(SCENES.FOOD_TYPE_SETTINGS);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞"
foodSettingsScene.hears(/‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞/, (ctx) => {
  ctx.scene.enter(SCENES.FOOD_AMOUNT_SETTINGS);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"
foodSettingsScene.hears(/üè† –í—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω/, (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
foodSettingsScene.on('text', (ctx) => {
  ctx.reply(
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
    Markup.keyboard([
      ['ü•ò –¢–∏–ø –∫–æ—Ä–º–∞', '‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞'],
      ['üè† –í—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
    ]).resize()
  );
}); 

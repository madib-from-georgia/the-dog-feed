import { Scenes, Markup } from 'telegraf';
import { BotContext } from '../types';
import { DatabaseService } from '../services/database';
import { FeedingParser } from '../services/feeding-parser';
import { SCENES } from '../utils/constants';

export const foodSettingsScene = new Scenes.BaseScene<BotContext>(SCENES.FOOD_SETTINGS);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
let globalDatabase: DatabaseService | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export function setGlobalDatabaseForFoodSettings(database: DatabaseService) {
  globalDatabase = database;
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞
foodSettingsScene.enter(async (ctx) => {
  try {
    if (!globalDatabase) {
      ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    const currentType = await globalDatabase.getSetting('default_food_type') || 'dry';
    const currentAmount = await globalDatabase.getSetting('default_food_amount') || '12';
    
    const typeText = currentType === 'dry' ? '–°—É—Ö–æ–π' : '–í–ª–∞–∂–Ω—ã–π';
    
    const message = `üçΩÔ∏è –∫–æ—Ä–º\n\n` +
      `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
      `‚Ä¢ –¢–∏–ø –∫–æ—Ä–º–∞: ${typeText}\n` +
      `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${currentAmount} –≥—Ä–∞–º–º–æ–≤\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞:\n\n` +
      `–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n` +
      FeedingParser.getExamples().map(example => `‚Ä¢ ${example}`).join('\n');

    ctx.reply(message, Markup.keyboard([
      ['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
    ]).resize());

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞:', error);
    ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞
foodSettingsScene.on('text', async (ctx) => {
  const text = ctx.message.text;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
  if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
    ctx.scene.enter(SCENES.MAIN);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
  if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
    ctx.scene.enter(SCENES.SETTINGS);
    return;
  }

  try {
    if (!globalDatabase) {
      ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const parsed = FeedingParser.parseDetails(text);

    if (!parsed.isValid) {
      ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
        Markup.keyboard([
          ['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ]).resize()
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let updatedSettings = [];
    
    if (parsed.amount !== undefined) {
      await globalDatabase.setSetting('default_food_amount', parsed.amount.toString());
      updatedSettings.push(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${parsed.amount} –≥—Ä–∞–º–º–æ–≤`);
    }
    
    if (parsed.foodType !== undefined) {
      await globalDatabase.setSetting('default_food_type', parsed.foodType);
      const typeText = parsed.foodType === 'dry' ? '—Å—É—Ö–æ–π' : '–≤–ª–∞–∂–Ω—ã–π';
      updatedSettings.push(`—Ç–∏–ø: ${typeText}`);
    }

    const user = await globalDatabase.getUserByTelegramId(ctx.from!.id);
    
    const message = `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
      `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${updatedSettings.join(', ')}\n\n` +
      `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.\n` +
      `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    const allUsers = await globalDatabase.getAllUsers();
    for (const u of allUsers) {
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (u.telegramId !== ctx.from!.id && u.notificationsEnabled) {
        try {
          await ctx.telegram.sendMessage(u.telegramId, `üçΩÔ∏è ${message}`);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`, error);
        }
      }
    }

    console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω—ã: ${updatedSettings.join(', ')} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user?.username}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.reply(
      `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
      `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${updatedSettings.join(', ')}\n\n` +
      `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.`,
      Markup.keyboard([
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
      ]).resize()
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä–º–∞:', error);
    ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      Markup.keyboard([
        ['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
      ]).resize()
    );
  }
});

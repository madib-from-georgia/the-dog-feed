import { Scenes } from 'telegraf';
import { BotContext } from '../types';
import { getScheduledListKeyboard } from '../utils/keyboards';
import { MESSAGES, SCENES } from '../utils/constants';
import { SchedulerService } from '../services/scheduler';
import { toMoscowTime, formatDateTime } from '../utils/time-utils';
import { createUserLink } from '../utils/user-utils';

let globalSchedulerService: SchedulerService | null = null;

export function setGlobalSchedulerForScheduledList(schedulerService: SchedulerService) {
  globalSchedulerService = schedulerService;
}

export const scheduledListScene = new Scenes.BaseScene<BotContext>(SCENES.SCHEDULED_LIST);

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π
scheduledListScene.enter(async (ctx) => {
  await showScheduledList(ctx);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π
async function showScheduledList(ctx: BotContext) {
  if (!globalSchedulerService) {
    ctx.reply(
      '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      getScheduledListKeyboard()
    );
    return;
  }

  try {
    const scheduledFeedings = await globalSchedulerService.getActiveScheduledFeedings();
    
    if (scheduledFeedings.length === 0) {
      ctx.reply(
        `${MESSAGES.SCHEDULED_LIST_EMPTY}\n\n` +
        '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ.',
        getScheduledListKeyboard()
      );
      return;
    }

    let message = `${MESSAGES.SCHEDULED_LIST_HEADER}\n\n`;
    message += `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${scheduledFeedings.length}\n\n`;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    scheduledFeedings.sort((a, b) => a.scheduledTime.getTime() - b.scheduledTime.getTime());

    for (const schedule of scheduledFeedings) {
      const user = await ctx.database.getUserById(schedule.createdBy);
      const username = createUserLink(user);
      
      const scheduledTime = formatDateTime(toMoscowTime(schedule.scheduledTime));
      const createdTime = formatDateTime(toMoscowTime(schedule.createdAt));
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
      const now = new Date();
      const timeUntil = schedule.scheduledTime.getTime() - now.getTime();
      
      let timeUntilText = '';
      if (timeUntil > 0) {
        const hours = Math.floor(timeUntil / (1000 * 60 * 60));
        const minutes = Math.floor((timeUntil % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours > 0) {
          timeUntilText = `—á–µ—Ä–µ–∑ ${hours} —á ${minutes} –º–∏–Ω`;
        } else {
          timeUntilText = `—á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω`;
        }
      } else {
        timeUntilText = '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ';
      }
      
      message += `üÜî ${schedule.id}\n`;
      message += `üìÖ ${scheduledTime}\n`;
      message += `‚è∞ ${timeUntilText}\n`;
      message += `üë§ ${username}\n`;
      message += `üìù –°–æ–∑–¥–∞–Ω–æ: ${createdTime}\n\n`;
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ—Ä–º–ª–µ–Ω–∏–π
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 3)
    const visibleSchedules = scheduledFeedings.slice(0, 3);
    for (const schedule of visibleSchedules) {
      buttons.push([`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ ${schedule.id}`]);
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons.push(['üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ']);
    buttons.push(['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ']);
    buttons.push(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']);
    
    const keyboard = {
      keyboard: buttons,
      resize_keyboard: true
    };

    ctx.reply(message, keyboard);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏–π:', error);
    ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      getScheduledListKeyboard()
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
scheduledListScene.hears(/‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ (\d+)/, async (ctx) => {
  const match = ctx.message.text.match(/‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ (\d+)/);
  if (!match) return;
  
  const scheduleId = parseInt(match[1], 10);
  
  if (!globalSchedulerService) {
    ctx.reply(
      '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      getScheduledListKeyboard()
    );
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
    const schedule = await ctx.database.getScheduledFeedingById(scheduleId);
    
    if (!schedule) {
      ctx.reply(
        `‚ùå –ö–æ—Ä–º–ª–µ–Ω–∏–µ —Å ID ${scheduleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
        getScheduledListKeyboard()
      );
      return;
    }

    if (!schedule.isActive) {
      ctx.reply(
        `‚ùå –ö–æ—Ä–º–ª–µ–Ω–∏–µ —Å ID ${scheduleId} —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.`,
        getScheduledListKeyboard()
      );
      return;
    }

    // –û—Ç–º–µ–Ω—è–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ
    await globalSchedulerService.cancelScheduledFeeding(scheduleId);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É DatabaseUser
    const dbUser = {
      id: ctx.from?.id || 0,
      telegramId: ctx.from?.id || 0,
      username: ctx.from?.username || ctx.from?.first_name,
      notificationsEnabled: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      feedingInterval: 210, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      createdAt: new Date()
    };
    
    const username = createUserLink(dbUser);
    
    ctx.reply(
      `‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n\n` +
      `üÜî ID: ${scheduleId}\n` +
      `üìÖ –ë—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: ${formatDateTime(toMoscowTime(schedule.scheduledTime))}\n` +
      `üë§ –û—Ç–º–µ–Ω–∏–ª: ${username}`
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ—Ç–º–µ–Ω–µ
    const notificationService = globalSchedulerService['timerService'].getNotificationService();
    const notificationMessage =
      `‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ\n\n` +
      `‚è∞ –í—Ä–µ–º—è: ${formatDateTime(toMoscowTime(schedule.scheduledTime))}\n` +
      `üë§ –û—Ç–º–µ–Ω–∏–ª: ${username}`;
    
    await notificationService.sendToAll(notificationMessage, { excludeUser: ctx.from?.id || 0 });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await showScheduledList(ctx);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
    ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è ${scheduleId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      getScheduledListKeyboard()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ"
scheduledListScene.hears(/üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ/, (ctx) => {
  ctx.scene.enter(SCENES.SCHEDULE_FEEDING);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ"
scheduledListScene.hears(/‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ/, async (ctx) => {
  if (!globalSchedulerService) {
    ctx.reply(
      '‚ùå –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      getScheduledListKeyboard()
    );
    return;
  }

  try {
    const cancelledCount = await globalSchedulerService.cancelAllScheduledFeedings();
    
    if (cancelledCount === 0) {
      ctx.reply(
        'üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
        getScheduledListKeyboard()
      );
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É DatabaseUser
    const dbUser = {
      id: ctx.from?.id || 0,
      telegramId: ctx.from?.id || 0,
      username: ctx.from?.username || ctx.from?.first_name,
      notificationsEnabled: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      feedingInterval: 210, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      createdAt: new Date()
    };
    
    const username = createUserLink(dbUser);
    
    ctx.reply(
      `‚úÖ –í—Å–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n` +
      `üìä –û—Ç–º–µ–Ω–µ–Ω–æ: ${cancelledCount} –∫–æ—Ä–º–ª–µ–Ω–∏–π\n` +
      `üë§ –û—Ç–º–µ–Ω–∏–ª: ${username}`
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π
    const notificationService = globalSchedulerService['timerService'].getNotificationService();
    const notificationMessage = 
      `‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n\n` +
      `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${cancelledCount}\n` +
      `üë§ –û—Ç–º–µ–Ω–∏–ª: ${username}`;
    
    await notificationService.sendToAll(notificationMessage, { excludeUser: ctx.from?.id || 0 });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await showScheduledList(ctx);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π:', error);
    ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      getScheduledListKeyboard()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
scheduledListScene.hears(/üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é/, (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /home
scheduledListScene.command('home', (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
scheduledListScene.on('text', (ctx) => {
  const text = ctx.message.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
  if (text.startsWith('/')) {
    return;
  }
  
  ctx.reply(
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏.',
    getScheduledListKeyboard()
  );
}); 

import { Scenes, Markup } from 'telegraf';
import { BotContext } from '../types';
import { DatabaseService } from '../services/database';
import { SCENES } from '../utils/constants';

export const foodAmountSettingsScene = new Scenes.BaseScene<BotContext>(SCENES.FOOD_AMOUNT_SETTINGS);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
let globalDatabase: DatabaseService | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export function setGlobalDatabaseForFoodAmountSettings(database: DatabaseService) {
  globalDatabase = database;
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–∞
foodAmountSettingsScene.enter(async (ctx) => {
  try {
    if (!globalDatabase) {
      ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    const currentAmount = await globalDatabase.getSetting('default_food_amount') || '12';
    
    const message = `‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–∞\n\n` +
      `–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${currentAmount} –≥—Ä–∞–º–º–æ–≤\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞ (–æ—Ç 1 –¥–æ 200 –≥—Ä–∞–º–º–æ–≤):\n\n` +
      `–ü—Ä–∏–º–µ—Ä—ã:\n` +
      `‚Ä¢ 12\n` +
      `‚Ä¢ 25\n` +
      `‚Ä¢ 50\n` +
      `‚Ä¢ 100`;

    ctx.reply(message, Markup.keyboard([
      ['üçΩÔ∏è –∫–æ—Ä–º', 'üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
    ]).resize());

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–∞:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
foodAmountSettingsScene.on('text', async (ctx) => {
  const text = ctx.message.text;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  if (text.includes('üçΩÔ∏è –∫–æ—Ä–º')) {
    ctx.scene.enter(SCENES.FOOD_SETTINGS);
    return;
  }

  if (text.includes('üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω')) {
    ctx.scene.enter(SCENES.MAIN);
    return;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  const amount = parseInt(text.trim());

  if (isNaN(amount)) {
    ctx.reply(
      '‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 200',
      Markup.keyboard([
        ['üçΩÔ∏è –∫–æ—Ä–º', 'üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
      ]).resize()
    );
    return;
  }

  if (amount < 1 || amount > 200) {
    ctx.reply(
      '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 200 –≥—Ä–∞–º–º–æ–≤',
      Markup.keyboard([
        ['üçΩÔ∏è –∫–æ—Ä–º', 'üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
      ]).resize()
    );
    return;
  }

  try {
    if (!globalDatabase) {
      ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }

    await globalDatabase.setSetting('default_food_amount', amount.toString());
    
    const user = await globalDatabase.getUserByTelegramId(ctx.from!.id);
    
    const message = `‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${amount} –≥—Ä–∞–º–º–æ–≤\n\n` +
      `–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ—Ä–º–ª–µ–Ω–∏—è–º.\n` +
      `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    const allUsers = await globalDatabase.getAllUsers();
    for (const u of allUsers) {
      if (u.notificationsEnabled) {
        try {
          await ctx.telegram.sendMessage(u.telegramId, `‚öñÔ∏è ${message}`);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`, error);
        }
      }
    }

    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${amount}–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user?.username}`);
    
    // –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–æ—Ä–º–∞
    setTimeout(() => {
      ctx.scene.enter(SCENES.FOOD_SETTINGS);
    }, 1500);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–∞:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}); 

import { Scenes } from 'telegraf';
import { BotContext } from '../types';
import { getExportKeyboard } from '../utils/keyboards';
import { MESSAGES, SCENES, EXPORT_SETTINGS } from '../utils/constants';
import { ExportService } from '../services/export';

export const exportScene = new Scenes.BaseScene<BotContext>(SCENES.EXPORT);

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —ç–∫—Å–ø–æ—Ä—Ç–∞
exportScene.enter((ctx) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  ctx.session.export = {
    format: null,
    period: null,
    step: 'format' // format -> period -> process
  };
  
  ctx.reply(MESSAGES.EXPORT_MENU, getExportKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ CSV
exportScene.hears(/üìã CSV —Ñ–æ—Ä–º–∞—Ç/, (ctx) => {
  ctx.session.export.format = 'csv';
  ctx.reply(
    'üìã –í—ã–±—Ä–∞–Ω CSV —Ñ–æ—Ä–º–∞—Ç\n\n' +
    '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
    getExportKeyboard()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ HTML
exportScene.hears(/üåê HTML —Ñ–æ—Ä–º–∞—Ç/, (ctx) => {
  ctx.session.export.format = 'html';
  ctx.reply(
    'üåê –í—ã–±—Ä–∞–Ω HTML —Ñ–æ—Ä–º–∞—Ç\n\n' +
    '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
    getExportKeyboard()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–ó–∞ –Ω–µ–¥–µ–ª—é"
exportScene.hears(/üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é/, async (ctx) => {
  if (!ctx.session.export.format) {
    ctx.reply(
      '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
      getExportKeyboard()
    );
    return;
  }
  
  await processExport(ctx, 'week');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–ó–∞ –º–µ—Å—è—Ü"
exportScene.hears(/üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü/, async (ctx) => {
  if (!ctx.session.export.format) {
    ctx.reply(
      '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
      getExportKeyboard()
    );
    return;
  }
  
  await processExport(ctx, 'month');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ "–í—Å–µ –≤—Ä–µ–º—è"
exportScene.hears(/üìä –í—Å–µ –≤—Ä–µ–º—è/, async (ctx) => {
  if (!ctx.session.export.format) {
    ctx.reply(
      '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.',
      getExportKeyboard()
    );
    return;
  }
  
  await processExport(ctx, 'all');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
async function processExport(ctx: BotContext, period: 'week' | 'month' | 'all') {
  try {
    const format = ctx.session.export.format as 'csv' | 'html';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const periodText = period === 'week' ? '–Ω–µ–¥–µ–ª—é' : period === 'month' ? '–º–µ—Å—è—Ü' : '–≤—Å–µ –≤—Ä–µ–º—è';
    const formatText = format === 'csv' ? 'CSV' : 'HTML';
    
    ctx.reply(`‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ ${formatText} —Ñ–æ—Ä–º–∞—Ç –∑–∞ ${periodText}...`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportService = new ExportService(ctx.database);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    const result = await exportService.exportFeedings({
      format,
      period
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.replyWithDocument({
      source: result.filePath,
      filename: result.fileName
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
    const fileSizeKB = Math.round(result.fileSize / 1024);
    ctx.reply(
      `${MESSAGES.EXPORT_SUCCESS}\n\n` +
      `üìÑ –§–∞–π–ª: ${result.fileName}\n` +
      `üìä –ó–∞–ø–∏—Å–µ–π: ${result.recordCount}\n` +
      `üìÅ –†–∞–∑–º–µ—Ä: ${fileSizeKB} –ö–ë\n\n` +
      `–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.`,
      getExportKeyboard()
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
    
    let errorMessage = MESSAGES.EXPORT_ERROR;
    
    if (error instanceof Error) {
      if (error.message === '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞') {
        errorMessage = MESSAGES.NO_FEEDINGS_FOUND;
      } else {
        errorMessage += `\n\n–û—à–∏–±–∫–∞: ${error.message}`;
      }
    }
    
    ctx.reply(errorMessage, getExportKeyboard());
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
exportScene.hears(/üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é/, (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /home
exportScene.command('home', (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
exportScene.on('text', (ctx) => {
  const text = ctx.message.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
  if (text.startsWith('/')) {
    return;
  }
  
  let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.';
  
  if (!ctx.session.export.format) {
    message = 'üìã –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (CSV –∏–ª–∏ HTML).';
  } else {
    message = `üìã –§–æ—Ä–º–∞—Ç ${ctx.session.export.format.toUpperCase()} –≤—ã–±—Ä–∞–Ω.\n\n` +
              'üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.';
  }
  
  ctx.reply(message, getExportKeyboard());
}); 

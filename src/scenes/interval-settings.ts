import { Scenes, Markup } from 'telegraf';
import { BotContext } from '../types';
import { TimeParser } from '../services/parser';
import { SCENES } from '../utils/constants';

export const intervalSettingsScene = new Scenes.BaseScene<BotContext>(
    SCENES.INTERVAL_SETTINGS
);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ bot.ts)
let globalTimerService: any = null;
let globalBotState: any = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
export function setGlobalServicesForInterval(timerService: any, botState: any) {
    globalTimerService = timerService;
    globalBotState = botState;
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
intervalSettingsScene.enter(ctx => {
    let currentInterval = 210; // 3.5 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ timerService, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (globalTimerService) {
        currentInterval = globalTimerService.getCurrentInterval();
    }

    const formattedInterval = TimeParser.formatInterval(currentInterval);

    const message =
        `‚è∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª\n\n` +
        `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${formattedInterval}\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤):\n\n` +
        `–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n` +
        TimeParser.getExamples()
            .map(example => `‚Ä¢ ${example}`)
            .join('\n');

    ctx.reply(message, Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
intervalSettingsScene.on('text', ctx => {
    const text = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
        ctx.scene.enter(SCENES.MAIN);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if (text.includes('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')) {
        ctx.scene.enter(SCENES.SETTINGS);
        return;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const parsed = TimeParser.parseInterval(text);

    if (!parsed.isValid) {
        ctx.reply(
            `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
            Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize()
        );
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if (!ctx.session) {
        ctx.session = {};
    }
    ctx.session.feedingInterval = parsed.minutes;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ —Ç–∞–π–º–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
    if (globalTimerService) {
        globalTimerService.updateInterval(parsed.minutes);
        console.log(
            `–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ timerService: ${parsed.minutes} –º–∏–Ω—É—Ç`
        );
    } else {
        console.error(
            'globalTimerService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞'
        );
    }

    const formattedInterval = TimeParser.formatInterval(parsed.minutes);

    ctx.reply(
        `‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n` +
            `–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${formattedInterval}\n\n` +
            `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è.`,
        Markup.keyboard([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize()
    );

    console.log(
        `–ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${parsed.minutes} –º–∏–Ω—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from?.username || ctx.from?.id}`
    );
});

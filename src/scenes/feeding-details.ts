import { Scenes, Markup } from 'telegraf';
import { BotContext } from '../types';
import { DatabaseService } from '../services/database';
import { FeedingParser } from '../services/feeding-parser';
import { SCENES } from '../utils/constants';

export const feedingDetailsScene = new Scenes.BaseScene<BotContext>(
    SCENES.FEEDING_DETAILS
);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
let globalDatabase: DatabaseService | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export function setGlobalDatabaseForFeedingDetails(database: DatabaseService) {
    globalDatabase = database;
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
feedingDetailsScene.enter(async ctx => {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
    const lastFeedingId = ctx.session?.lastFeedingId;

    if (!lastFeedingId) {
        ctx.reply(
            '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.',
            Markup.keyboard([['üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']]).resize()
        );
        return;
    }

    const message =
        `üìù –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–º–ª–µ–Ω–∏—è\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
        `–ü—Ä–∏–º–µ—Ä—ã:\n` +
        FeedingParser.getExamples()
            .map(example => `‚Ä¢ ${example}`)
            .join('\n') +
        '\n\n' +
        `–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –µ—Å–ª–∏ –Ω–µ –∫–æ—Ä–º–∏–ª–∏.`;

    ctx.reply(message, Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π
feedingDetailsScene.on('text', async ctx => {
    const text = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
        ctx.scene.enter(SCENES.MAIN);
        return;
    }

    const lastFeedingId = ctx.session?.lastFeedingId;
    if (!lastFeedingId) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }

    if (!globalDatabase) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }

    try {
        // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        const parsed = FeedingParser.parseDetails(text);

        if (!parsed.isValid && parsed.error) {
            ctx.reply(
                `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
                Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize()
            );
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –≤ –ë–î
        await globalDatabase.updateFeedingDetails(
            lastFeedingId,
            parsed.amount,
            parsed.foodType,
            parsed.details
        );

        const user = await globalDatabase.getUserByTelegramId(ctx.from!.id);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        let updateMessage = `‚úÖ –î–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n`;
        updateMessage += `üìù –î–µ—Ç–∞–ª–∏: ${parsed.details}\n`;
        updateMessage += `üë§ –ö—Ç–æ: ${user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        const allUsers = await globalDatabase.getAllUsers();
        for (const u of allUsers) {
            if (u.notificationsEnabled) {
                try {
                    await ctx.telegram.sendMessage(
                        u.telegramId,
                        `üìù ${updateMessage}`
                    );
                } catch (error) {
                    console.error(
                        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`,
                        error
                    );
                }
            }
        }

        console.log(
            `–î–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${parsed.details} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user?.username}`
        );

        // –û—á–∏—â–∞–µ–º ID –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
        if (ctx.session) {
            delete ctx.session.lastFeedingId;
        }

        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        setTimeout(() => {
            ctx.scene.enter(SCENES.MAIN);
        }, 2000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
        ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize()
        );
    }
});

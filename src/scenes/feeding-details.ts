import { Scenes, Markup } from 'telegraf';
import { BotContext } from '../types';
import { DatabaseService } from '../services/database';
import { FeedingParser } from '../services/feeding-parser';
import { TimeParser } from '../services/time-parser';
import { SCENES } from '../utils/constants';
import { getTimeOffsetInMinutes } from '../utils/timezone-utils';
import { formatDateTime } from '../utils/time-utils';

export const feedingDetailsScene = new Scenes.BaseScene<BotContext>(
    SCENES.FEEDING_DETAILS
);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
let globalDatabase: DatabaseService | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export function setGlobalDatabaseForFeedingDetails(database: DatabaseService) {
    globalDatabase = database;
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
feedingDetailsScene.enter(async ctx => {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
    const lastFeedingId = ctx.session?.lastFeedingId;

    if (!lastFeedingId) {
        ctx.reply(
            '‚ùå –ê –≤—ã –Ω–µ –ø–æ–∫–æ—Ä–º–∏–ª–∏ —Å–æ–±–∞—á–∫—É —Ç–æ–ª—å–∫–æ —á—Ç–æ? –°—Ç—Ä–∞–Ω–Ω–æ. –ê —á—Ç–æ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç–æ–≥–¥–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? :)',
            Markup.keyboard([['üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']]).resize()
        );
        return;
    }

    const message =
        `üìù *–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ*\n\n` +
        `–ï—Å–ª–∏ –Ω–∞–¥–æ, –ø–æ–º–µ–Ω—è–π—Ç–µ —Ç–∏–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞:\n` +
        `‚Ä¢ 50–≥ —Å—É—Ö–æ–≥–æ\n` +
        `‚Ä¢ 60 –≤–ª–∞–∂–Ω–æ–≥–æ\n` +
        `‚Ä¢ —Å—É—Ö–æ–≥–æ 40–≥\n\n` +
        `–ò–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è:\n` +
        `‚Ä¢ 14:30\n` +
        `‚Ä¢ 9:15\n\n` +
        `–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ä–æ—à—É—é –º—ã—Å–ª—å –ø—Ä–æ –Ω–∞—à—É —Å–æ–±–∞—á–∫—É, –∏ –æ–Ω–∞ (–º—ã—Å–ª—å) –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ —ç—Ç–æ–º—É –∫–æ—Ä–º–ª–µ–Ω–∏—é :)`;

    ctx.reply(message, Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π
feedingDetailsScene.on('text', async ctx => {
    const text = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    if (text.includes('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')) {
        ctx.scene.enter(SCENES.MAIN);
        return;
    }

    const lastFeedingId = ctx.session?.lastFeedingId;
    if (!lastFeedingId) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }

    if (!globalDatabase) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }

    try {
        const user = await globalDatabase.getUserByTelegramId(ctx.from!.id);
        
        let feedingTime: Date | undefined = undefined;
        let detailsText = text;
        
        // –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞
        const timeRegex = /(\d{1,2}):(\d{2})/;
        const timeMatch = text.match(timeRegex);
        
        if (timeMatch) {
            const hours = parseInt(timeMatch[1]);
            const minutes = parseInt(timeMatch[2]);
            
            if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
                if (user?.timezone) {
                    try {
                        const now = new Date();
                        const year = now.getFullYear();
                        const month = now.getMonth();
                        const day = now.getDate();
                        
                        const feedingTimeStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}T${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:00`;
                        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ UTC
                        feedingTime = new Date(feedingTimeStr + 'Z');
                        // –î–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                        const offsetMinutes = getTimeOffsetInMinutes(now, now.getTime() / 1000);
                        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ UTC+3, —Ç–æ UTC –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ 3 —á–∞—Å–∞ –º–µ–Ω—å—à–µ
                        feedingTime = new Date(feedingTime.getTime() - offsetMinutes * 60 * 1000);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:', error);
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç—ã
                        const now = new Date();
                        feedingTime = new Date(now);
                        feedingTime.setHours(hours, minutes, 0, 0);
                    }
                } else {
                    // –ï—Å–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç—ã
                    const now = new Date();
                    feedingTime = new Date(now);
                    feedingTime.setHours(hours, minutes, 0, 0);
                    
                    // –í—Ä–µ–º—è —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–æ –±–µ–∑ —É—á–µ—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                }
                
                // –£–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–µ—Ç–∞–ª–µ–π
                detailsText = text.replace(timeRegex, '').trim();
                
                // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                if (detailsText === '') {
                    detailsText = text;
                }
            }
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        const parsed = FeedingParser.parseDetails(detailsText);

        if (!parsed.isValid && parsed.error) {
            ctx.reply(
                `‚ùå –û—à–∏–±–∫–∞: ${parsed.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ.`,
                Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize()
            );
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –≤ –ë–î
        
        await globalDatabase.updateFeedingDetails(
            lastFeedingId,
            parsed.amount,
            parsed.foodType,
            parsed.details,
            feedingTime
        );
        
        // –î–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        let updateMessage = `‚úÖ –î–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n`;
        if (feedingTime) {
            updateMessage += `‚è∞ –í—Ä–µ–º—è: ${formatDateTime(feedingTime, user?.timezone)}\n`;
        }
        updateMessage += `üìù –î–µ—Ç–∞–ª–∏: ${parsed.details}\n`;
        updateMessage += `üë§ –ö—Ç–æ: ${user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        const allUsers = await globalDatabase.getAllUsers();
        for (const u of allUsers) {
            if (u.notificationsEnabled) {
                try {
                    await ctx.telegram.sendMessage(
                        u.telegramId,
                        `üìù ${updateMessage}`
                    );
                } catch (error) {
                    console.error(
                        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.telegramId}:`,
                        error
                    );
                }
            }
        }

        // –î–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ

        // –û—á–∏—â–∞–µ–º ID –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
        if (ctx.session) {
            delete ctx.session.lastFeedingId;
        }

        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        setTimeout(() => {
            ctx.scene.enter(SCENES.MAIN);
        }, 2000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–º–ª–µ–Ω–∏—è:', error);
        ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            Markup.keyboard([['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']]).resize()
        );
    }
});

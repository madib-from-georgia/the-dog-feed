import { Scenes, Markup } from 'telegraf';
import { BotContext } from '../types';
import { SCENES } from '../utils/constants';
import { DatabaseService, DatabaseFeeding, DatabaseUser } from '../services/database';

export const todayHistoryScene = new Scenes.BaseScene<BotContext>(SCENES.TODAY_HISTORY);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º
let globalDatabase: DatabaseService | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export function setGlobalDatabaseForTodayHistory(database: DatabaseService) {
  globalDatabase = database;
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
todayHistoryScene.enter(async (ctx) => {
  try {
    if (!globalDatabase) {
      ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const todayFeedings = await globalDatabase.getTodayFeedings();
    const allUsers = await globalDatabase.getAllUsers();
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const usersMap = new Map<number, DatabaseUser>();
    allUsers.forEach(user => usersMap.set(user.id, user));

    let message = 'üìÖ –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n';

    if (todayFeedings.length === 0) {
      message += 'üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ\n\n';
      message += '–ù–∞–∂–º–∏—Ç–µ "üçΩÔ∏è –Ø –ø–æ–∫–æ—Ä–º–∏–ª" –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ.';
    } else {
      message += `üìä –í—Å–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${todayFeedings.length}\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      todayFeedings.forEach((feeding, index) => {
        const user = usersMap.get(feeding.userId);
        const timeStr = feeding.timestamp.toLocaleString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        });
        
        message += `${index + 1}. üïê ${timeStr}\n`;
        message += `   üë§ ${user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
        message += `   üçΩÔ∏è ${feeding.foodType} –∫–æ—Ä–º, ${feeding.amount}–≥\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (feeding.details) {
          message += `   üìù ${feeding.details}\n`;
        }
        
        if (index < todayFeedings.length - 1) {
          message += '\n';
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const totalAmount = todayFeedings.reduce((sum, feeding) => sum + feeding.amount, 0);
      message += `\nüìà –û–±—â–∏–π –æ–±—ä–µ–º: ${totalAmount}–≥`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏
      if (todayFeedings.length > 1) {
        const intervals: string[] = [];
        for (let i = 1; i < todayFeedings.length; i++) {
          const prevTime = todayFeedings[i].timestamp.getTime();
          const currentTime = todayFeedings[i - 1].timestamp.getTime();
          const diffMinutes = Math.round((currentTime - prevTime) / (1000 * 60));
          
          if (diffMinutes < 60) {
            intervals.push(`${diffMinutes} –º–∏–Ω`);
          } else {
            const hours = Math.floor(diffMinutes / 60);
            const minutes = diffMinutes % 60;
            if (minutes === 0) {
              intervals.push(`${hours} —á`);
            } else {
              intervals.push(`${hours} —á ${minutes} –º–∏–Ω`);
            }
          }
        }
        
        if (intervals.length > 0) {
          message += `\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: ${intervals.join(', ')}`;
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await globalDatabase.getStats();
    message += `\n\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${stats.totalFeedings}\n`;
    message += `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}`;

    ctx.reply(message, Markup.keyboard([
      ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è'],
      ['üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
    ]).resize());

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
    ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      Markup.keyboard([
        ['üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
      ]).resize()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
todayHistoryScene.hears(/üîÑ –û–±–Ω–æ–≤–∏—Ç—å/, async (ctx) => {
  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  await ctx.scene.reenter();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è"
todayHistoryScene.hears(/üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è/, (ctx) => {
  ctx.scene.enter(SCENES.HISTORY);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"
todayHistoryScene.hears(/üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω/, (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /home
todayHistoryScene.command('home', (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
todayHistoryScene.command('status', async (ctx) => {
  try {
    if (!globalDatabase) {
      ctx.reply('–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.');
      return;
    }

    const lastFeeding = await globalDatabase.getLastFeeding();
    const stats = await globalDatabase.getStats();
    
    let message = 'üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è:\n\n';
    
    if (lastFeeding) {
      const lastUser = await globalDatabase.getUserByTelegramId(ctx.from?.id || 0);
      message += `üçΩÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
      message += `   –í—Ä–µ–º—è: ${lastFeeding.timestamp.toLocaleString('ru-RU')}\n`;
      message += `   –ö—Ç–æ: ${lastUser?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
    } else {
      message += `üçΩÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ\n\n`;
    }
    
    message += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    message += `‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${stats.todayFeedings} –∫–æ—Ä–º–ª–µ–Ω–∏–π\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalFeedings} –∫–æ—Ä–º–ª–µ–Ω–∏–π\n`;
    message += `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}`;
    
    ctx.reply(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–Ω–æ –Ω–µ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /)
todayHistoryScene.on('text', (ctx) => {
  const text = ctx.message.text;
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
  if (text.startsWith('/')) {
    return;
  }
  
  ctx.reply(
    '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.',
    Markup.keyboard([
      ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è'],
      ['üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω']
    ]).resize()
  );
});

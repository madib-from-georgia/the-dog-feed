import { Scenes } from 'telegraf';
import { BotContext } from '../types';
import { getPaginationKeyboard } from '../utils/keyboards';
import { MESSAGES, SCENES, EXPORT_SETTINGS } from '../utils/constants';

export const fullHistoryScene = new Scenes.BaseScene<BotContext>(SCENES.FULL_HISTORY);

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
fullHistoryScene.enter(async (ctx) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
  ctx.session.fullHistory = {
    currentPage: 1,
    totalPages: 1,
    totalRecords: 0,
    period: 'all'
  };
  
  await showHistoryPage(ctx, 1);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
async function showHistoryPage(ctx: BotContext, page: number) {
  try {
    ctx.reply(MESSAGES.LOADING_HISTORY);
    
    const limit = EXPORT_SETTINGS.RECORDS_PER_PAGE;
    const offset = (page - 1) * limit;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const totalRecords = await ctx.database.getTotalFeedingsCount();
    const totalPages = Math.ceil(totalRecords / limit);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const feedings = await ctx.database.getFeedingsWithPagination(page, limit);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    ctx.session.fullHistory = {
      currentPage: page,
      totalPages,
      totalRecords,
      period: ctx.session.fullHistory?.period || 'all'
    };
    
    if (feedings.length === 0) {
      ctx.reply(MESSAGES.NO_FEEDINGS_FOUND, getPaginationKeyboard(page, totalPages, false, false));
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    let message = `${MESSAGES.FULL_HISTORY_HEADER}\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message += `${MESSAGES.STATISTICS_HEADER}\n`;
    message += `üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}\n`;
    message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page} –∏–∑ ${totalPages}\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π
    for (const feeding of feedings) {
      const user = await ctx.database.getUserById(feeding.userId);
      const username = user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const date = feeding.timestamp.toLocaleDateString('ru-RU');
      const time = feeding.timestamp.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      });
      
      const foodTypeIcon = feeding.foodType === 'dry' ? 'üåæ' : 'ü•´';
      const foodTypeText = feeding.foodType === 'dry' ? '–°—É—Ö–æ–π' : '–í–ª–∞–∂–Ω—ã–π';
      
      message += `üìÖ ${date} ${time}\n`;
      message += `üë§ ${username}\n`;
      message += `${foodTypeIcon} ${foodTypeText} –∫–æ—Ä–º - ${feeding.amount}–≥\n`;
      
      if (feeding.details) {
        message += `üìù ${feeding.details}\n`;
      }
      
      message += '\n';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è/–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const hasNext = page < totalPages;
    const hasPrev = page > 1;
    
    ctx.reply(message, getPaginationKeyboard(page, totalPages, hasNext, hasPrev));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      getPaginationKeyboard(1, 1, false, false)
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
fullHistoryScene.hears(/‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è/, async (ctx) => {
  const currentPage = ctx.session.fullHistory?.currentPage || 1;
  if (currentPage > 1) {
    await showHistoryPage(ctx, currentPage - 1);
  }
});

fullHistoryScene.hears(/‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è/, async (ctx) => {
  const currentPage = ctx.session.fullHistory?.currentPage || 1;
  const totalPages = ctx.session.fullHistory?.totalPages || 1;
  
  if (currentPage < totalPages) {
    await showHistoryPage(ctx, currentPage + 1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
fullHistoryScene.hears(/üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏/, (ctx) => {
  ctx.scene.enter(SCENES.EXPORT);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
fullHistoryScene.hears(/üîç –§–∏–ª—å—Ç—Ä—ã/, (ctx) => {
  ctx.reply(
    'üîç –§–∏–ª—å—Ç—Ä—ã\n\n' +
    '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n' +
    '–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.',
    getPaginationKeyboard(
      ctx.session.fullHistory?.currentPage || 1,
      ctx.session.fullHistory?.totalPages || 1,
      false,
      false
    )
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ)
fullHistoryScene.hears(/üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \d+ –∏–∑ \d+/, (ctx) => {
  // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"
fullHistoryScene.hears(/üè† –í—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω/, (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /home
fullHistoryScene.command('home', (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
fullHistoryScene.on('text', (ctx) => {
  const text = ctx.message.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
  if (text.startsWith('/')) {
    return;
  }
  
  const currentPage = ctx.session.fullHistory?.currentPage || 1;
  const totalPages = ctx.session.fullHistory?.totalPages || 1;
  const hasNext = currentPage < totalPages;
  const hasPrev = currentPage > 1;
  
  ctx.reply(
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
    getPaginationKeyboard(currentPage, totalPages, hasNext, hasPrev)
  );
}); 

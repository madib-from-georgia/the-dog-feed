#!/usr/bin/env ts-node

/**
 * üíæ –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π.
 * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run backup-db
 * 
 * üìù –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: dog_feeding_backup_YYYYMMDD_HHMMSS.db
 */

import { DatabaseService } from '../../src/services/database';
import * as path from 'path';
import * as fs from 'fs';

async function backupDatabase() {
    console.log('üíæ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ –±–æ—Ç–µ)
    const dbPath = path.resolve('dog_feeding.db');
    console.log(`üìÇ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (!fs.existsSync(dbPath)) {
        console.error('‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        process.exit(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').replace('T', '_').substring(0, 19);
    const backupFileName = `dog_feeding_backup_${timestamp}.db`;
    const backupPath = path.resolve(backupFileName);
    
    console.log(`üÜï –ò–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupFileName}`);
    
    try {
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        fs.copyFileSync(dbPath, backupPath);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        if (fs.existsSync(backupPath)) {
            const stats = fs.statSync(backupPath);
            console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
            console.log(`üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${stats.size} –±–∞–π—Ç`);
            console.log(`üìÇ –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupPath}`);
        } else {
            throw new Error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö
        console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:');
        const dirPath = path.dirname(dbPath);
        const files = fs.readdirSync(dirPath);
        const backupFiles = files
            .filter(file => file.startsWith('dog_feeding_backup_') && file.endsWith('.db'))
            .sort()
            .reverse()
            .slice(0, 5); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        
        if (backupFiles.length === 0) {
            console.log('üì≠ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            backupFiles.forEach(file => {
                const filePath = path.join(dirPath, file);
                const stats = fs.statSync(filePath);
                const fileDate = new Date(stats.mtime);
                console.log(`  üìÑ ${file} (${stats.size} –±–∞–π—Ç) - ${fileDate.toLocaleString('ru-RU')}`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
        process.exit(1);
    }
    
    console.log('\nüéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    backupDatabase().catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

export default backupDatabase;

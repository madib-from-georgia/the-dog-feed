#!/bin/bash

# üèóÔ∏è –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è VM –≤ Yandex Cloud –¥–ª—è Dog Feeding Bot
# –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π yc CLI
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/create-vm-yandex.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ yc CLI
check_yc_cli() {
    print_status "–ü—Ä–æ–≤–µ—Ä—è—é Yandex Cloud CLI..."
    
    if ! command -v yc &> /dev/null; then
        print_error "Yandex Cloud CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print_status "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CLI: https://cloud.yandex.ru/docs/cli/quickstart"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if ! yc config list &> /dev/null; then
        print_error "Yandex Cloud CLI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        print_status "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: yc init"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ jq –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
    if ! command -v jq &> /dev/null; then
        print_error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print_status "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jq: brew install jq (macOS) –∏–ª–∏ apt install jq (Ubuntu)"
        exit 1
    fi
    
    print_success "Yandex Cloud CLI –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ –ø–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö folders
check_permissions() {
    print_status "–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ folders –∏ –ø—Ä–∞–≤–∞..."
    
    echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ folders:"
    yc resource-manager folder list --format json | jq -r '.[] | "  ‚Ä¢ \(.name) (ID: \(.id))"' 2>/dev/null || {
        # Fallback –µ—Å–ª–∏ jq –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        yc resource-manager folder list || {
            print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ folders"
            return 1
        }
    }
    
    echo ""
    echo "üîë –¢–µ–∫—É—â–∏–π folder: $CURRENT_FOLDER"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ VM
    print_status "–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã
    if yc compute disk list --limit 1 &>/dev/null; then
        print_success "–ü—Ä–∞–≤–∞ –Ω–∞ compute —Å–µ—Ä–≤–∏—Å—ã –µ—Å—Ç—å"
    else
        print_warning "–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ compute —Å–µ—Ä–≤–∏—Å—ã"
    fi
    
    if yc vpc network list --limit 1 &>/dev/null; then
        print_success "–ü—Ä–∞–≤–∞ –Ω–∞ VPC —Å–µ—Ä–≤–∏—Å—ã –µ—Å—Ç—å"
    else
        print_warning "–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ VPC —Å–µ—Ä–≤–∏—Å—ã"
    fi
}

# –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ VM
collect_vm_params() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ VM..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    CURRENT_FOLDER=$(yc config get folder-id)
    CURRENT_ZONE=$(yc config get compute-default-zone 2>/dev/null)
    
    # –ï—Å–ª–∏ –∑–æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [ -z "$CURRENT_ZONE" ]; then
        CURRENT_ZONE="ru-central1-a"
        print_status "–ó–æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $CURRENT_ZONE"
        yc config set compute-default-zone "$CURRENT_ZONE"
    fi
    
    echo "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    echo "  Folder ID: $CURRENT_FOLDER"
    echo "  Zone: $CURRENT_ZONE"
    echo ""
    
    read -p "üìõ –ò–º—è VM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: dog-bot-vm): " VM_NAME
    VM_NAME=${VM_NAME:-dog-bot-vm}
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø VM:"
    echo "  1) –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (1 vCPU, 2GB RAM) - ~400‚ÇΩ/–º–µ—Å—è—Ü"
    echo "  2) –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (2 vCPU, 4GB RAM) - ~800‚ÇΩ/–º–µ—Å—è—Ü"
    echo "  3) –ú–æ—â–Ω–∞—è (4 vCPU, 8GB RAM) - ~1600‚ÇΩ/–º–µ—Å—è—Ü"
    read -p "–í—ã–±–æ—Ä (1-3, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2): " VM_TYPE
    VM_TYPE=${VM_TYPE:-2}
    
    case $VM_TYPE in
        1)
            CORES=2
            MEMORY=2
            ;;
        2)
            CORES=2
            MEMORY=4
            ;;
        3)
            CORES=4
            MEMORY=8
            ;;
        *)
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            exit 1
            ;;
    esac
    
    read -p "üóùÔ∏è  SSH –∫–ª—é—á (–ø—É—Ç—å –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–ª—é—á—É, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ~/.ssh/id_rsa.pub): " SSH_KEY_PATH
    SSH_KEY_PATH=${SSH_KEY_PATH:-~/.ssh/id_rsa.pub}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–∞
    if [ ! -f "$SSH_KEY_PATH" ]; then
        print_error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSH_KEY_PATH"
        print_status "–°–æ–∑–¥–∞–π—Ç–µ SSH –∫–ª—é—á: ssh-keygen -t rsa -b 4096"
        exit 1
    fi
    
    SSH_KEY=$(cat "$SSH_KEY_PATH")
    
    print_success "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã VM –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ VM
create_vm() {
    print_status "–°–æ–∑–¥–∞—é VM –≤ Yandex Cloud..."
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–∑ Ubuntu 22.04
    IMAGE_ID=$(yc compute image get-latest-from-family ubuntu-2204-lts --folder-id standard-images --format json | jq -r '.id')
    
    print_status "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—Ä–∞–∑ Ubuntu 22.04: $IMAGE_ID"
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    NETWORK_ID=$(yc vpc network list --format json | jq -r '.[0].id')
    if [ "$NETWORK_ID" = "null" ] || [ -z "$NETWORK_ID" ]; then
        print_error "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        print_status "–°–æ–∑–¥–∞—é —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
        NETWORK_ID=$(yc vpc network create --name default --format json | jq -r '.id')
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º subnet
    SUBNET_ID=$(yc vpc subnet list --format json | jq -r --arg zone "$CURRENT_ZONE" '.[] | select(.zone_id == $zone) | .id' | head -1)
    if [ "$SUBNET_ID" = "null" ] || [ -z "$SUBNET_ID" ]; then
        print_status "–°–æ–∑–¥–∞—é subnet –¥–ª—è –∑–æ–Ω—ã $CURRENT_ZONE..."
        SUBNET_ID=$(yc vpc subnet create \
            --name "default-$CURRENT_ZONE" \
            --zone "$CURRENT_ZONE" \
            --range 10.128.0.0/24 \
            --network-id "$NETWORK_ID" \
            --format json | jq -r '.id')
    fi
    
    print_status "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è subnet: $SUBNET_ID –≤ –∑–æ–Ω–µ $CURRENT_ZONE"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö VM —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    EXISTING_VM_ID=$(yc compute instance list --format json | jq -r --arg name "$VM_NAME" '.[] | select(.name == $name) | .id' 2>/dev/null | head -1)
    
    if [ ! -z "$EXISTING_VM_ID" ] && [ "$EXISTING_VM_ID" != "null" ]; then
        print_warning "VM —Å –∏–º–µ–Ω–µ–º '$VM_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: $EXISTING_VM_ID)"
        read -p "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é VM? (y/n): " USE_EXISTING
        
        if [[ $USE_EXISTING =~ ^[Yy] ]]; then
            VM_ID="$EXISTING_VM_ID"
            VM_IP=$(yc compute instance get "$VM_ID" --format json | jq -r '.network_interfaces[0].primary_v4_address.one_to_one_nat.address' 2>/dev/null)
            print_success "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é VM: $VM_ID —Å IP: $VM_IP"
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VM
            cat > .vm-info << EOF
VM_ID=$VM_ID
VM_NAME=$VM_NAME
VM_IP=$VM_IP
VM_ZONE=$CURRENT_ZONE
VM_CORES=$CORES
VM_MEMORY=$MEMORY
CREATED_AT=$(date)
EOF
            return 0
        else
            print_status "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è VM –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é"
            exit 1
        fi
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ VM
    print_status "–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è VM:"
    echo "yc compute instance create --name \"$VM_NAME\" --zone \"$CURRENT_ZONE\" --network-interface subnet-id=\"$SUBNET_ID\",nat-ip-version=ipv4 --create-boot-disk image-id=\"$IMAGE_ID\",size=20,type=network-hdd --cores \"$CORES\" --memory \"${MEMORY}GB\" --ssh-key \"$SSH_KEY_PATH\" --format json"
    
    print_status "–°–æ–∑–¥–∞—é VM... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)"
    
    VM_INFO=$(yc compute instance create \
        --name "$VM_NAME" \
        --zone "$CURRENT_ZONE" \
        --network-interface subnet-id="$SUBNET_ID",nat-ip-version=ipv4 \
        --create-boot-disk image-id="$IMAGE_ID",size=20,type=network-hdd \
        --cores "$CORES" \
        --memory "${MEMORY}GB" \
        --ssh-key "$SSH_KEY_PATH" \
        --format json 2>&1)
    
    local EXIT_CODE=$?
    
    if [ $EXIT_CODE -ne 0 ]; then
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VM (–∫–æ–¥: $EXIT_CODE)"
        echo "$VM_INFO"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if echo "$VM_INFO" | grep -q "Permission denied"; then
        print_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VM –≤ folder $CURRENT_FOLDER"
        print_status "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
        echo "  1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–º —Ä–æ–ª–∏:"
        echo "     - compute.admin (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VM)"
        echo "     - vpc.admin (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–µ–π)"
        echo "  2. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–π folder:"
        echo "     yc config set folder-id FOLDER_ID"
        echo "  3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π folder:"
        echo "     yc resource-manager folder create --name dog-bot-folder"
        echo ""
        print_status "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∞–≤:"
        echo "  https://cloud.yandex.ru/docs/iam/operations/roles/grant"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
    if echo "$VM_INFO" | grep -q "ERROR:"; then
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VM:"
        echo "$VM_INFO"
        exit 1
    fi
    
    VM_ID=$(echo "$VM_INFO" | jq -r '.id')
    
    print_success "VM —Å–æ–∑–¥–∞–Ω–∞ —Å ID: $VM_ID"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ VM
    print_status "–û–∂–∏–¥–∞—é –∑–∞–ø—É—Å–∫–∞ VM..."
    
    while true; do
        STATUS=$(yc compute instance get "$VM_ID" --format json | jq -r '.status')
        if [ "$STATUS" = "RUNNING" ]; then
            break
        fi
        echo -n "."
        sleep 3
    done
    
    echo ""
    print_success "VM –∑–∞–ø—É—â–µ–Ω–∞!"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
    VM_IP=$(yc compute instance get "$VM_ID" --format json | jq -r '.network_interfaces[0].primary_v4_address.one_to_one_nat.address')
    
    print_success "–ü—É–±–ª–∏—á–Ω—ã–π IP: $VM_IP"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VM
    cat > .vm-info << EOF
VM_ID=$VM_ID
VM_NAME=$VM_NAME
VM_IP=$VM_IP
VM_ZONE=$CURRENT_ZONE
VM_CORES=$CORES
VM_MEMORY=$MEMORY
CREATED_AT=$(date)
EOF
    
    print_success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .vm-info"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Security Groups (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
setup_security_groups() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Security Groups..."
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å security group (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö)
    SG_NAME="dog-bot-sg"
    
    if yc vpc security-group create \
        --name "$SG_NAME" \
        --description "Security group for Dog Feeding Bot" \
        --rule "direction=ingress,port=22,protocol=tcp,v4-cidrs=[0.0.0.0/0]" \
        --rule "direction=ingress,port=3000,protocol=tcp,v4-cidrs=[0.0.0.0/0]" \
        --rule "direction=ingress,port=80,protocol=tcp,v4-cidrs=[0.0.0.0/0]" \
        --rule "direction=ingress,port=443,protocol=tcp,v4-cidrs=[0.0.0.0/0]" \
        --rule "direction=egress,protocol=any,v4-cidrs=[0.0.0.0/0]" \
        &> /dev/null; then
        
        print_success "Security Group —Å–æ–∑–¥–∞–Ω–∞: $SG_NAME"
        
        # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ security group –∫ VM
        SG_ID=$(yc vpc security-group get "$SG_NAME" --format json | jq -r '.id')
        yc compute instance update "$VM_ID" \
            --network-interface subnet-id="$SUBNET_ID",nat-ip-version=ipv4,security-group-ids="$SG_ID" \
            &> /dev/null || true
            
    else
        print_warning "Security Groups –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ"
        print_status "–ü–æ—Ä—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã—Ç—ã —á–µ—Ä–µ–∑ UFW –Ω–∞ VM"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VM
test_vm_access() {
    print_status "–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VM..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SSH
    print_status "–û–∂–∏–¥–∞—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SSH —Å–µ—Ä–≤–∏—Å–∞..."
    
    RETRY_COUNT=0
    MAX_RETRIES=30
    
    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        if ssh -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=no yc-user@"$VM_IP" exit 2>/dev/null; then
            print_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            break
        fi
        
        echo -n "."
        sleep 10
        RETRY_COUNT=$((RETRY_COUNT + 1))
    done
    
    echo ""
    
    if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
        print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM –ø–æ SSH"
        print_warning "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ–∑–∂–µ: ssh yc-user@$VM_IP"
        return 1
    fi
}

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_summary() {
    echo ""
    echo "üéâ VM —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
    echo "================================================================"
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VM:"
    echo "   –ò–º—è: $VM_NAME"
    echo "   ID: $VM_ID"
    echo "   IP: $VM_IP"
    echo "   Zone: $CURRENT_ZONE"
    echo "   CPU: $CORES vCPU"
    echo "   RAM: ${MEMORY}GB"
    echo ""
    echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:"
    echo "   ssh yc-user@$VM_IP"
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞:"
    echo "   npm run deploy:yandex"
    echo ""
    echo "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   yc compute instance stop $VM_ID     # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VM"
    echo "   yc compute instance start $VM_ID    # –ó–∞–ø—É—Å–∫ VM"
    echo "   yc compute instance delete $VM_ID   # –£–¥–∞–ª–µ–Ω–∏–µ VM"
    echo ""
    echo "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~$(($CORES * 200 + $MEMORY * 100))‚ÇΩ/–º–µ—Å—è—Ü"
    echo "   (–ø—Ä–∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ)"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ VM –¥–ª—è Dog Feeding Bot –≤ Yandex Cloud"
    echo "=================================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ yc CLI
    check_yc_cli
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ folders
    check_permissions
    
    # –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    collect_vm_params
    
    # –°–æ–∑–¥–∞–Ω–∏–µ VM
    create_vm
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    setup_security_groups
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if test_vm_access; then
        show_summary
        
        echo ""
        read -p "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å–µ–π—á–∞—Å? (y/n): " DEPLOY_NOW
        if [[ $DEPLOY_NOW =~ ^[Yy] ]]; then
            print_status "–ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
            ./scripts/deploy-yandex.sh
        fi
    else
        show_summary
        print_warning "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VM –ø–æ–∑–∂–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run deploy:yandex"
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 
